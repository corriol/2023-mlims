{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Markup language and information management systems","text":"<p>This professional module is taught in the first year of the Vocational Training Course to get the certificated of Higher Technician in Web Application Development. </p>"},{"location":"#learning-outcomes","title":"Learning outcomes","text":"<p>By the end of the year students must be able to:</p> <ul> <li>Recognise the characteristics of the markup language analysing and interpreting code fragments.</li> <li>Use markup languages for the transmission of information through the web analysing the structure of documents and identifying their elements.</li> <li>Create content channels analysing and using syndication technologies.</li> <li>Establish validation mechanisms for XML documents using methods to define their syntax and structure.</li> <li>Carry out conversions of XML documents using processing techniques and tools.</li> <li>Manage information in XML format analysing and using storage technologies and query languages.</li> <li>Work with business information management systems carrying out tasks of import, integration, assurance and extraction of information.</li> </ul>"},{"location":"02-xml-scheme/","title":"2. XML schemas and vocabularies","text":"Objectives <ul> <li>Understand the need to describe the information transmitted in XML documents and their rules.</li> <li>Identify technologies related to the definition of XML documents.</li> <li>Analyse the structure and specific syntax used in the description.</li> <li>Create descriptions of XML documents.</li> <li>Use descriptions in the preparation and validation of XML documents.</li> <li>Associate descriptions with documents.</li> <li>Document descriptions.</li> </ul> Assessment criteria <ol> <li>The need to describe the information transmitted in XML documents has been established and its rules.</li> <li>Technologies related to the definition of XML documents have been identified.</li> <li>The specific structure and syntax used in the description has been analyzed.</li> <li>XML document descriptions have been created.</li> <li>Descriptions have been used in the development and validation of XML documents.</li> <li>Descriptions have been associated with the documents.</li> <li>Specific tools are used.</li> <li>The descriptions have been documented.</li> </ol>"},{"location":"02-xml-scheme/#introduction","title":"Introduction","text":"<p>In unit 1 you have learned how to create well-formed XML documents, that is, following their syntactic rules.</p> <p>Important</p> <p>An XML document is valid when, in addition to being well-formed, it does not break none of the rules established in its structure definition.</p> <p>The aim of this unit is to learn how structural rules can be defined  to be able to create our own XML dialects and how these rules can define valid XML documents.</p> <p>This kind of structure can be defined with the following languages:</p> <ul> <li>DTD (Document Type Definition).</li> <li>XML Schema.</li> <li>RELAX NG (REgular LAnguage for XML Next Generation).</li> </ul> <p>Look at this simple XML document called \"note.xml\":</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;note&gt;\n&lt;to&gt;Tove&lt;/to&gt;\n&lt;from&gt;Jani&lt;/from&gt;\n&lt;heading&gt;Reminder&lt;/heading&gt;\n&lt;body&gt;Don't forget me this weekend!&lt;/body&gt;\n&lt;/note&gt; </code></pre>"},{"location":"02-xml-scheme/#a-dtd-file","title":"A DTD File","text":"<p>The following example is a DTD file called <code>note.dtd</code> that defines the elements of the XML document above (<code>note.xml</code>):</p> <p><pre><code>&lt;!ELEMENT note (to, from, heading, body)&gt;\n&lt;!ELEMENT to (#PCDATA)&gt;\n&lt;!ELEMENT from (#PCDATA)&gt;\n&lt;!ELEMENT heading (#PCDATA)&gt;\n&lt;!ELEMENT body (#PCDATA)&gt;\n</code></pre> The first line defines the <code>note</code> element to have four child elements: \"to, from, heading, body\".</p> <p>Line 2-5 defines the <code>to</code>, <code>from</code>, <code>heading</code>, <code>body</code> elements to be of type <code>#PCDATA</code>.</p>"},{"location":"02-xml-scheme/#an-xml-schema","title":"An XML Schema","text":"<p>The following example is an XML Schema file called <code>note.xsd</code> that defines the elements of the XML document above (<code>note.xml</code>):</p> <p><pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;xs:schema&gt;\n&lt;xs:element name=\"note\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"to\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"from\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"heading\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"body\" type=\"xs:string\"/&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre> The <code>note</code> element is a complex type because it contains other elements. The other elements (<code>to</code>, <code>from</code>, <code>heading</code>, body) are simple types because they do not contain other elements. You will learn more about simple and complex types in the following chapters.</p>"},{"location":"02-xml-scheme/#document-type-definitions","title":"Document Type Definitions","text":"<p>DTD (document type definitions) is a schema definition language that already existed before the advent of XML (used in SGML). It was designed to work with SGML and could be used in many of the markup languages \u200b\u200bbased on it, such as XML or HTML.</p> <p>When XML was defined, it was used to make a simplified version of DTD that was the original schema specification language.</p> <p>The main purpose of DTDs is to provide a mechanism for validating the structures of XML documents and determining whether the document is valid or not. But this will not be the only advantage that DTDs will give us, but we can also use them to share information between organizations, because if someone else has our DTD they can send us information in our format and we can process it.</p> <p>For a long time DTDs were the most widely used vocabulary definition system in XML but have now been overtaken by XML Schemas. However, it is still widely used, especially because it is much simpler.</p> <p>The XML specification refers to DTDs as a method of defining XML vocabularies, but DTDs have a number of limitations that led the W3C to define a new specification. This specification was called the W3C XML Schema Definition Language (popularly called the XML Schema or XSD), and was created to replace the DTD as a vocabulary definition method for XML documents. Furthermore, unlike DTD, XSD is an XML dialect.</p> <p>For these reasons, we will focus on XML Schema.</p>"},{"location":"02-xml-scheme/#xml-schema-definition","title":"XML Schema Definition","text":"<p>The latest specification can be found at www.w3.org/XML/Schema.</p> <p>The purpose of an XML Schema is to define the legal building blocks of an XML document:</p> <ul> <li>the elements and attributes that can appear in a document</li> <li>the number of (and order of) child elements</li> <li>data types for elements and attributes</li> <li>default and fixed values for elements and attributes</li> </ul> <p>The success of XSD has been great, and it is now used for tasks other than simply validating XML. It is also used in other XML technologies such as XQuery, web services, etc.</p> <p>The most important features that XSD provides are:</p> <ol> <li>It is written in XML and therefore it is not necessary to learn a new language to define XML schemas.</li> <li>It has its own data type system, so you can check the contents of the items.</li> <li>Supports namespaces to allow mixing different vocabularies.</li> </ol>"},{"location":"02-xml-scheme/#schema-definition","title":"<code>&lt;schema&gt;</code> definition","text":"<p>XSD is based on XML and must therefore comply with XML rules:</p> <ul> <li>Although not required, the file is usually started with the XML declaration.</li> <li>There is only one root element, which in this case is <code>&lt;schema&gt;</code>.</li> </ul> <p>Due to the fact that an specific and well-known vocabulary is being used to be able to use the XML elements, the XSD namespace must always be specified: <code>http://www.w3.org/2001/XMLSchema</code>.</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\nelementFormDefault=\"qualified\"&gt;\n...\n&lt;/xs:schema&gt;\n</code></pre> <p><code>xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"</code> indicates that the elements and data types used in the schema come from the \"http://www.w3.org/2001/XMLSchema\" namespace. It also specifies that the elements and data types that come from the \"http://www.w3.org/2001/XMLSchema\" namespace should be prefixed with <code>xs:</code>.</p> <p><code>elementFormDefault=\"qualified\"</code> indicates that any elements used by the XML instance document which were declared in this schema must be namespace qualified.</p> <p>XSD tags</p> <p>XSD defines many tags and not all of them can be seen here. You can find all possible tags in the specification www.w3.org/TR/xmlschema11-1.</p> <p>The <code>&lt;schema&gt;</code> tag can have different attributes, some of which we can see in the following table</p> Attribute Meaning <code>attributeFormDefault</code> The value must be \"qualified\" or \"unqualified\". Default is \"unqualified\". \"unqualified\" indicates that attributes from the target namespace are not required to be qualified with the namespace prefix. <code>elementFormDefault</code> The form for elements declared in the target namespace of this schema. The value must be \"qualified\" or \"unqualified\". Default is \"unqualified\". \"unqualified\" indicates that elements from the target namespace are not required to be qualified with the namespace prefix. <code>version</code> Defines which version of the schema document we are defining (not the XML Schemas version). <p>From the root element you can start defining the tags of the vocabulary you want to create.</p>"},{"location":"02-xml-scheme/#associate-a-schema-to-an-xml-document","title":"Associate a schema to an XML document","text":"<p>Unlike other definition languages \u200b\u200b-such as DTDs, in which the association must be specified in the XML document- you do not need to modify the XML file to validate an XML with an XSD. However, it is also possible to do this by defining the namespace.</p> <p>To associate an XML document with a schema document, you need to define the namespace with the <code>xmlns</code> attribute, and use one of the language attributes to define the schema file:</p> <p><pre><code>&lt;urlset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:noNamespaceSchemaLocation=\"urlset.xsd\"&gt;\n</code></pre> References to the schema file can be defined in two ways, which can be seen in the table.</p> Attribute Meaning <code>noNamespaceSchemaLocation</code> No namespaces will be used in the document. <code>schemaLocation</code> Used when explicitly using namespace names in tags."},{"location":"02-xml-scheme/#elements-definition","title":"Elements definition","text":"<p>Elements are defined using the <code>&lt;element&gt;</code> tag and the <code>name</code> attribute. Optionally, it can include the data type of its containing element. In the following example we define an element named <code>firstname</code> of type <code>string</code>.</p> <p><pre><code>&lt;xs:element name=\"firstname\" type=\"xs:string\" /&gt;\n</code></pre> This element complies the definition:</p> <p><pre><code>&lt;firstname&gt;Homer&lt;/firstname&gt;\n</code></pre> The XSD divides the elements into two large groups based on the data they contain:</p> <ul> <li>Elements with simple type content: Elements without attributes that only contain data.</li> <li>Elements with complex type content: Elements that may have attributes, no content, or contain elements.</li> </ul> <p>From the definition, it can be seen that there will almost always be some complex type, as the root will usually contain other elements.</p>"},{"location":"02-xml-scheme/#elements-with-simple-type-content","title":"Elements with simple type content","text":"<p>Info</p> <p>Elements with simple type content are those that do not contain other elements or have attributes.</p> <p>XSD version 1.1 defines about fifty different data types, which can be found in their definition www.w3.org/TR/xmlschema11-2. Among the most used are those in the following table:</p> Type Data that can be stored there <code>string</code> Character strings <code>decimal</code> Numeric values <code>boolean</code> Can only contain \u2018true\u2019 or \u2018false\u2019 or (1 or 0) <code>date</code> Dates in form (YYYY-MM-DD) <code>anyURI</code> Site references (URLs, disk paths\u2026) <code>base64binary</code> Binary data encoded in base64 <code>integer</code> Integers <p>From the basic types, the standard creates others with the aim of having data types that can be better adapted to the objectives of the person designing the scheme. Therefore there are the types called <code>positiveInteger</code>, <code>nonNegativeInteger</code>, <code>gYearMonth</code>, <code>unsignedInt</code>,... </p> <p>Data types allow you to restrict the values \u200b\u200bthat XML elements will contain. For example, if you start from the following definition:</p> <p><pre><code>...\n    &lt;xs:element name=\"position\" type=\"xs:integer\" /&gt;\n&lt;/xs:schema&gt;\n</code></pre> An item can only be validated if its contents are an integer. For example, the following example will not validate:</p> <pre><code>&lt;position&gt;First&lt;/position&gt;\n</code></pre> <p>In the following table you can see examples of definitions of elements and values \u200b\u200bthat validate them.</p> Label Example <code>&lt;xs:element name=\"dia\" type=\"xs:date\" /&gt;</code> <code>&lt;dia&gt;2011-09-15&lt;/dia&gt;</code> <code>&lt;xs:element name=\"height\u201d type=\"xs:integer\" /&gt;</code> <code>&lt;height&gt;220&lt;/height&gt;</code> <code>&lt;xs:element name=\"name\u201d type=\"xs:string\u201d /&gt;</code> <code>&lt;name&gt;Pere Puig&lt;/name&gt;</code> <code>&lt;xs:element name=\"size\u201d type=\"xs:float\u201d /&gt;</code> <code>&lt;size&gt;1.7E2&lt;/size&gt;</code> <code>&lt;xs:element name=\"place\u201d type=\"xs:anyURI\u201d /&gt;</code> <code>&lt;place&gt;http://www.ioc.cat&lt;/place&gt;</code>"},{"location":"02-xml-scheme/#cardinality","title":"Cardinality","text":"<p>When an element is defined in XSD, it is in such a way that the tag must appear once. It is quite common for tags to be repeated certain times. In XSD this has been simplified by attributes of the <code>&lt;element&gt;</code> tag that determine the cardinality of the elements:</p> <ul> <li><code>minOccurs</code>: allows you to define how many times an element must come out at least. A value of \u20180\u2019 indicates that the item may not come out.</li> <li><code>maxOccurs</code>: used to define the maximum number of times an element can be output. <code>unbounded</code> implies that there is no limit to the times it can go out.</li> </ul> <p>Using the attributes, you can set the <code>&lt;firstname&gt;</code> element to go out once and the <code>&lt;surname&gt;</code> element a maximum of twice.</p> <pre><code>&lt;xs:element name=\"firtname\" /&gt;\n&lt;xs:element name=\"surname\" maxOccurs=\"2\" /&gt;\n</code></pre>"},{"location":"02-xml-scheme/#fixed-and-default-values","title":"Fixed and default values","text":"<p>Values \u200b\u200bcan also be given to elements with the <code>fixed</code>, <code>default</code>, and <code>nullable</code> attributes.</p> <p>The <code>fixed</code> attribute allows you to define a required value for an element:</p> <p><pre><code>&lt;xs:element name=\"centre\" type=\"xs:string\" fixed=\"IOC\" /&gt;\n</code></pre> So only content with the specified value (or nothing) can be defined:</p> <pre><code>&lt;centre /&gt;\n&lt;centre&gt;IOC&lt;/centre&gt;\n</code></pre> <p>But never a different value than specified:</p> <p><pre><code>&lt;!-- validation error --&gt;\n&lt;centre&gt; Institut Cendrassos &lt;/centre&gt;\n</code></pre> Unlike <code>fixed</code>, <code>default</code> assigns a default value but lets it be changed in the contents of the element.</p> <pre><code>&lt;xsi:element name=\"centre\" type=\"xs:string\" default=\"IOC\" /&gt;\n</code></pre> <p>The definition would validate with the following three cases:</p> <pre><code>&lt;center /&gt;\n&lt;centre&gt;IOC&lt;/centre&gt;\n&lt;centre&gt;Institut Cendrassos&lt;/centre&gt;\n</code></pre> <p>The <code>null</code> attribute is used to indicate whether null content is allowed. Therefore, you can only take the values <code>\u200b\u200byes</code> or <code>no</code>.</p>"},{"location":"02-xml-scheme/#simple-custom-types","title":"Simple custom types","text":"<p>Sometimes it may be interesting to define values \u200b\u200bfor elements that do not necessarily have to match the standards. XSD allows you to define custom types of data. For example, if you want a numeric value but do not accept all values \u200b\u200bbut a subset of integers.</p> <p>To define custom simple types, the type is not placed in the element and a <code>&lt;simpleType&gt;</code> child is defined.</p> <pre><code>&lt;xs:element name=\"person\"&gt;\n&lt;xs:simpleType&gt;\n...\n    &lt;/xs:simpleType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p><code>simpleType</code> specifies the modification you want to make. The most common is that the changes are made with list, union, restriction or extension.</p>"},{"location":"02-xml-scheme/#lists","title":"Lists","text":"<p>Although lists of values \u200b\u200bcan be defined, it is not highly recommended to use them. Most experts believe that it is better to define the values \u200b\u200bin the list using tag repetitions.</p> <p>Using list will allow you to define that an item can contain lists of values. Therefore, to specify that a  element can contain a list of dates would be defined: <pre><code>&lt;xs:element name=\"matches\"&gt;\n&lt;xs:simpleType&gt;\n&lt;xs:list itemType=\"xs:date\" /&gt;\n&lt;/xs:simpleType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>The element would validate with something like:</p> <p><pre><code>&lt;matches&gt;2011-01-07 2011-01-15 2011-01-21 &lt;/matches&gt;\n</code></pre> <code>simpleType</code> elements can also be defined with a name outside the elements and then used as a custom data type.</p> <pre><code>&lt;xs:simpleType name=\"days\"&gt;\n&lt;xs:list itemType=\"xs:date\" /&gt;\n&lt;/xs:simpleType&gt;\n&lt;xs:element name=\"matches\" type=\"days\" /&gt;\n</code></pre>"},{"location":"02-xml-scheme/#union","title":"Union","text":"<p>Using custom named types, union type modifications can be created. Union modifiers are used to allow different types to be mixed into the contents of an element.</p> <p>Defining the <code>&lt;price&gt;</code> element will allow the element to be of type value or symbol type.</p> <pre><code>&lt;xs:element name=\"price\"&gt;\n&lt;xs:simpleType&gt;\n&lt;xs:union memberTypes=\"value symbol\" /&gt;\n&lt;/xs:simpleType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>With this we could assign values \u200b\u200blike these:</p> <pre><code>&lt;price&gt;25 \u20ac&lt;/price&gt;\n</code></pre>"},{"location":"02-xml-scheme/#restrictions","title":"Restrictions","text":"<p>Without a doubt the most interesting modifier is the one that allows to define restrictions to the base types. With the restriction modifier you can create data types in which only certain values \u200b\u200bare accepted, the data meets a certain condition, and so on.</p> <p>The <code>&lt;birth&gt;</code> element can only have integer values \u200b\u200bbetween 1850 and 2011 if defined as follows:</p> <pre><code>&lt;xs:simpleType name=\"year_birth\"&gt;\n&lt;xs:restriction base=\"xs:integer\"&gt;\n&lt;xs:maxInclusive value=\"2011\" /&gt;\n&lt;xs:minInclusive value=\"1850\" /&gt;\n&lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n&lt;xs:element name=\"birth\" type=\"year_birth\" /&gt;\n</code></pre> <p>Restrictions of many types can be defined by means of attributes (Table.11). Normally the values \u200b\u200bof the constraints are specified in the value attribute:</p> Result Elements <code>maxInclusive</code>/<code>maxExclusive</code> Used to define the maximum numeric value that an item can take. <code>minInclusive</code>/<code>minExclusive</code> Set the minimum value for the value of an item. <code>length</code> With lenght we restrict the length that a text element can have. We can use <code>&lt;xs:minLength&gt;</code> and <code>&lt;xs:maxLenght&gt;</code> to be more accurate. <code>enumeration</code> Only allows the element to have one of the values \u200b\u200bspecified in the different  lines. <code>totalDigits</code> Defines the number of digits of a numeric value. <code>fractionDigits</code> Used to specify the number of decimals that a numeric value can have. <code>pattern</code> Defines a regular expression to which the value of the element must fit in order to be valid. <p>For example, the value of the <code>&lt;answer&gt;</code> element can only have one of the three values \u200b\u200b<code>\"A\"</code>, <code>\"B\"</code> or <code>\"C\"</code> if it is defined in this way:</p> <pre><code>&lt;xs:element name=\"answer\"&gt;\n&lt;xs:simpleType&gt;\n&lt;xs:enumeration value=\"A\" /&gt;\n&lt;xs:enumeration value=\"B\" /&gt;\n&lt;xs:enumeration value=\"C\" /&gt;\n&lt;/xs:simpleType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>One of the most interesting constraints is those defined by the pattern attribute, which allows you to define constraints from regular expressions. As a general rule, we have that if a character is specified in the pattern it must appear in the content; the other possibilities can be seen in the table:</p> Symbol Equivalence <code>.</code> Any character <code>\\d</code> Any digit <code>\\D</code> Any non-digit character <code>\\s</code> Non-printable characters: spaces, tabs, line breaks\u2026 <code>\\S</code> Any printable character <code>x*</code> The previous character must appear 0 or more times <code>x+</code> The previous character must appaer 1 or more times <code>x?</code> The previous character must appear or not <code>[abc]</code> There must be some character inside <code>[0-9]</code> There must be a value between the two specified, inclusive <code>x{5}</code> The <code>x</code> expression must appear 5 times. <code>x{5,}</code> The <code>x</code> expression must appear 5 or more times. <code>x{5,8}</code> The <code>x</code> expression must appear from 5 to 8 times. <p>Using this system you can define highly customized data types. For example, we can define that a data must have the form of a DNI (8 digits, a hyphen and a capital letter) with this expression:</p> <pre><code>&lt;xs:simpleType name=\"dni\"&gt;\n&lt;xs:restriction base=\"xs:string\"&gt;\n&lt;xs:pattern value=\"[0-9]{8}-[A-Z]\" /&gt;\n&lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n</code></pre> <p>More information</p> <p>In Quick-Start: Regex Cheat Sheet you will find a quick guide to Regular Expressions and a lot of related resources.</p>"},{"location":"02-xml-scheme/#elements-with-complex-type-content","title":"Elements with complex type content","text":"<p>Info</p> <p>Elements with complex type content are those that have attributes, contain other elements, or have no content.</p> <p>Elements with complex content have received a lot of criticism because they are considered too complicated, but they should be used because in all schema files there will usually be a complex type: the root of the document.</p> <p>There are considered to be four major groups of complex content:</p> <ul> <li>Those in its content have only data. Therefore, they are like those of simple types but with attributes.</li> <li>Items that contain only items in the content.</li> <li>The empty elements.</li> <li>Elements with mixed content.</li> </ul> <p>Elements with complex type are defined by specifying that the data type of the element is <code>&lt;xs:complexType&gt;</code>.</p> <pre><code>&lt;xs:element name=\"class\"&gt;\n&lt;xs:complexType&gt;\n....\n    &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>As with simple types, complex named types can be defined for reuse as custom types.</p> <pre><code>&lt;xs:complexType name=\"course\"&gt;\n...\n&lt;/xs:complexType&gt;\n&lt;xs:element classType=\"course\"/&gt;\n</code></pre>"},{"location":"02-xml-scheme/#attributes","title":"Attributes","text":"<p>A basic feature of XSD is that only complex type elements can have attributes. In essence, there is not much difference between defining an element or an attribute, as it is done in the same way but using the attribute tag.</p> <p>The data types are the same and therefore can have basic types as in the following example:</p> <p><pre><code>&lt;xs:attribute name= \"number\" type=\"xs:integer\" /&gt;\n</code></pre> Restrictions can be placed in the same way as in the elements. In this example, the year attribute cannot have values \u200b\u200bgreater than 2011 if it is defined as follows:</p> <p><pre><code>&lt;xs:attribute name=\"year\"&gt;\n&lt;xs:simpleType&gt;\n&lt;xs:restriction base=\"xs:integer\"&gt;\n&lt;xs:maxInclusive value=\"2021\" /&gt;\n&lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n&lt;/xs:attribute&gt;\n</code></pre> Unless otherwise specified, attributes are always optional.</p> <p>The <code>&lt;attribute&gt;</code> tag has a series of attributes that allow you to define extra features about the attributes.</p> Attribute Use use Specifies whether the attribute is required, optional, or prohibited. default Sets a default value. fixed Used to define required values \u200b\u200bfor attributes. form Defines whether the attribute should go with the namespace alias (qualified) or not (unqualified). <p>For example, the year attribute must be specified if it is defined as follows:</p> <pre><code>&lt;xs:attribute name=\"year\" type=\"xs:integer\" use=\"required\" /&gt;\n</code></pre>"},{"location":"02-xml-scheme/#text-only-elements-with-attributes","title":"Text-only elements with attributes","text":"<p>A complex text-only element can contain text and attributes. In this case, the content of <code>complexType</code> will be a <code>simpleContent</code>. <code>simpleContent</code> allows you to define restrictions or extensions to elements that only have data as content.</p> <p>The most important difference is that in this case you can define attributes in the element. Attributes are added by defining an extension to the type used in the element.</p> <p><code>xs:extension</code> is used to extent a simpleType or a complexType element.</p> <p>In this example, the <code>&lt;shoesize&gt;</code> element has integer content and defines one attributes, country, that are an string.</p> <p><pre><code>&lt;xs:element name=\"shoesize\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:simpleContent&gt;\n&lt;xs:extension base=\"xs:integer\"&gt;\n&lt;xs:attribute name=\"country\" type=\"xs:string\" /&gt;\n&lt;/xs:extension&gt;\n&lt;/xs:simpleContent&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt; </code></pre> For instance:</p> <pre><code>&lt;shoesize country=\"france\"&gt;35&lt;/shoesize&gt;\n</code></pre>"},{"location":"02-xml-scheme/#content-made-up-of-elements","title":"Content made up of elements","text":"<p>Elements that contain other elements can also be defined in XSD within a <code>&lt;complexType&gt;</code> and can be some of the elements in the following table:</p> Label Used for sequence Specify the content as an ordered list of items. choice Allows you to specify alternative items. all Define the content as a cluttered list of items. complexContent Extend or restrict complex content."},{"location":"02-xml-scheme/#sequence","title":"Sequence","text":"<p>The <code>&lt;sequence&gt;</code> element is one of the ways that XSD language allows you to specify the elements that should be part of an element's content. Even in the case where there is only a single tag it can be defined as a sequence.</p> <p>The most important condition they have is that the elements of the XML document to be validated must appear in the same order in which they are defined in the sequence.</p> <pre><code>&lt;xs:element name=\"person\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;xs:element name=\"type\" type=\"xs:string\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>The example above defines that one or two surnames may appear before the appearance of <code>&lt;type&gt;</code>.</p> <pre><code>&lt;person&gt;\n&lt;name&gt;Marcel&lt;/name&gt;\n&lt;cognom&gt;Puig&lt;/cognom&gt;\n&lt;cognom&gt;Lozano&lt;/cognom&gt;\n&lt;type&gt;Professor&lt;/type&gt;\n&lt;/person&gt;\n</code></pre> <p>It will not validate any content if some item is not in exactly the same order.</p> <pre><code>&lt;person&gt;\n&lt;type&gt;Professor&lt;/type&gt;\n&lt;cognom&gt;Puig&lt;/cognom&gt;\n&lt;name&gt;Marcel&lt;/name&gt;\n&lt;/person&gt;\n</code></pre> <p>Sequences may contain other sequences of elements.</p> <pre><code>&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"&gt;\n&lt;xs:element name=\"person\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"fullname\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;xs:element name=\"profession\" type=\"xs:string\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>"},{"location":"02-xml-scheme/#choice","title":"Choice","text":"<p>The <code>&lt;choice&gt;</code> element is used to choose one of the alternatives presented.</p> <p>In this example, the person element may contain either the  or  tag, but not both. <pre><code>&lt;xs:complexType name=\"person\"&gt;\n&lt;xs:choice&gt;\n&lt;xs:element name=\"nomCognoms\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"dni\" type=\"xs:string\" /&gt;\n&lt;/xs:choice&gt;\n...\n</code></pre> <p>Alternatives may include sequences or other <code>&lt;choice&gt;</code> elements. The following definition is a more elaborate example than the previous one and allows you to choose between the elements <code>&lt;name&gt;</code> and <code>&lt;surname&gt;</code> or <code>&lt;dni&gt;</code>.</p> <pre><code>&lt;xs:choice&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;xs:element name=\"dni\" type=\"xs:string\" /&gt;\n&lt;/xs:choice&gt;\n</code></pre>"},{"location":"02-xml-scheme/#all","title":"All","text":"<p>The most important difference between the <code>&lt;all&gt;</code> and <code>&lt;sequence&gt;</code> element is the order. The <code>&lt;all&gt;</code> element allows you to specify a sequence of elements but allows them to be specified in any order.</p> <p>Therefore, if we define the  element as follows: <pre><code>&lt;xs:element name=\"person\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:all&gt;\n&lt;xs:element name=\"nom\" /&gt;\n&lt;xs:element name=\"surname\" /&gt;\n&lt;/xs:all&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>It will help us to validate both this document:</p> <pre><code>&lt;person&gt;\n&lt;name&gt;Pere&lt;/name&gt;\n&lt;cognom&gt;Garcia&lt;/nom&gt;\n&lt;/person&gt;\n</code></pre> <p>like this:</p> <pre><code>&lt;person&gt;\n&lt;cognom&gt;Garcia&lt;/nom&gt;\n&lt;name&gt;Pere&lt;/name&gt;\n&lt;/person&gt;\n```\n\nBut the limitations of this element that were not present in the ordered sequences must always be taken into account:\n\n* There can only be elements within it. There can be no sequences or alternatives.\n* Cardinality cannot be used in the elements it contains, as it would cause a problem of non-determinism.\n\nTherefore, the following example is incorrect, as it is requested so that `&lt;surname&gt;` is able to appear twice.\n\n```xml\n&lt;xs:all&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" maxOccurs=\"2\" type=\"xs:string\" /&gt;\n&lt;/xs:all&gt;\n</code></pre> <p>One possible way to allow the first and last names to be specified in any order would be to do the following:</p> <pre><code>&lt;xs:complexType&gt;\n&lt;xs:choice&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:choice&gt;\n&lt;/xs:complexType&gt;\n</code></pre>"},{"location":"02-xml-scheme/#complexcontent","title":"<code>complexContent</code>","text":"<p>The <code>complexContent</code> tag allows you to define extensions or restrictions to a complex  type that contains mixed content or just elements.</p> <p>This makes it possible to extend an existing complex content with an extension or to restrict its contents.</p> <p>For example, if you have already defined a full name data type in which the <code>&lt;name&gt;</code> and <code>&lt;surname&gt;</code> elements exist, you can reuse the definition to define a new data type, address book, in which the e-mail.</p> <pre><code>&lt;xs:complexType name=\"fullname\"&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;xs:complexType name=\"agenda\"&gt;\n&lt;xs:complexContent&gt;\n&lt;xs:extension base=\"fullname\"&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"email\" type=\"xs:string\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:extension&gt;\n&lt;/xs:complexContent&gt;\n&lt;/xs:complexType&gt;\n</code></pre> <p>In this way, an agenda element can be defined:</p> <pre><code>&lt;xs:element name=\"persona\" type=\"agenda\" /&gt;\n</code></pre> <p>which must have the three elements <code>&lt;name&gt;</code>, <code>&lt;surname&gt;</code>, and <code>&lt;email&gt;</code>:</p> <pre><code>&lt;person&gt;\n&lt;name&gt;Pere&lt;/name&gt;\n&lt;cognom&gt;Garcia&lt;/cognom&gt;\n&lt;email&gt;pgarcia@ioc.cat&lt;/email&gt;\n&lt;/person&gt;\n</code></pre>"},{"location":"02-xml-scheme/#empty-elements","title":"Empty elements","text":"<p>For XSD elements without content are always of complex type. The definition simply does not specify any content and we will have an empty element.</p> <pre><code>&lt;xs:element name=\"delegate\"&gt;\n&lt;xs:complexType /&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>The definition allows you to define the item as follows:</p> <pre><code>&lt;delegate /&gt;\n</code></pre> <p>If the element needs attributes they are simply specified within the <code>complexType</code>.</p> <pre><code>&lt;xs:element name=\"delegate\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:attribute name=\"year\" use=\"required\" type=\"xs:gYear\" /&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>And you can now define the attribute in the empty element:</p> <pre><code>&lt;delegate year=\"2012\" /&gt;\n</code></pre>"},{"location":"02-xml-scheme/#mixed-content","title":"Mixed content","text":"<p>Mixed content elements are elements that have both elements and text. It was designed to include elements in the middle of a narrative text.</p> <p>In XSD the mixed content is defined by putting the mixed=\"true\" attribute in the definition of the  element. <p><pre><code>&lt;xs:element name=\"letter\"&gt;\n&lt;xs:complexType mixed=\"true\"&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"dia\" type=\"xs:gDay\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n</code></pre> This would allow us to validate content like this:</p> <pre><code>&lt;card&gt;Dear Sir &lt;name&gt;Peter&lt;/name&gt;:\n    I am sending you this letter to remind you that we have stayed for\n    meet us on &lt;day&gt;12&lt;/day&gt;\n&lt;/card&gt;\n</code></pre>"},{"location":"02-xml-scheme/#example-of-creating-an-xsd","title":"Example of creating an XSD","text":"<p>XSD vocabulary definitions can be created from the idea of \u200b\u200bwhat we want the data to contain or from a sample XML file.</p>"},{"location":"02-xml-scheme/#practical-case","title":"Practical case","text":"<p>We want to store in an XML document some website bookmarks:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;bookmarks&gt;\n&lt;website&gt;\n&lt;name&gt;Abrirllave&lt;/name&gt;\n&lt;description&gt;Tutoriales de inform\u00e1tica.&lt;/description&gt;\n&lt;url&gt;http://www.abrirllave.com/&lt;/url&gt;\n&lt;/website&gt;\n&lt;website&gt;\n&lt;name&gt;Wikipedia&lt;/name&gt;\n&lt;description&gt;La enciclopedia libre.&lt;/description&gt;\n&lt;url&gt;http://www.wikipedia.org/&lt;/url&gt;\n&lt;/website&gt;\n&lt;website&gt;\n&lt;name&gt;W3C&lt;/name&gt;\n&lt;description&gt;World Wide Web Consortium.&lt;/description&gt;\n&lt;url&gt;http://www.w3.org/&lt;/url&gt;\n&lt;/website&gt;\n&lt;/bookmarks&gt;\n</code></pre> We need to create an XSD file to validate this XML document. </p> <p>The first step is to decide which kind of elements must be created. As the root element always contains elements we have to define it as a complex type.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n&lt;xs:element name=\"bookmarks\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"website\" minOccurs=\"1\" maxOccurs=\"unbounded\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;            &lt;xs:element name=\"name\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"description\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"url\" type=\"xs:anyURI\"/&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>"},{"location":"02-xml-scheme/#activities","title":"Activities","text":"<ol> <li> <p><code>200SimpleElements</code>: For the following elements write their simple elements definitions.</p> <pre><code>&lt;city&gt;Roma&lt;/city&gt;\n&lt;birthday&gt;1996-12-18&lt;/birthday&gt;\n&lt;time&gt;18:29:45&lt;/time&gt;\n&lt;mark&gt;7.5&lt;/mark&gt;\n&lt;pass&gt;true&lt;/pass&gt;\n</code></pre> </li> <li> <p><code>201Fruits.xsd</code>: Given the following XML document</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;fruits&gt;\n&lt;item&gt;\n&lt;id&gt;1000&lt;/id&gt;\n&lt;name&gt;Apple&lt;/name&gt;\n&lt;price&gt;4&lt;/price&gt;\n&lt;quantity&gt;133&lt;/quantity&gt;\n&lt;/item&gt; &lt;item&gt;\n&lt;id&gt;1001&lt;/id&gt;\n&lt;name&gt;Apricot&lt;/name&gt;\n&lt;price&gt;5&lt;/price&gt;\n&lt;quantity&gt;175&lt;/quantity&gt;\n&lt;/item&gt; &lt;/fruits&gt;\n</code></pre> Create an XSD document to validate it. After that add some fruits and validate again. </p> <p>After that, modify the XSD file taking into account that the price must be greater than 0 and quantity musn't be negative.   </p> </li> <li> <p><code>202Card.xsd</code>: Given the following XML document</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;cards xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:noNamespaceSchemaLocation=\"202Cards.xsd\"&gt;\n&lt;card number=\"1\"&gt;\n&lt;name&gt;Ana Sanz Tin&lt;/name&gt;\n&lt;age&gt;22&lt;/age&gt;\n&lt;/card&gt;\n&lt;card number=\"2\"&gt;\n&lt;name&gt;Iker Rubio Mol&lt;/name&gt;\n&lt;age&gt;23&lt;/age&gt;\n&lt;/card&gt;\n&lt;/cards&gt;\n</code></pre> Create the <code>202Cards.xsd</code> file in order to validate it. </p> </li> <li> <p><code>203Card.xsd</code>: Modify the previous task by adding 3 restrictions:</p> <ol> <li><code>age</code> element must be greather than or equal to 18 amb less than 100.</li> <li><code>name</code> element can only contain alphabetic characters.    </li> <li><code>number</code> attribute must only contain positive integers.</li> </ol> </li> <li> <p><code>204Recipes.xml</code>: Given the following XSD file, create a valid XML document with at least two recipes.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n&lt;xs:element name=\"recipes\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"recipe\" maxOccurs=\"unbounded\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"photo\" type=\"xs:string\" minOccurs=\"0\" /&gt;\n&lt;xs:element name=\"ingredients\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"ingredient\" maxOccurs=\"unbounded\" type=\"xs:string\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;xs:element name=\"method\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"step\" maxOccurs=\"unbounded\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:simpleContent&gt;\n&lt;xs:extension base=\"xs:string\"&gt;\n&lt;xs:attribute name=\"number\" type=\"xs:integer\" use=\"required\" /&gt;\n&lt;/xs:extension&gt;\n&lt;/xs:simpleContent&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre> </li> <li> <p><code>205Prices.xsd</code>: Triple-digit prices</p> <p>Given the following XML document:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;prices xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"prices.xsd\"&gt;\n&lt;price&gt;8&lt;/price&gt;\n&lt;price&gt;2.6&lt;/price&gt;\n&lt;price&gt;4.95&lt;/price&gt;\n&lt;price&gt;187&lt;/price&gt;\n&lt;/prices&gt;\n</code></pre>  Write the content of the \"prices.xsd\" file to validate it, bearing in mind that the \"price\" element can take as a value a number that contains a maximum of three digits and, of these, only two can be decimals. To do this, write a restriction that cannot be used by other elements and, on the other hand, make use of:</p> <ul> <li><code>xs:totalDigits</code> used to specify the maximum number of digits that a number can have, including decimals.</li> <li><code>xs:fractionDigits</code> used to specify the maximum number of decimal places that a number can have.</li> </ul> </li> <li> <p><code>206Players.xsd</code>. Given the following XML document:</p> <pre><code>&lt;?xml version=\"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;players xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"206Players.xsd\"&gt;\n&lt;player preferred_number=\"7\"&gt;\n&lt;name nickname=\"the bug\"&gt;Cristiano Ronaldo&lt;/name&gt;\n&lt;postion&gt;Left wing&lt;/postion&gt;\n&lt;community /&gt;\n&lt;/player&gt;\n&lt;player preferred_number=\"9\"&gt;\n&lt;name nickname=\"the bull\"&gt;Maxi G\u00f3mez&lt;/name&gt;\n&lt;postion&gt;Striker&lt;/postion&gt;  &lt;/player&gt;\n&lt;player preferred_number=\"10\"&gt;\n&lt;name nickname=\"the flea\"&gt;Lionel Messi&lt;/name&gt;\n&lt;postion&gt;Right wing&lt;/postion&gt;\n&lt;community /&gt;\n&lt;/player&gt;\n&lt;player preferred_number=\"8\"&gt;\n&lt;name&gt;Carlos Soler&lt;/name&gt;\n&lt;postion&gt;Right midfielder&lt;/postion&gt;\n&lt;community /&gt;\n&lt;/player&gt;\n&lt;/players&gt;    </code></pre> <p>Write an XSD file to validate it. After that, add 2 new records.</p> <p>In addition, you can define the position element as a <code>choice</code> element   in order to control the correctness of positions. You can find the name of positions in English at Soccer Positions: The Numbers, Player Roles &amp; Basic Formations</p> </li> <li> <p><code>207people.xsd</code>: Given the following XSD file \"people.xsd\":</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n&lt;xs:element name=\"people\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"person\" maxOccurs=\"unbounded\"&gt;\n&lt;xs:complexType mixed=\"true\"&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"city\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"age\" type=\"xs:positiveInteger\"/&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre> Using the elements \"name\", \"city\" and \"age\", write a XML document that can be validate by \"people.xsd\" and that storages the following information:</p> <ul> <li>\"Eva lives in Paris and she is 25 years old.\"</li> <li>\"Giovanni lives in Florence and he is 26 years old.\"</li> </ul> </li> </ol>"},{"location":"02-xml-scheme/#credits-and-bibliography","title":"Credits and bibliography","text":"<ul> <li>Refsnes Data. XML Schema Tutorial available at https://www.w3schools.com/xml/schema_intro.asp</li> <li>Carlos Pes. (Febrer de 2017). Lenguajes de Marcas y Sistemas de Gesti\u00f3n de Informaci\u00f3n (LMSGI)  available at Tutorial de LMSGI .</li> <li>Carlos Pes. Apuntes de XSD (XML Schema) available at https://www.abrirllave.com/xsd/apuntes-de-xsd.php.</li> <li>Xavier Sala. Definici\u00f3 d'esquemes i vocabulari available at https://ioc.xtec.cat/materials/FP/Recursos/fp_asx_m04_/web/fp_asx_m04_htmlindex/WebContent/u2/a2/continguts.html.</li> </ul>"},{"location":"03-content-syndication/","title":"3. Content syndication","text":"Objectives <ul> <li>Analyse a specific example of the use of markup language for the transmission of information.</li> <li>Define an XML document based on its syntax and structure.</li> <li></li> </ul> Assessment criteria <ul> <li>The advantages that content syndication brings to the management and transmission of information have been identified.</li> <li>Its areas of application have been defined.</li> <li>Technologies based on content syndication have been analysed.</li> <li>The structure and syntax of a content channel has been identified.</li> <li>Content channels have been created and validated.</li> <li>Functionality and access to channels are checked.</li> <li>Specific tools are used such as aggregators and channel directories.</li> </ul>"},{"location":"03-content-syndication/#introduction","title":"Introduction","text":"<p>The syndication (or broadcasting) of web content is that a part of the content of a web page is made available to other sites or individual subscribers through a web channel, the most common used format is RSS, followed by the Atom. Computer programs that comply with any of these standards they periodically consult a file with several entries linking to the  full or partial articles on the original website. Unlike other media, web content broadcast rights are usually free, and do not usually intervene a contract between the parties but a licence rules.</p> <p></p>"},{"location":"03-content-syndication/#a-little-history","title":"A little history","text":"<p>As a web user, it is very important to get links from websites that interest you and store them. In such a way that you are able to get back to them quickly. If you wanted to follow the changes on the web pages the only way to do that it was to visit the website to check for news.</p> <p>The advent of what became known as Web 2.0 complicated things. The Web was filled with a large number of blogs and pages that published information, and visiting them all to see if there were any changes took a long time, and, in addition, it is very likely that pages have not changed. </p> <p>The advent of standard syndication systems made possible to obtain information  updates a website in a stable way through an specific address. Content syndication changed   the way the content is retrieved. You no longer had to look for information: it was the information that went to the user.</p> <p>By using syndication, user no longer needs to visit the pages that interest him to see  if there are any changes, because if there are any you will already receive them. This leads to savings of time, as you will not have to visit pages to discover that there are no changes.</p> <p>Another advantage that syndication brings is inherent in XML. Unlike of what happens with HTML, it is easy to interpret the content of the information that is received and therefore it will also be easy to be able to reuse the content to make others tasks.</p> <p>Although syndication is often seen as a system focused on detecting updates on the Web, it is also being used to keep updates in other fields. For example, some computer programs use RSS to find out if there are new versions or updates and thus keep the programs up to date.</p>"},{"location":"03-content-syndication/#content-syndication-today","title":"Content syndication today","text":"<p>At present, with the emergence of social networks and other technologies, the use of content syndication with standard formats has decreased and the content broadcasting has focused on posting on social media and the use of other sharing systems such as APIs.</p> <p>However, in the world of podcast, it continues to be used as an automatic way to share content.</p> <p>podcast</p> <p>A podcast is a radio, audio, or video file intended for podcasting.</p> <p>Podcasting refers to the technique for creating and broadcasting audio and video files over the Internet that allows the user to download them to their computer and listen to them  or see them whenever you want.</p>"},{"location":"03-content-syndication/#example-of-use","title":"Example of use","text":"<p>Using a podcatcher we can download the new podcasts published.</p> <p>Adding the feed (name given to the list of items) shows us what's new that there is.</p> <p></p> <p>Once added, we are subscribed and the podcatcher will notify us of news.</p> <p> </p>"},{"location":"03-content-syndication/#structure-of-content-channels","title":"Structure of content channels","text":"<p>Web feeds allow programs to check if there are updates posted on a website.  To provide a web channel, the site owner may use specialized software (such as a  content management system) that publishes a list (or \"feed\") of articles or  recent content in a standardized automatic reading format.</p> <p>The channel can be downloaded through programs that use it, such as websites that distribute feed content, or through feed readers called aggregators that allow Internet users to subscribe to channels and view their content.</p> <p>A channel (feed) contains entries, which can be headlines, full-text articles, extracts, summaries, or links to content from a website along with various metadata.</p> <p>Next we will analyse the characteristics of the two standards, based on XML,  for creating content channels: RSS 2.0 and Atom 1.0.</p>"},{"location":"03-content-syndication/#rss-20","title":"RSS 2.0","text":"<p>RSS (RDF Site Summary or Really Simple Syndication) is a web feed (or feed) that allows users and applications access website updates in a format standardized and computer readable.</p> <p>It was developed by the RSS Advisory Board and its first version, RSS 0.90, appeared in March 1999. The latest version, 2.0, was released in March 2009.</p> <p>Info</p> <p>A standard XML file format ensures compatibility with many different machines / programs. RSS feeds also benefit users who want to receive timely updates  from favorite websites or add data from many sites.</p> <p>RSS is an XML dialect. The RSS format itself is relatively easy to read for both automated and human processes. An example feed can have content as follows:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;rss version=\"2.0\"&gt;\n&lt;channel&gt;\n&lt;title&gt;RSS Title&lt;/title&gt;\n&lt;description&gt; This is an example of an RSS feed&lt;/description&gt;\n&lt;link&gt;http://www.example.com/main.html&lt;/link&gt;\n&lt;copyright&gt;2020 Example.com All rights reserved&lt;/copyright&gt;\n&lt;lastBuildDate&gt;Mon, 06 Sep 2010 00:01:00 +0000&lt;/lastBuildDate&gt;\n&lt;pubDate&gt;Sun, 06 Sep 2009 16:20:00 +0000&lt;/pubDate&gt;\n&lt;ttl&gt;1800&lt;/ttl&gt;\n&lt;item&gt;\n&lt;title&gt;Example entry&lt;/title&gt;\n&lt;description&gt;Here is some text containing an interesting description.&lt;/description&gt;\n&lt;link&gt; http://www.example.com/blog/post/1&lt;/link&gt;\n&lt;guid isPermaLink = \"false\"&gt;7bd204c6-1655-4c27-aeee-53f933c5395f&lt;/guid&gt;\n&lt;pubDate&gt;Sun, 06 Sep 2009 16:20:00 +0000&lt;/pubDate&gt;\n&lt;/item&gt;\n&lt;/channel&gt;\n&lt;/rss&gt;\n</code></pre> <p>RSS feed tree diagram </p> <p>At the top level, an RSS document is a <code>&lt;rss&gt;</code> element, with an attribute  required called <code>version</code>, which specifies the RSS version it meets  the document.</p> <p>Subordinate to the <code>&lt;rss&gt;</code> element is a <code>&lt;channel&gt;</code> element that contains information about the channel (metadata) and its content in <code>&lt;item&gt;</code> elements.</p> <p>RSS 2.0 Specification</p> <p>For more details you can access the specification: RSS 2.0 Specification</p> <p>Info</p> <p>You can analise the RSS schema in this website: https://schemas.liquid-technologies.com/w3c/rss/2.0.1.9/?page=rss-2_0_1-rev9_xsd.html</p> <p>Despite the fact that there is not an official RSS schema, we can find some implementations like this: RSS 2.0.</p>"},{"location":"03-content-syndication/#atom","title":"Atom","text":"<p>The atom syndication format is an XML dialect used for web feeds.</p> <p>The Atom format was developed as an alternative to RSS. Ben Trott, defender of the new format that became Atom, believed that RSS had limitations and flaws, such as the lack of continuous innovation and its need to remain compatible, and that there were advantages in a new design.</p> <p>A document based on the Atom format has the following structure:</p> <pre><code>&lt;?xml version=\"1.0\" encoding = \"utf-8\"?&gt;\n&lt;feed xmlns = \"http://www.w3.org/2005/Atom\"&gt;\n&lt;title&gt; Example Feed &lt;/title&gt;\n&lt;subtitle&gt; A subtitle. &lt;/subtitle&gt;\n&lt;link href = \"http://example.org/feed/\" rel = \"self\" /&gt;\n&lt;link href = \"http://example.org/\" /&gt;\n&lt;id&gt; urn: uuid: 60a76c80-d399-11d9-b91C-0003939e0af6 &lt;/id&gt;\n&lt;updated&gt; 2003-12-13T18: 30: 02Z &lt;/updated&gt;\n&lt;entry&gt;\n&lt;title&gt; Atom-Powered Robots Run Amok &lt;/title&gt;\n&lt;link href = \"http://example.org/2003/12/13/atom03\" /&gt;\n&lt;link rel = \"alternate\" type = \"text / html\"\nhref = \"http://example.org/2003/12/13/atom03.html\" /&gt;\n&lt;link rel = \"edit\" href = \"http://example.org/2003/12/13/atom03/edit\" /&gt;\n&lt;id&gt; urn: uuid: 1225c695-cfb8-4ebb-aaaa-80da344efa6a &lt;/id&gt;\n&lt;updated&gt; 2003-12-13T18: 30: 02Z &lt;/updated&gt;\n&lt;summary&gt; Some text. &lt;/summary&gt;\n&lt;content type = \"xhtml\"&gt;\n&lt;div xmlns = \"http://www.w3.org/1999/xhtml\"&gt;\n&lt;p&gt; This is the entry content. &lt;/p&gt;\n&lt;/div&gt;\n&lt;/content&gt;\n&lt;author&gt;\n&lt;name&gt; John Doe &lt;/name&gt;\n&lt;email&gt; johndoe@example.com &lt;/email&gt;\n&lt;/author&gt;\n&lt;/entry&gt;\n&lt;/feed&gt;\n</code></pre> <p>For more details: RFC 4287 - The Atom Syndication Format</p> <p>Validation</p> <p>Since both RSS and Atom are XML documents, you will be able to check that they are correct using the same verification tools that are used in XML.</p> <p>Although it is possible to use XML validators, the most common is to do so serve specific programs to validate RSS and Atom such as the W3C Feed Validation Service  (validator.w3.org/feed)</p>"},{"location":"03-content-syndication/#tasks","title":"Tasks","text":"<ol> <li> <p>Using a RSS aggregator</p> <p>In the next task we will install an RSS aggregator and subscribe to some channels.</p> <ol> <li>Install the Firefox add-on: Feedbro.</li> <li>Access the add-on.</li> <li>Subscribe to the following channels:<ol> <li>The podcasts of the 24h24l.org event.</li> <li>The latest news from El Pa\u00eds</li> <li>The front page news of El Mundo.</li> <li>Check if any of the pages you consult regularly redistribute their contents. If so, subscribe to their channel.</li> </ol> </li> </ol> </li> <li> <p><code>302rssfeed.xml</code>. Creating an RSS feed </p> <p>You were the creator of the web <code>recipe-example.org</code> and you currently have in the main page the following content.</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang = \"ca\"&gt;\n&lt;head&gt;\n&lt;meta charset = \"UTF-8\"&gt;\n&lt;meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\"&gt;\n&lt;title&gt;Recipes&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;header&gt;\n&lt;h1&gt;Sample recipes &lt;/h1&gt;\n&lt;/header&gt;\n&lt;main&gt;\n&lt;article&gt;\n&lt;h2&gt;Baked rice&lt;/h2&gt;\n&lt;time datetime = \"2020-12-13 08:00:00\"&gt; Sunday, December 13\n    2020 &lt;/time&gt;\n&lt;p&gt; The peculiarity of this rice, as the name suggests, is\n    which is baked. I,\n    like paella and other Valencian rice dishes, it is also a\n    dish of popular origin, which in this case was made from\n    of the remains of the putxero. That's why among his\n    Ingredients are not missing chickpeas, pork chops and\n    sausage. This dish is especially typical in counties such as\n    la Costera, where it has been celebrated in X\u00e0tiva for a long time\n    a few years the National Baked Rice Contest. &lt;/p&gt;\n&lt;p&gt; &lt;a href=\"/2020/12/arros-al-forn.html\"&gt; Continue reading &lt;/a&gt; &lt;/p&gt;\n&lt;/article&gt;\n&lt;article&gt;\n&lt;h2&gt;Paella valenciana&lt;/h2&gt;\n&lt;time datetime=\"2020-04-06 13:20:00\"&gt; Monday, April 6,\n   2020 &lt;/time&gt;\n&lt;p&gt; The paella is the highest standard of Valencian cuisine and\n  probably also of the Spanish, due to its recognition\n  gastronomy worldwide. Its origin, like that of all\n  dishes of popular cuisine, derived from the conjunction of foods that\n  each family had at their disposal, especially in the area of\n  the orchard of Valencia, which was supplied with fresh vegetables.\n  In addition, it was formerly customary to raise chickens and rabbits for\n  to family use, therefore, if we add abundance to all this\n  of the rice cultivated in the Albufera, the result is this\n  genuinely Valencian dish that receives the name of the container in the\n  which is cooked. &lt;/p&gt;\n&lt;p&gt;&lt;a href=\"/2020/04/paella-valenciana.html\"&gt; Continue reading &lt;/a&gt; &lt;/p&gt;\n&lt;/article&gt;\n&lt;article&gt;\n&lt;h2&gt;Olleta&lt;/h2&gt;\n&lt;time datetime = \"2019-12-28 18:20:00\"&gt; Friday, December 28\n  2019 &lt;/time&gt;\n&lt;p&gt; L'olleta is the most representative dish in the mountain area\n  of Alicante and in the interior of Valencia. This is a succulent putxero,\n  similar to a broth stew but one of the most refined in all of Spain,\n  and for this reason it is recognized nationally. Its intense flavor\n  and fragrant derives from the aromatic fragrance of the sausages and,\n  once degreased, it reaches a sublime point. &lt;/p&gt;\n&lt;p&gt; &lt;a href=\"/2019/12/olleta.html\"&gt; Continue reading &lt;/a&gt; &lt;/p&gt;\n&lt;/article&gt;\n&lt;/main&gt;\n&lt;footer&gt;\n&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Create the RSS feed in version 2.0 so that users know when you post new recipes.</p> <p>Validate the file.</p> </li> <li> <p><code>303Ivoox</code>. Given the following IVOOX screenshot create by hand in a sheet an RSS feed that announces the three      podcast episodes.</p> <p></p> </li> </ol>"},{"location":"03-content-syndication/#credits-bibliography-and-webography","title":"Credits, bibliography and webography","text":"<ul> <li> <p>Col\u00b7laboradors de la Viquip\u00e8dia. Redifusi\u00f3 de continguts web [en l\u00ednia]. Viquip\u00e8dia, l'Enciclop\u00e8dia Lliure, 2019 [data de consulta: 15 de novembre del 2019]. Disponible en . </p> </li> <li> <p>Xavier Sala. Sindicaci\u00f3 de continguts available at https://ioc.xtec.cat/materials/FP/Recursos/fp_asx_m04_/web/fp_asx_m04_htmlindex/WebContent/u3/a1/continguts.html.</p> </li> </ul>"},{"location":"01-mlxml/00_index/","title":"Introduction","text":"<p>Learning outcomes</p> <p>By the end of the unit, students will be able to:</p> <ul> <li>Know the markup languages.</li> <li>Identify their advantages and main uses.</li> <li>Recognise their common characteristics.</li> <li>Know how markup languages are classified.</li> <li>Create well formatted XML documents.</li> <li>Recognise the need to use namespaces.</li> </ul> <p>Contents</p> <ol> <li>Concept of markup language.</li> <li>Advantatges. </li> <li>Common characteristics.</li> <li>Identification of areas of application.</li> <li>Classification.</li> <li>XML: structure and syntax.</li> <li>Tags.</li> <li>Editing tools.</li> <li>Creation of well-formed documents.</li> <li>Use of XML namespaces.</li> </ol> <p>Assessment criteria</p> <ul> <li>The general characteristics of markup languages have been identified.</li> <li>The advantages provided for processing information have been recognised.</li> <li>Markup languages have been classified and the most relevant have been identified.</li> <li>Their areas of application have been differentiated.</li> <li>The need and specific areas of application have been recognized.</li> <li>The specific characteristics of the XML language have been analyzed.</li> <li>The structure of an XML document and its syntactic rules have been identified.</li> <li>The need to create well-formed XML documents and the influence on their processing has been contrasted.</li> <li>The advantages provided by namespaces have been identified.</li> </ul>"},{"location":"01-mlxml/01_llenguatges/","title":"Markup languages","text":""},{"location":"01-mlxml/01_llenguatges/#concept-of-markup-language","title":"Concept of markup language","text":"<p>Markup languages are ways of annotating an electronic document. Usually markup will either specify how something should be displayed or what something means. The origin of the term is in typesetting, where proofs were marked up with instructions about their visual appearance, but the term then broadened to include the semantic perspective that we\u2019re interested in here.</p> <p>The names of the most popular languages usually end with Markup Language and so are abbreviated as something-ML: for example,</p> <ul> <li>HTML \u2013 Hypertext Markup Language</li> <li>KML \u2013 Keyhole Markup Language</li> <li>MathML \u2013 Mathematical Markup Language</li> <li>SGML \u2013 Standard Generalized Markup Language</li> <li>XHTML \u2013 eXtensible Hypertext Markup Language</li> <li>XML \u2013 eXtensible Markup Language</li> </ul> <p>The most widely used markup language is HTML (HyperText Markup Language), the foundation of the World Wide Web.</p> <p>Some examples are: </p> <p>HTML 4.0</p> <pre><code> &lt;h1&gt;Anatidae&lt;/h1&gt;\n&lt;p&gt;\n   The family &lt;i&gt;Anatidae&lt;/i&gt; includes ducks, geese, and swans,\n   but &lt;em&gt;not&lt;/em&gt; the closely related screamers.\n &lt;/p&gt;\n</code></pre> <p>XML</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;note&gt;\n&lt;to&gt;Tove&lt;/to&gt;\n&lt;from&gt;Jani&lt;/from&gt;\n&lt;heading&gt;Reminder&lt;/heading&gt;\n&lt;body&gt;Don't forget me this weekend!&lt;/body&gt;\n&lt;/note&gt; </code></pre>"},{"location":"01-mlxml/01_llenguatges/#advantages","title":"Advantages","text":"<p>Initially, markup languages \u200b\u200bfocused on document generation but thanks to its advantages its use has been extended to definition of data structures and sharing of information.</p> <p>The main advantages are:</p> <ul> <li>Ease of creation and reading.</li> <li>Compliance with defined and public storage standards.</li> <li>Incorporation of metadata.</li> <li>Definition of the structure of the data.</li> </ul>"},{"location":"01-mlxml/01_llenguatges/#common-features","title":"Common features","text":"<p>Markup languages \u200b\u200bhave stood out for a number of features which lead them to become  the most widely used types of languages \u200b\u200bin modern computing for storing and representing data. Among the most interesting features that markup languages \u200b\u200boffer are:</p> <ul> <li>They intermix the text of a document with markup instructions in the same data stream or file. </li> <li>They are based on plain text.</li> <li>They allow the use of metadata.</li> <li>They are easy to interpret and process.</li> <li>They are easy to create and flexible enough to represent very diverse data.</li> </ul> <p>Internet applications and many of the computer programs use them in one way or another.</p>"},{"location":"01-mlxml/01_llenguatges/#fields-of-applicacion","title":"Fields of applicacion","text":"<p>While the idea of markup language originated with text documents, there is an increasing use of markup languages in the presentation of other types of information, including playlists, vector graphics, web services, content syndication, and user interfaces. Most of these are XML applications, because XML is a well-defined and extensible language. </p> <p>Regarding the fields of application we can define the following classification:</p> <ul> <li>Documents in general:<ul> <li>Descriptive languages \u200b\u200bsuch as XML, HTML 5, YAML.</li> <li>Presentation languages \u200b\u200bsuch as RTF, Tex, HTML 4.</li> <li>Lightweight languages \u200b\u200blike Markdown</li> </ul> </li> <li>Internet technologies:<ul> <li>HTML, XHTML, GladeXML, Atom, RSS, WSDL</li> </ul> </li> <li>Specialized languages:<ul> <li>SVG, XMPP, COLLADA</li> </ul> </li> </ul> <p>In Markup language you will find more information.</p>"},{"location":"01-mlxml/01_llenguatges/#types-of-markup-language","title":"Types of markup language","text":"<p>There are three main general categoris of electronic markup:</p> <ul> <li>Presentation languages\u200b\u200b, aimed at specifying how the information must be represented. This kind of markup is used by traditional word-processing systems.</li> <li>Procedural markup. Markup is embedded in text which provides instructions for programs to process the text. Well-known examples include troff, TeX, and PostScript.  </li> <li>Descriptive or semantic languages\u200b\u200b: aimed at describing the structure of the data it contains.</li> </ul> <p>This is the most accepted classification, but as is often the case in the field of Computer Science, we can find languages \u200b\u200bthat have aspects of these categories and allow them to define the way the information is presented and to define it the structure.</p> <p>In the recent years, a number of small and largely unstandardized markup languages have been developed to allow authors to create formatted text via web browsers, such as the ones used in wikis and in web forums. These are sometimes called lightweight markup languages. Markdown, BBCode, and the markup language used by Wikipedia are examples of such languages. </p>"},{"location":"01-mlxml/01_llenguatges/#procedural-and-presentation","title":"Procedural and presentation","text":"<p>In these languages, what is done is to indicate how to do it the presentation of the data. Either through design information (mark bold, titles, etc.) or procedures to be performed by the software representation. The most popular example of these languages \u200b\u200bis HTML, but there are some there are many more: TeX, Wikitext ...</p> <p>In these cases the documents can help us to determine in what way the document will be shown to whoever reads it.</p>"},{"location":"01-mlxml/01_llenguatges/#latex-a-procedural-markup-language","title":"Latex: a procedural markup language","text":"<p>For example:</p> <pre><code>\\documentclass{article}\n\\usepackage{graphicx}\n\\begin{document}\n\\title{Introduction to LaTeX {}}\n\\author{Author's Name}\n\\maketitle\n\\begin{abstract}\nThe abstract text goes here.\n\\end{abstract}\n\\section{Introduction}\nHere is the text of your introduction.\n\n\\begin{equation}\n\\label{simple_equation}\n\\alpha=\\sqrt{\\beta}\n\\end{equation}\n\\subsection{Subsection Heading Here}\nWrite your subsection text here.\n\n\\begin{figure}\n\\centering\n\\includegraphics[width = 3.0in]{myfigure}\n\\caption{Simulation Results}\n\\label{simulationfigure}\n\\end{figure}\n\\section{Conclusion}\nWrite your conclusion here.\n\n\\end{document}\n</code></pre>"},{"location":"01-mlxml/01_llenguatges/#descriptive-or-semantic","title":"Descriptive or semantic","text":"<p>These languages \u200b\u200bdescribe the logical structure of the document ignoring how it will be represented in the programs. Only the marks are put with the aim of defining the parts that give structure to the document. The example more important is XML but there are others that are having a lot of support, such as for example JSON.</p> <p>In the following document we have an example of a file of marks that represents information about people:</p> <p><pre><code>&lt;students&gt;\n&lt;person&gt;\n&lt;name&gt;Pere&lt;/name&gt;\n&lt;lastname&gt;Puig&lt;/lastname&gt;\n&lt;/person&gt;\n&lt;person&gt;\n&lt;name&gt;Manel&lt;/name&gt;\n&lt;lastname&gt;Garcia&lt;/lastname&gt;\n&lt;/person&gt;\n&lt;/students&gt;\n</code></pre> We can clearly notice what this data is about: a list of students. At a glance, it is easy to determine that Pere and Manel are names and that Puig and Garcia are surnames. But through the hierarchy of data it can be inferred that Pere Puig and Manel Garcia are students as both first and last name are included inside of the <code>students</code> tag.</p> <p>This document shows the structure of the data it contains and also this can also be discovered by interpreting the labels their content semantic. From the knowledge we have it follows that Peter is the name of a person who is a student.</p>"},{"location":"01-mlxml/01_llenguatges/#bibliography-webgraphy-and-credits","title":"Bibliography, webgraphy and credits","text":"<ul> <li>Blaney, J., n.d. An introduction to markup: 1. Why mark up text?. [online] Port.sas.ac.uk. Available at: https://port.sas.ac.uk/mod/book/view.php?id=568 [Accessed 5 September 2022].</li> <li>En.wikipedia.org. 2022. Markup language - Wikipedia. [online] Available at: https://en.wikipedia.org/wiki/Markup_language [Accessed 5 September 2022].</li> <li>Nexa Domain, 2020. Markup Language | What is Markup Language | Detailed Explanation - English Audio. [video] Available at: https://www.youtube.com/watch?v=nQZEP8hENMs [Accessed 5 September 2022].</li> </ul>"},{"location":"01-mlxml/02_xml/","title":"2. XML","text":""},{"location":"01-mlxml/02_xml/#introduction","title":"Introduction","text":"<p>Extensible Markup Language (XML) is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. The World Wide Web Consortium's XML 1.0 Specification of 1998 and several other related specifications\u2014all of them free open standards\u2014define XML.</p> <p>The design goals of XML emphasize simplicity, generality, and usability across the Internet.It is a textual data format with strong support via Unicode for different human languages. Although the design of XML focuses on documents, the language is widely used for the representation of arbitrary data structures such as those used in web services. </p> <p>World Web Consortium</p> <p>The World Wide Web Consortium (W3C) is the main international standards organization for the World Wide Web. Founded in 1994 and currently led by Tim Berners-Lee, the consortium is made up of member organizations that maintain full-time staff working together in the development of standards for the World Wide Web. As of 21 October 2019, W3C had 443 members. W3C also engages in education and outreach, develops software and serves as an open forum for discussion about the Web.            </p> <p>XML is a markup language similar to HTML, but without predefined tags to use. Instead, you define your own tags (extensible) designed specifically for your needs. This is a powerful way to store data in a format that can be stored, searched, and shared. Most importantly, since the fundamental format of XML is standardized, if you share or transmit XML across systems or platforms, either locally or over the internet, the recipient can still parse the data due to the standardized XML syntax.</p> <p>These are some languages based on XML:</p> <ul> <li>GML (Geography Markup Language).</li> <li>MathML (Mathematical Markup Language).</li> <li>RSS (Really Simple Syndication).</li> <li>SVG (Scalable Vector Graphics).</li> <li>XHTML (eXtensible HyperText Markup Language).</li> </ul>"},{"location":"01-mlxml/02_xml/#key-terminology","title":"Key terminology","text":"<p>The material in this section is based on the XML Specification. This is not an exhaustive list of all the constructs that appear in XML; it provides an introduction to the key constructs most often encountered in day-to-day use.</p>"},{"location":"01-mlxml/02_xml/#character","title":"Character","text":"<p>An XML document is a string of characters. Almost every legal Unicode character may appear in an XML document.</p>"},{"location":"01-mlxml/02_xml/#processor-and-application","title":"Processor and application","text":"<p>The processor analyzes the markup and passes structured information to an application. The specification places requirements on what an XML processor must do and not do, but the application is outside its scope. The processor (as the specification calls it) is often referred to colloquially as an XML parser.</p>"},{"location":"01-mlxml/02_xml/#markup-and-content","title":"Markup and content","text":"<p>The characters making up an XML document are divided into markup and content, which may be distinguished by the application of simple syntactic rules. Generally, strings that constitute markup either begin with the character <code>&lt;</code> and end with a <code>&gt;</code>, or they begin with the character <code>&amp;</code> and end with a <code>;</code>. Strings of characters that are not markup are content. However, in a CDATA section, the delimiters <code>&lt;![CDATA[ and ]]&gt;</code> are classified as markup, while the text between them is classified as content. In addition, whitespace before and after the outermost element is classified as markup.</p>"},{"location":"01-mlxml/02_xml/#tag","title":"Tag","text":"<p>A tag is a markup construct that begins with <code>&lt;</code> and ends with <code>&gt;</code>. Tags come in three flavors:</p> <ul> <li>start-tag, such as <code>&lt;section&gt;</code>;</li> <li>end-tag, such as <code>&lt;/section&gt;</code>;</li> <li>empty-element tag, such as <code>&lt;line-break /&gt;</code>.</li> </ul>"},{"location":"01-mlxml/02_xml/#element","title":"Element","text":"<p>An element is a logical document component that either begins with a start-tag and ends with a matching end-tag or consists only of an empty-element tag. The characters between the start-tag and end-tag, if any, are the element's content, and may contain markup, including other elements, which are called child elements. An example is <code>&lt;greeting&gt;Hello, world!&lt;/greeting&gt;</code>. Another is <code>&lt;line-break /&gt;</code>.</p>"},{"location":"01-mlxml/02_xml/#attribute","title":"Attribute","text":"<p>An attribute is a markup construct consisting of a name\u2013value pair that exists within a start-tag or empty-element tag. An example is <code>&lt;img src=\"madonna.jpg\" alt=\"Madonna\" /&gt;</code>, where the names of the attributes are <code>\"src\"</code> and <code>\"alt\"</code>, and their values are <code>\"madonna.jpg\"</code> and <code>\"Madonna\"</code> respectively. Another example is <code>&lt;step number=\"3\"&gt;Connect A to B.&lt;/step&gt;</code>, where the name of the attribute is <code>\"number\"</code> and its value is <code>\"3\"</code>. An XML attribute can only have a single value and each attribute can appear at most once on each element. In the common situation where a list of multiple values is desired, this must be done by encoding the list into a well-formed XML attribute with some format beyond what XML defines itself. Usually this is either a comma or semi-colon delimited list or, if the individual values are known not to contain spaces, a space-delimited list can be used. <code>&lt;div class=\"inner greeting-box\"&gt;Welcome!&lt;/div&gt;</code>, where the attribute <code>\"class\"</code> has both the value <code>\"inner greeting-box\"</code> and also indicates the two CSS class names <code>\"inner\"</code> and <code>\"greeting-box\"</code>.</p>"},{"location":"01-mlxml/02_xml/#xml-declaration","title":"XML declaration","text":"<p>XML documents may begin with an XML declaration that describes some information about themselves. An example is <code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</code>.</p>"},{"location":"01-mlxml/02_xml/#entities","title":"Entities","text":"<p>Like HTML, XML offers methods (called entities) for referring to some special reserved characters (such as a greater than sign which is used for tags). There are five of these characters that you should know:</p> Character Description Entity &lt; lt (less than) <code>&amp;lt;</code> &gt; gt (greater than) <code>&amp;gt;</code> \" quot (quotation mark) <code>&amp;quot;</code> ' apos (apostrophe) <code>&amp;apos;</code> &amp; (ampersand) amp (ampersand) <code>&amp;amp;</code> <p>Given the \"entities.xml\" file:</p> <pre><code>&lt;? xml version = \"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;entities&gt;\n&lt;less_than&gt; &amp;lt; &lt;/less_than&gt;\n&lt;greater_than&gt; &amp;gt; &lt;/greater_than&gt;\n&lt;double_quote&gt; &amp;quot; &lt;/double_quote&gt;\n&lt;simple_quote&gt; &amp;apos; &lt;/simple_quote&gt;\n&lt;ampersand&gt; &amp;amp; &lt;/ampersand&gt;\n&lt;/entities&gt;\n</code></pre> <p>When you open it in Google Chrome you can see:</p> <p></p> <p>In the web browser, you can see where the references to entities have been written in the XML document (for example), the corresponding characters are displayed (for example &lt;).</p>"},{"location":"01-mlxml/02_xml/#structure-and-syntax","title":"Structure and syntax","text":"<p>XML documents are composed by plain text and tags defined by developers.</p> <p>Elements are represented by tags. If we want to save people's name we should write:</p> <p><pre><code>&lt;name&gt;Elsa&lt;/name&gt;\n</code></pre> This is the basic syntax in order to write an XML elemente:</p> <p><pre><code>&lt;tag&gt;text&lt;/tag&gt;\n</code></pre> It is important to remark that between the start tag (<code>&lt;stag&gt;</code>) and the end tag (<code>&lt;/tag&gt;</code>) we have written the data (<code>text</code>) we would storage. <code>Elsa</code> in the example. </p>"},{"location":"01-mlxml/02_xml/#empty-tags","title":"Empty tags","text":"<p>In a XML document an element could not contain any value. If so, we should write:</p> <p><pre><code>&lt;tag&gt;&lt;/tag&gt;\n</code></pre> A simpler alternative way of writing this is kind of elements is: </p> <pre><code>&lt;tag /&gt;\n</code></pre> <p>To write an empty element <code>name</code>, we should write: <pre><code>&lt;name&gt;&lt;/name&gt;\n</code></pre> Or:</p> <pre><code>&lt;name /&gt;\n</code></pre>"},{"location":"01-mlxml/02_xml/#relation-between-parent-and-childs","title":"Relation between parent and childs","text":"<p>An parent element could contain one or many elements:</p> <pre><code>&lt;people&gt;\n&lt;name&gt;Elsa&lt;/name&gt;\n&lt;woman /&gt;\n&lt;birthday&gt;\n&lt;day&gt;18&lt;/day&gt;\n&lt;month&gt;6&lt;/month&gt;\n&lt;year&gt;1996&lt;/year&gt;\n&lt;/birthday&gt;\n&lt;city&gt;Pamplona&lt;/city&gt;\n&lt;/people&gt;\n</code></pre> <p>In this example, the <code>people</code> element contains four elements (children): \"name\", \"woman\", \"birthday\" and \"city\". In addition, the \"birthday\" element contains three  elements (children): \"day\", \"month\" and \"year\".</p> <p>Notice that of all the elements in this example, only the \"woman\" element is empty.</p>"},{"location":"01-mlxml/02_xml/#root-element","title":"Root element","text":"<p>Each XML document has exactly one single root element. It encloses all the other elements and is therefore the sole parent element to all the other elements. ROOT elements are also called document elements. In HTML, the root element is the <code>&lt;html&gt;</code> element. In our example, the <code>people</code> element is the document root.</p> <p>Graphically, we could represent it:</p> graph TD A[people] --&gt; B[name] A[people] --&gt; C[woman] A[people] --&gt; D[birthday] A[people] --&gt; E[city] D --&gt; F[day] D --&gt; G[month] D --&gt; H[year]  <p>In this way, the structure of any XML document can be represented as an inverted tree of elements. It is said that the elements are the ones that give semantic structure to the document.</p>"},{"location":"01-mlxml/02_xml/#elements-with-mixed-content","title":"Elements with mixed content","text":"<p>An element type has mixed content when elements of that type may contain character data, optionally interspersed with child elements. In this case, the types of the child elements may be constrained, but not their order or their number of occurrences:</p> <p><pre><code>&lt;description&gt;\ncharacter data &lt;br/&gt; more text &lt;br/&gt; and &lt;strong&gt;more data&lt;/strong&gt;\n&lt;/description&gt;\n</code></pre> Mixed content is a very effective way of marking up textual data, the most obvious example being HTML.</p>"},{"location":"01-mlxml/02_xml/#xml-syntax-rules","title":"XML Syntax Rules","text":"<p>You must follow these rules when you create XML syntax:</p> <ul> <li>All XML elements must have a closing tag.</li> <li>XML tags are case sensitive.</li> <li>All XML elements must be properly nested.</li> <li>All XML documents must have a root element.</li> <li>Attribute values must always be quoted.</li> </ul>"},{"location":"01-mlxml/02_xml/#all-xml-elements-must-have-a-closing-tag","title":"All XML elements must have a closing tag","text":"<p>It is illegal to omit the closing tag when you are creating XML syntax. XML elements must have a closing tag.</p> <p>Incorrect:</p> <pre><code>&lt;body&gt;See Spot run.\n&lt;body&gt;See Spot catch the ball.\n</code></pre> <p>Correct:</p> <pre><code>&lt;body&gt;See Spot run.&lt;/body&gt;\n&lt;body&gt;See Spot catch the ball.&lt;/body&gt;\n</code></pre>"},{"location":"01-mlxml/02_xml/#all-xml-elements-must-be-properly-nested","title":"All XML elements must be properly nested","text":"<p>Improper nesting of tags makes no sense to XML.</p> <p>Incorrect:</p> <pre><code>&lt;b&gt;&lt;i&gt;This text is bold and italic.&lt;/b&gt;&lt;/i&gt;\n</code></pre> <p>Correct:</p> <pre><code>&lt;b&gt;&lt;i&gt;This text is bold and italic.&lt;/i&gt;&lt;/b&gt;\n</code></pre>"},{"location":"01-mlxml/02_xml/#all-xml-documents-must-have-a-root-element","title":"All XML documents must have a root element","text":"<p>All XML documents must contain a single tag pair to define a root element. All other elements must be within this root element. All elements can have sub elements (child elements). Sub elements must be correctly nested within their parent element.</p> <p>Example:</p> <pre><code>&lt;root&gt;\n&lt;child&gt;\n&lt;subchild&gt;.....&lt;/subchild&gt;\n&lt;/child&gt;\n&lt;/root&gt;\n</code></pre>"},{"location":"01-mlxml/02_xml/#attribute-values-must-always-be-quoted","title":"Attribute values must always be quoted","text":"<p>It is illegal to omit quotation marks around attribute values. XML elements can have attributes in name/value pairs; however, the attribute value must always be quoted.</p> <p>Incorrect:</p> <p><pre><code>&lt;?xml version= \u201c1.0\u201d encoding=\u201cISO-8859-1\u201d?&gt;\n&lt;note date=05/05/05&gt;\n&lt;to&gt;Dick&lt;/to&gt;\n&lt;from&gt;Jane&lt;/from&gt;\n&lt;/note&gt;\n</code></pre> Correct:</p> <pre><code>&lt;?xml version= \u201c1.0\u201d encoding=\u201cISO-8859-1\u201d?&gt;\n&lt;note date=\u201d05/05/05\u201d&gt;\n&lt;to&gt;Dick&lt;/to&gt;\n&lt;from&gt;Jane&lt;/from&gt;\n&lt;/note&gt;\n</code></pre> <p>In the incorrect document, the <code>date</code> attribute in the <code>note</code> element is not quoted.</p>"},{"location":"01-mlxml/02_xml/#xml-tags-are-case-sensitive","title":"XML tags are case sensitive","text":"<p>When you create XML documents, the tag  is different from the tag . <p>Incorrect:</p> <pre><code>&lt;Body&gt;See Spot run.&lt;/body&gt;\n</code></pre> <p>Correct:</p> <pre><code>&lt;body&gt;See Spot run.&lt;/body&gt;\n</code></pre> <p>In addition, they have to fullfil the follow rules:</p> <ul> <li>They can contain lowercase letters, uppercase letters, numbers, periods \".\", hyphens \"-\" and underscores \"_\".</li> <li>They can also contain the colon \":\". However, its use is reserved for when   define namespaces.</li> <li>The first character must be a letter or a hyphen under \"_\".</li> </ul> <p>The following elements are breaking some rules:</p> <pre><code>&lt;ciudad&gt;Pamplona&lt;/ciudad&gt;\n&lt;d\u00eda&gt;18&lt;/dia&gt;\n&lt;mes&gt;6&lt;mes/&gt;\n&lt;ciudad&gt;Pamplona&lt;/finciudad&gt;\n&lt;_rojo&gt;\n&lt;2colores&gt;Rojo y Naranja&lt;/2colores&gt;\n&lt;persona&gt;&lt;nombre&gt;Elsa&lt;/persona&gt;&lt;/nombre&gt;\n&lt;color favorito&gt;azul&lt;/color favorito&gt;\n</code></pre> <p>We must write them:</p> <p><pre><code>&lt;ciudad&gt;Pamplona&lt;/ciudad&gt;\n&lt;d\u00eda&gt;18&lt;/d\u00eda&gt;\n&lt;mes&gt;6&lt;/mes&gt;\n&lt;ciudad&gt;Pamplona&lt;/ciudad&gt;\n&lt;_rojo/&gt;\n&lt;colores2&gt;Rojo y Naranja&lt;/colores2&gt;\n&lt;Aficiones &gt;Cine, Bailar, Nadar&lt;/Aficiones &gt;\n&lt;persona&gt;&lt;nombre&gt;Elsa&lt;/nombre&gt;&lt;/persona&gt;\n&lt;color.favorito&gt;azul&lt;/color.favorito&gt;\n&lt;color-favorito&gt;azul&lt;/color-favorito&gt;\n&lt;color_favorito&gt;azul&lt;/color_favorito&gt;\n</code></pre> Non-English letters (\u00e1, \u00c1, \u00f1, \u00d1 ...) are allowed. However, it is advisable not to use them in order to reduce possible incompatibilities with programs that may not recognize them.</p> <p>As for the hyphen <code>-</code> and period <code>.</code>characters, although they are also allowed to name tags, it is also advisable to avoid its use.</p>"},{"location":"01-mlxml/02_xml/#attributes-in-xml","title":"Attributes in XML","text":"<p>Elements of an XML document can have attributes defined in the start tag. An attribute serves to provide  extra information about the item that contains it.</p> <p>Given the following data for a product:</p> <ul> <li>Code: G45</li> <li>Name: Wool hat</li> <li>Color: black</li> <li>Price: 12.56</li> </ul> <p>Its representation in an XML document could be, for example: <pre><code>&lt;product code = \"G45\"&gt;\n&lt;name color = \"black\" price = \"12.56\"&gt; Wool hat &lt;/ name&gt;\n&lt;/ product&gt;\n</code></pre> In this example three attributes have been written: code, color and price. It should be noted that, its values \u200b\u200b(\"G45\", \"black\" and \"12.56\") have been enclosed in double quotes (\"). However, they can also be enclosed in single quotes (').</p> <p>If, for example, the <code>code</code> attribute were to be represented as an element, it could be written:</p> <p><pre><code>&lt;product&gt;\n&lt;code&gt;G45&lt;/code&gt;\n&lt;name color=\"black\" price=\"12.56\"&gt;Wool hat&lt;/ name&gt;\n&lt;/ product&gt;\n</code></pre> As you can see, now the value of the code has not been written in double quotes.</p>"},{"location":"01-mlxml/02_xml/#elements-and-attributes","title":"Elements and attributes","text":"<p>An element is a logical component of an XML document. The elements usually have their own entity. The content of an item is everything between the opening and closing tags, even if they contain other elements (children).</p> <p>In contrast, attributes usually represent properties or characteristics of elements.</p>"},{"location":"01-mlxml/02_xml/#syntax-rules","title":"Syntax rules","text":"<p>Attribute names must meet the same syntax rules as element names. In addition, all  attributes of an element must be unique. For example, it is incorrect to write:</p> <pre><code>&lt;data x=\"3\" x=\"4\" i=\"5\" /&gt;\n</code></pre> <p>However, it is correct to write:</p> <p><pre><code>&lt;data x=\"3\" X=\"4\" i=\"5\" /&gt;\n</code></pre> Attributes contained in an element, as in this case x, X and y, must be separated by whitespace, and is not significant his order.</p>"},{"location":"01-mlxml/02_xml/#xml-declaration_1","title":"XML declaration","text":"<p>The XML declaration that can be written at the beginning of an XML document begins with the characters <code>&lt;?</code> and ends with <code>?&gt;</code>.</p>"},{"location":"01-mlxml/02_xml/#version-and-coding","title":"Version and coding","text":"<p>An XML document could contain the following XML declaration:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n</code></pre> In this XML statement, you are indicating that 1.0 is the version of XML used in the document and UTF-8 (8-bit Unicode Transformation Format, 8-bit Unicode Transformation Format) is the character encoding employee.</p> <p>An XML declaration is not required to appear in an XML document. However, if it includes it, it must appear in the first line of the document, and the \"&lt;\" character must be the first of that line, that is, blank spaces cannot appear before.</p>"},{"location":"01-mlxml/02_xml/#standalone-attribute","title":"standalone attribute","text":"<p>In an XML declaration, in addition to the version and encoding of the attributes, the <code>standalone</code> attribute can also be written,  which can take two values \u200b\u200b(\"yes\" or \"no\"):</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n</code></pre> Typing <code>standalone =\" yes \"</code> indicates that the document is independent of others, such as one DTD (Document Type Definition, external Definition (or we will see later). Otherwise, would mean that the document is not independent.</p> <p>In an XML document, writing the XML declaration is optional. But, if written, the <code>version</code> attribute is required. However, the <code>encoding</code> and<code>standalone</code> attributes are optional, and by default their values \u200b\u200bare \"UTF-8\" and \"no\". respectively.</p> <p>On the other hand, when typing the <code>encoding</code> attribute, it should always appear after the version. And, the attribute <code>standalone</code>, as long as it exists, must be in the last place.</p>"},{"location":"01-mlxml/02_xml/#problematic-characters-in-xml-less-than-and-ampersand","title":"Problematic characters in XML: less than (&lt;) and ampersand (&amp;)","text":"<p>In an XML document, the \"&lt;\" character is problematic because it indicates the beginning of a tag. So, instead of writing, for example:</p> <p><pre><code>&lt;condition&gt;a &lt; b&lt;/condition&gt;\n</code></pre> The entity reference should be used by typing:</p> <p><pre><code>&lt;condition&gt;a &amp;lt; b &lt;/condition&gt;\n</code></pre> The <code>&gt;</code> character can be used in the text contained in an element, and it is not incorrect to write, for example:</p> <p><pre><code>&lt;condition&gt;a &gt; b&lt;/condition&gt;\n</code></pre> However, it is recommended to use your entity reference (<code>&amp;gt;</code>).</p> <p>In an XML document, the ampersand character is also problematic, as it is used to indicate the beginning of an reference to entity. For example, it is incorrect to write: <pre><code>&lt;condition&gt; a==1 &amp;&amp; b==2 &lt;/condition&gt;\n</code></pre> Instead, write the following: <pre><code>&lt;condition&gt; a==1 &amp;amp;&amp;amp; b==2 &lt;/condition&gt;\n</code></pre></p>"},{"location":"01-mlxml/02_xml/#character-references-in-xml","title":"Character references in XML","text":"<p>Unicode character references with &amp;# symbols can be written in an XML document, followed by the decimal value  or hexadecimal of the Unicode character you want to represent and finally adding the semicolon character \";\".</p> <p>Representation of the Euro character (\u20ac) in XML</p> <p>Given the XML document \"products.xml\":</p> <pre><code>&lt;? xml version = \"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;products&gt;\n&lt;name price = \"12.56&amp;#8364;\"&gt; Wool hat &lt;/name&gt;\n&lt;name price = \"16.99&amp;#x20AC;\"&gt; Fleece cap &lt;/name&gt;\n&lt;/products&gt;\n</code></pre> <p>When viewing in a web browser, you can see the following:</p> <p></p> <p>It should be noted that, in this case, to represent the symbol of the Euro (\u20ac), its value has been used for the first time. decimal (<code>&amp;#8364;</code>) in Unicode and, the second time, its hexadecimal value (<code>&amp;#x20AC;</code>).</p>"},{"location":"01-mlxml/02_xml/#comments-in-xml","title":"Comments in XML","text":"<p>To write comments to an XML document, they must be written between the characters <code>&lt;!--</code> and <code>--&gt;</code>. For example:</p> <pre><code>&lt;!-- This is a comment written in an XML document --&gt;\n</code></pre> <p>Given the XML file \"letras.xml\": <pre><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;!-- Example use of comments .--&gt;\n&lt;a&gt;\n&lt;b&gt;\n&lt;c quantity=\"4\"&gt;cccc&lt;/c&gt;\n&lt;d quantity=\"2\"&gt;dd&lt;/d&gt;\n&lt;/b&gt;\n&lt;e&gt;\n&lt;f quantity=\"8\"&gt;ffffffff&lt;/f&gt;\n&lt;!-- g may appear several times --&gt;\n&lt;g quantity=\"5\"&gt;ggggg &lt;/g&gt;\n&lt;g quantity=\"2\"&gt;gg &lt;/g&gt;\n&lt;/e&gt;\n&lt;/a&gt;\n</code></pre> In a browser you will see:</p> <p></p> <p>In an XML document, comments cannot be written within tags. For example, it is incorrect to write:</p> <p><pre><code>&lt;element &lt;!-- empty element --&gt; /&gt;\n</code></pre> On the other hand, it should be noted that in the comments of an XML document it is not allowed to use two consecutive hyphens:</p> <p><pre><code>&lt;!-- two hyphens in a row - in a comment gives error --&gt;\n</code></pre> So, it is not possible to nest comments in an XML document.</p>"},{"location":"01-mlxml/02_xml/#cdata-sections-in-xml","title":"CDATA sections in XML","text":"<p>An XML document can contain CDATA (Character DATA) sections for writing text that is not intended to be parsed. For example, this can be useful when you want to type text that contains any of the problematic characters: less than <code>&lt;</code> o ampersand <code>&amp;</code>.</p> <p>In an XML document, to include a CDATA section, we must start with the character string <pre><code>&lt;![CDATA [\n</code></pre> and ending with the characters  <pre><code>]]&gt;.\n</code></pre></p> <p>A CDATA section may contain, for example, the source code of a program written in the C language:</p> <p><pre><code>&lt;? xml version = \"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;CDATA_example&gt;\n&lt;![CDATA [\n#include &lt;stdio.h&gt;\nint main ()\n{\n   float note;\n   printf (\"\\n Enter note (real):\");\n   scanf (\"%f\", &amp;note);\nif (5 &lt;= note)\n      printf (\"\\n APPROVED\");\n   return 0;\n}\n]]&gt;\n&lt;/CDATA_example&gt;\n</code></pre> A web browser will display something like:</p> <p></p> <p>The string <code>\"]]&gt;\"</code> cannot be written within a CDATA section. Consequently, CDATA sections cannot be nested.</p> <p>On the other hand, it is not allowed to write whitespace or line breaks in start strings \"&lt;![CDATA [\" or end \"]]&gt;\" of a CDATA section</p>"},{"location":"01-mlxml/02_xml/#editing-tools","title":"Editing tools","text":"<p>To edit XML documents it is enough to have a plain text editor, such as Notepad or Pluma, but we can also use some specific editors like XML Copy Editor or an IDE with some plugin like Visual Studio Code with XML Tools and XML by Red Hat.</p>"},{"location":"01-mlxml/02_xml/#preparation-of-well-formed-xml-documents","title":"Preparation of well-formed XML documents","text":"<p>An XML document is said to be well-formed when it has no syntax errors. This includes the  following aspects:</p> <ol> <li>Element names and their attributes must be spelled correctly.</li> <li>Attribute values \u200b\u200bmust be enclosed in double or single quotes.</li> <li>The attributes of an element must be separated by whitespace.</li> <li>References to entities should be used where necessary.</li> <li>There must be a single root element.</li> <li>Every element must have a parent element except the root element.</li> <li>All elements must have an opening tag and a closing tag.</li> <li>Tags must be nested correctly.</li> <li>The XML declaration must be in the first line written correctly.</li> <li>The <code>CDATA</code> sections and comments must be spelled correctly.</li> </ol>"},{"location":"01-mlxml/02_xml/#using-namespaces-in-xml","title":"Using namespaces in XML","text":"<p>XML namespaces are a mechanism for ensuring that the elements and attributes of an XML document have names  unique. They are defined in a W3C recommendation. The problem they solve is the ambiguity that arises when a document   XML contains names of elements or attributes from various vocabularies and results in various elements or attributes    homonyms (with the same name): if each vocabulary is given a different namespace, the ambiguity is resolved.</p> <p>For example:</p> <pre><code> &lt;menu&gt;\n&lt;option&gt;Save&lt;/option&gt;\n&lt;description&gt;Save the current document&lt;/description&gt;\n&lt;/menu&gt;\n</code></pre> <pre><code> &lt;menu&gt;\n&lt;meats&gt;\n&lt;veal_steak price=\"12.95\" /&gt;\n&lt;sirloin_staeck price=\"13.60\" /&gt;\n&lt;/meats&gt;\n&lt;fishes&gt;\n&lt;baked_salmon  price=\"16.20\" /&gt;\n&lt;hake_in_green_sauce price=\"15.85\" /&gt;\n&lt;/fishes&gt;\n&lt;/menu&gt;\n</code></pre> <p>So, if the <code>&lt;menu&gt;</code> elements are included in an XML document, a name conflict arises. To solve it,  namespaces can be used. For example, typing:</p> <pre><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;e1:example xmlns:e1=\"http://www.abrirllave.com/example1\"\nxmlns:e2=\"http://www.abrirllave.com/ejemplo2\"&gt;  &lt;e1:menu&gt;\n&lt;e1:option&gt;Save&lt;/e1:option&gt;\n&lt;e1:description&gt;Save the current document&lt;/e1:description&gt;\n&lt;/e1:menu&gt;\n&lt;e2:menu&gt;\n&lt;e2:meats&gt;\n&lt;e2:veal_steak price = \"12.95\" /&gt;\n&lt;e2:sirloin_staeck price = \"13.60\" /&gt;\n&lt;/e2:meats&gt;\n&lt;e2:fishes&gt;\n&lt;e2:baked_salmon  price = \"16.20\" /&gt;\n&lt;e2:hake_in_green_sauce price = \"15.85\" /&gt;\n&lt;/e2:fishes&gt;\n&lt;/e2:menu&gt;\n&lt;/e1:example&gt;\n</code></pre> <p>The following syntax is used to define a namespace:</p> <pre><code>xmlns: prefix=\"URI\"\n</code></pre> <p>In the example, notice that, <code>xmlns</code> is an attribute that was used in the start tag of the element<code>&lt;example&gt;</code>and, in this case, two namespaces have been defined that refer to the following URIs (Uniform Resource Identifier):</p> <ul> <li>http://www.abrirllave.com/example1</li> <li>http://www.abrirllave.com/example2</li> </ul> <p>The defined prefixes are <code>e1</code> and <code>e2</code>, respectively. Prefixes have been added to the tags that appear in the document: <code>&lt;e1: menu&gt;</code>, <code>&lt;e2: menu&gt;</code>, <code>&lt;e1: option&gt;</code>, etc.</p>"},{"location":"01-mlxml/02_xml/#defining-a-default-namespace","title":"Defining a default namespace","text":"<p>Alternatively, a default namespace can be defined using the following syntax:</p> <pre><code>xmlns=\"URI\"\n</code></pre> <p>In this way, both the element where the namespace has been defined, and all its successors (children, children of children, etc.), must belong to this namespace. For example:</p> <p><pre><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;example xmlns=\"http://www.abrirllave.com/example1\"&gt;\n&lt;menu&gt;\n&lt;option&gt;Save&lt;/option&gt;\n&lt;description&gt;Save the current document&lt;/description&gt;\n&lt;/menu&gt;\n</code></pre> In the following example, a default namespace is initially defined for the <code>&lt;example&gt;</code> element and its contents.  in it. However, a second namespace is then defined, which by default affects the second <code>&lt;menu&gt; element  that appears in the document and its successors:</code><code>,</code><code>,</code>` ... <pre><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;example xmlns=\"http://www.abrirllave.com/example1\"&gt;  &lt;menu&gt;\n&lt;option&gt;Save&lt;/option&gt;\n&lt;description&gt;Save the current document&lt;/description&gt;\n&lt;/menu&gt;\n&lt;menu xmlns=\"http://www.abrirllave.com/example2\"&gt;\n&lt;meats&gt;\n&lt;veal_steak price = \"12.95\" /&gt;\n&lt;sirloin_staeck price = \"13.60\" /&gt;\n&lt;/meats&gt;\n&lt;fishes&gt;\n&lt;baked_salmon  price = \"16.20\" /&gt;\n&lt;hake_in_green_sauce price = \"15.85\" /&gt;\n&lt;/fishes&gt;\n&lt;/menu&gt;\n&lt;/example&gt;\n</code></pre> <p>In an XML document, to indicate that certain elements -or all- do not belong to any namespace, the attribute is written <code>xmlns</code> empty, that is,<code>xmlns=\"\"</code>.</p> <p><pre><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;example xmlns=\"http://www.abrirllave.com/example1\"&gt;  &lt;menu&gt;\n&lt;option&gt;Save&lt;/option&gt;\n&lt;description&gt;Save the current document&lt;/description&gt;\n&lt;/menu&gt;\n&lt;menu xmlns=\"http://www.abrirllave.com/example2\"&gt;\n&lt;meats&gt;\n&lt;veal_steak price = \"12.95\" /&gt;\n&lt;sirloin_staeck price = \"13.60\" /&gt;\n&lt;/meats&gt;\n&lt;fishes xmlns=\"\"&gt;\n&lt;baked_salmon  price = \"16.20\" /&gt;\n&lt;hake_in_green_sauce price = \"15.85\" /&gt;\n&lt;/fishes&gt;\n&lt;/menu&gt;\n&lt;/example&gt;\n</code></pre> In this case, the element  and its children do not belong in any namespace."},{"location":"01-mlxml/02_xml/#bibliography-webography-and-credits","title":"Bibliography, webography and credits","text":"<ul> <li>Wikipedia contributors. (2020, September 13). Markup language. In Wikipedia, The Free Encyclopedia.  Retrieved 15:51, September 15, 2020, from  https://en.wikipedia.org/w/index.php?title=Markup_language&amp;oldid=978142210</li> <li>Carlos Pes. (Febrer de 2017). Lenguajes de Marcas y Sistemas de Gesti\u00f3n de Informaci\u00f3n (LMSGI)  disponible en  Tutorial de LMSGI </li> <li>Bartolom\u00e9 Sint\u00e9s Marco. (Juny de 2020). XML: Lenguaje de marcas extensible, disponible  en https://www.mclibre.org/consultar/xml/</li> <li>Mozilla Contributors (June 2021). XML introduction. Available at https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction</li> <li>IBM Corporation. (June 2020). XML Syntax Rules. Available at https://www.ibm.com/docs/en/scbn?topic=syntax-xml-rules</li> </ul>"},{"location":"01-mlxml/03_tasks/","title":"Tasks","text":""},{"location":"01-mlxml/03_tasks/#markup-languages","title":"Markup languages","text":"<ol> <li> <p>After reading the Markup Languages chapter in your notebook:</p> <ol> <li>Which are the common features of markup languages?</li> <li>Which are the advantages of markup languages?</li> <li>What are lightweight markup languages? Look for some examples.</li> </ol> </li> <li> <p><code>112-task</code> </p> <ol> <li>Compare the export options when saving a document in LibreOffice Writer.</li> <li> <p>Type the following text in a plain text file, <code>myfile.txt</code>:</p> <p><pre><code>&lt;h1&gt; level 1 header &lt;/h1&gt;\n&lt;h3&gt; level 3 header &lt;/h3&gt;\n</code></pre> Open this file with your browser. How does it look? Change the file extension to html. Does it show the same information? Why?</p> </li> <li> <p>Search the Internet for a classification of markup languages. Write down 3 examples of each type specifying their main use.</p> </li> <li> <p>Go to openclipart.org, search for \"8 ball\", download the simplest image you see. Open it with the text editor.</p> <p>Can you undestand the structure? Try to change the color of the ball (hint: the colors are formatted: #000000). </p> </li> </ol> </li> </ol>"},{"location":"01-mlxml/03_tasks/#xml","title":"XML","text":"<ol> <li> <p>XML syntax errors </p> <p>Review the following XML document, detect errors, and rewrite it correctly </p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;frutas&gt;  &lt;/frutas&gt;\n&lt; frutas &gt;\n&lt; fruta &gt;\n&lt; nombre &gt;cereza&lt; nombre \\&gt;\n&lt; fruta \\&gt;\n&lt; fruta &gt;\n&lt; nombre &gt;naranja&lt; nombre \\&gt;\n&lt; fruta \\&gt;\n&lt; frutas \\&gt;\n</code></pre> </li> <li> <p>Creating XML documents</p> <p>Write an XML document that stores the following information:</p> <p>Cities</p> Name Country Continent New Delhi India Asia Lisbon Portugal Europe Cairo Egypt Africa <p>Note: The continent must be represented by an attribute.</p> <p>Historical facts</p> <p></p> <p>Note: only the description of each fact must be represented by an attribute.</p> </li> <li> <p>The DAW modules</p> <p>Create an XML document in order to store the modules of the DAW training cycle indicating how many hours last each module and the year in which is taught.</p> </li> <li> <p>Well-formed XML documents</p> <p>Resolve the tasks in the follow document: Activity statement.</p> </li> <li> <p>List of web page bookmarks</p> <p>Without using attributes, create a well-formed XML document that describes a list of web page bookmarks, knowing that you want the information for each page to be the name, a short description, and its URL. The data of the markers is as described in the following table:</p> Name Description URL Abrir llave Computing tutorials. http://www.abrirllave.com/ Wikipedia The free encyclopedia. http://www.wikipedia.org/ W3C World Wide Web Consortium. http://www.w3.org/ </li> <li> <p>Convert a sentence into a XML document</p> <p>Create an XML document so that the markup makes it possible to search for information according to the following fields: recipient of the order, item ordered, delivery address, delivery date.</p> <p>Order for Mr. Juan Delgado Mart\u00ednez. The order consists of an A2023 bicycle. To be delivered at Calle Barco 4, third floor, letter A, on 05-19-2021.</p> </li> <li> <p>Sitemaps</p> <p>Given the following file and folder structure of a website (<code>examples-of-xml.com</code>):</p> <ul> <li><code>/index.html</code></li> <li><code>/contact.html</code></li> <li><code>/imagess/printer.gif</code></li> <li><code>/images/monitor.gif</code></li> <li><code>/images/keyboard.gif</code></li> <li><code>/products/printer.html</code></li> <li><code>/products/monitor.html</code></li> <li><code>/products/keyboard.html</code></li> </ul> <p>Using the information provided in:</p> <ul> <li>Standard Sitemap Protocol - sitemaps.org</li> <li>Create and submit a sitemap - Images sitemap at Google Developers</li> </ul> <p>Create an XML sitemap (\"sitemap.xml\") of the website, excluding images.</p> <p>You can validate it at https://www.mysitemapgenerator.com/service/check.html</p> <p>Extension</p> <p>Create another XML document (\"sitemap2.xml\") including the images and indicating a different title for each one of them.</p> <p>Note: it is necessary to take into account that each image (<code>printer.gif</code>, <code>monitor.gif</code> and <code>keyboard.gif</code>) is included only in the web page of the site that has the same name (<code>printer.html</code>, <code>monitor.html</code> and <code>keyboard.html</code>).</p> </li> </ol>"},{"location":"02-xml-scheme/0200-intro/","title":"2. XML schemas and vocabularies. Content syndication","text":"<p>Learning outcomes</p> <ul> <li>Understand the need to describe the information transmitted in XML documents and their rules.</li> <li>Identify technologies related to the definition of XML documents.</li> <li>Analyse the structure and specific syntax used in the description.</li> <li>Create descriptions of XML documents.</li> <li>Use descriptions in the preparation and validation of XML documents.</li> <li>Associate descriptions with documents.</li> <li>Document descriptions.</li> <li>Analyse a specific example of the use of markup language for the transmission of information.</li> <li>Define an XML document based on its syntax and structure.</li> </ul> <p>Assessment criteria</p> <ol> <li>The need to describe the information transmitted in XML documents has been established and its rules.</li> <li>Technologies related to the definition of XML documents have been identified.</li> <li>The specific structure and syntax used in the description has been analyzed.</li> <li>XML document descriptions have been created.</li> <li>Descriptions have been used in the development and validation of XML documents.</li> <li>Descriptions have been associated with the documents.</li> <li>Specific tools are used.</li> <li>The descriptions have been documented.</li> <li>The advantages that content syndication brings to the management and transmission of information have been identified.</li> <li>Its areas of application have been defined.</li> <li>Technologies based on content syndication have been analysed.</li> <li>The structure and syntax of a content channel has been identified.</li> <li>Content channels have been created and validated.</li> <li>Functionality and access to channels are checked.</li> <li>Specific tools are used such as aggregators and channel directories.</li> </ol>"},{"location":"02-xml-scheme/0201-xml-scheme/","title":"XML schemas and vocabularies","text":"<p>In unit 1 you have learned how to create well-formed XML documents, that is, following the XML syntactic rules.</p> <p>Important</p> <p>An XML document is valid when, in addition to being well-formed, it does not break none of the rules established in its structure definition.</p> <p>The aim of this unit is to learn how structural rules can be defined  to be able to create our own XML dialects and how these rules can define valid XML documents.</p> <p>This kind of structure can be defined with the following languages:</p> <ul> <li>DTD (Document Type Definition).</li> <li>XML Schema.</li> <li>RELAX NG (REgular LAnguage for XML Next Generation).</li> </ul> <p>Look at this simple XML document called \"note.xml\":</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;note&gt;\n&lt;to&gt;Tove&lt;/to&gt;\n&lt;from&gt;Jani&lt;/from&gt;\n&lt;heading&gt;Reminder&lt;/heading&gt;\n&lt;body&gt;Don't forget me this weekend!&lt;/body&gt;\n&lt;/note&gt; </code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#a-dtd-file","title":"A DTD File","text":"<p>The following example is a DTD file called <code>note.dtd</code> that defines the elements of the XML document above (<code>note.xml</code>):</p> <p><pre><code>&lt;!ELEMENT note (to, from, heading, body)&gt;\n&lt;!ELEMENT to (#PCDATA)&gt;\n&lt;!ELEMENT from (#PCDATA)&gt;\n&lt;!ELEMENT heading (#PCDATA)&gt;\n&lt;!ELEMENT body (#PCDATA)&gt;\n</code></pre> The first line defines the <code>note</code> element to have four child elements: \"to, from, heading, body\".</p> <p>Line 2-5 defines the <code>to</code>, <code>from</code>, <code>heading</code>, <code>body</code> elements to be of type <code>#PCDATA</code>.</p>"},{"location":"02-xml-scheme/0201-xml-scheme/#an-xml-schema","title":"An XML Schema","text":"<p>The following example is an XML Schema file called <code>note.xsd</code> that defines the elements of the XML document above (<code>note.xml</code>):</p> <p><pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;xs:schema&gt;\n&lt;xs:element name=\"note\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"to\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"from\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"heading\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"body\" type=\"xs:string\"/&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre> The <code>note</code> element is a complex type because it contains other elements. The other elements (<code>to</code>, <code>from</code>, <code>heading</code>, body) are simple types because they do not contain other elements. You will learn more about simple and complex types in the following chapters.</p>"},{"location":"02-xml-scheme/0201-xml-scheme/#document-type-definitions","title":"Document Type Definitions","text":"<p>DTD (document type definitions) is a schema definition language that already existed before the advent of XML (used in SGML). It was designed to work with SGML and could be used in many of the markup languages \u200b\u200bbased on it, such as XML or HTML.</p> <p>When XML was defined, it was used to make a simplified version of DTD that was the original schema specification language.</p> <p>The main purpose of DTDs is to provide a mechanism for validating the structures of XML documents and determining whether the document is valid or not. But this will not be the only advantage that DTDs will give us, but we can also use them to share information between organizations, because if someone else has our DTD they can send us information in our format and we can process it.</p> <p>For a long time DTDs were the most widely used vocabulary definition system in XML but have now been overtaken by XML Schemas. However, it is still widely used, especially because it is much simpler.</p> <p>The XML specification refers to DTDs as a method of defining XML vocabularies, but DTDs have a number of limitations that led the W3C to define a new specification. This specification was called the W3C XML Schema Definition Language (popularly called the XML Schema or XSD), and was created to replace the DTD as a vocabulary definition method for XML documents. Furthermore, unlike DTD, XSD is an XML dialect.</p> <p>For these reasons, we will focus on XML Schema.</p>"},{"location":"02-xml-scheme/0201-xml-scheme/#xml-schema-definition","title":"XML Schema Definition","text":"<p>The latest specification can be found at www.w3.org/XML/Schema.</p> <p>The purpose of an XML Schema is to define the legal building blocks of an XML document:</p> <ul> <li>the elements and attributes that can appear in a document</li> <li>the number of (and order of) child elements</li> <li>data types for elements and attributes</li> <li>default and fixed values for elements and attributes</li> </ul> <p>The success of XSD has been great, and it is now used for tasks other than simply validating XML. It is also used in other XML technologies such as XQuery, web services, etc.</p> <p>The most important features that XSD provides are:</p> <ol> <li>It is written in XML and therefore it is not necessary to learn a new language to define XML schemas.</li> <li>It has its own data type system, so you can check the contents of the items.</li> <li>Supports namespaces to allow mixing different vocabularies.</li> </ol>"},{"location":"02-xml-scheme/0201-xml-scheme/#schema-definition","title":"<code>&lt;schema&gt;</code> definition","text":"<p>XSD is based on XML and must therefore comply with XML rules:</p> <ul> <li>Although not required, the file is usually started with the XML declaration.</li> <li>There is only one root element, which in this case is <code>&lt;schema&gt;</code>.</li> </ul> <p>Due to the fact that an specific and well-known vocabulary is being used to be able to use the XML elements, the XSD namespace must always be specified: <code>http://www.w3.org/2001/XMLSchema</code>.</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\nelementFormDefault=\"qualified\"&gt;\n...\n&lt;/xs:schema&gt;\n</code></pre> <p><code>xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"</code> indicates that the elements and data types used in the schema come from the \"http://www.w3.org/2001/XMLSchema\" namespace. It also specifies that the elements and data types that come from the \"http://www.w3.org/2001/XMLSchema\" namespace should be prefixed with <code>xs:</code>.</p> <p><code>elementFormDefault=\"qualified\"</code> indicates that any elements used by the XML instance document which were declared in this schema must be namespace qualified.</p> <p>XSD tags</p> <p>XSD defines many tags and not all of them can be seen here. You can find all possible tags in the specification www.w3.org/TR/xmlschema11-1.</p> <p>The <code>&lt;schema&gt;</code> tag can have different attributes, some of which we can see in the following table</p> Attribute Meaning <code>attributeFormDefault</code> The value must be \"qualified\" or \"unqualified\". Default is \"unqualified\". \"unqualified\" indicates that attributes from the target namespace are not required to be qualified with the namespace prefix. <code>elementFormDefault</code> The form for elements declared in the target namespace of this schema. The value must be \"qualified\" or \"unqualified\". Default is \"unqualified\". \"unqualified\" indicates that elements from the target namespace are not required to be qualified with the namespace prefix. <code>version</code> Defines which version of the schema document we are defining (not the XML Schemas version). <p>From the root element you can start defining the tags of the vocabulary you want to create.</p>"},{"location":"02-xml-scheme/0201-xml-scheme/#associate-a-schema-to-an-xml-document","title":"Associate a schema to an XML document","text":"<p>Unlike other definition languages \u200b\u200b-such as DTDs, in which the association must be specified in the XML document- you do not need to modify the XML file to validate an XML with an XSD. However, it is also possible to do this by defining the namespace.</p> <p>To associate an XML document with a schema document, you need to define the namespace with the <code>xmlns</code> attribute, and use one of the language attributes to define the schema file:</p> <p><pre><code>&lt;urlset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:noNamespaceSchemaLocation=\"urlset.xsd\"&gt;\n</code></pre> References to the schema file can be defined in two ways, which can be seen in the table.</p> Attribute Meaning <code>noNamespaceSchemaLocation</code> No namespaces will be used in the document. <code>schemaLocation</code> Used when explicitly using namespace names in tags. <p>Validation from command line</p> <p>You can validate from command line using the <code>xmllint</code> command. <pre><code>xmllint doc.xml --schema doc.xsd\n</code></pre></p>"},{"location":"02-xml-scheme/0201-xml-scheme/#elements-definition","title":"Elements definition","text":"<p>Elements are defined using the <code>&lt;element&gt;</code> tag and the <code>name</code> attribute. Optionally, it can include the data type of its containing element. In the following example we define an element named <code>firstname</code> of type <code>string</code>.</p> <p><pre><code>&lt;xs:element name=\"firstname\" type=\"xs:string\" /&gt;\n</code></pre> This element complies the definition:</p> <p><pre><code>&lt;firstname&gt;Homer&lt;/firstname&gt;\n</code></pre> The XSD divides the elements into two large groups based on the data they contain:</p> <ul> <li>Elements with simple type content: Elements without attributes that only contain data.</li> <li>Elements with complex type content: Elements that may have attributes, no content, or contain elements.</li> </ul> <p>From the definition, it can be seen that there will almost always be some complex type, as the root will usually contain other elements.</p>"},{"location":"02-xml-scheme/0201-xml-scheme/#elements-with-simple-type-content","title":"Elements with simple type content","text":"<p>Info</p> <p>Elements with simple type content are those that do not contain other elements or have attributes.</p> <p>XSD version 1.1 defines about fifty different data types, which can be found in their definition www.w3.org/TR/xmlschema11-2. Among the most used are those in the following table:</p> Type Data that can be stored there <code>string</code> Character strings <code>decimal</code> Numeric values <code>boolean</code> Can only contain \u2018true\u2019 or \u2018false\u2019 or (1 or 0) <code>date</code> Dates in form (YYYY-MM-DD) <code>anyURI</code> Site references (URLs, disk paths\u2026) <code>base64binary</code> Binary data encoded in base64 <code>integer</code> Integers <p>From the basic types, the standard creates others with the aim of having data types that can be better adapted to the objectives of the person designing the scheme. Therefore there are the types called <code>positiveInteger</code>, <code>nonNegativeInteger</code>, <code>gYearMonth</code>, <code>unsignedInt</code>,... </p> <p>Data types allow you to restrict the values \u200b\u200bthat XML elements will contain. For example, if you start from the following definition:</p> <p><pre><code>...\n    &lt;xs:element name=\"position\" type=\"xs:integer\" /&gt;\n&lt;/xs:schema&gt;\n</code></pre> An item can only be validated if its contents are an integer. For example, the following example will not validate:</p> <pre><code>&lt;position&gt;First&lt;/position&gt;\n</code></pre> <p>In the following table you can see examples of definitions of elements and values \u200b\u200bthat validate them.</p> Label Example <code>&lt;xs:element name=\"dia\" type=\"xs:date\" /&gt;</code> <code>&lt;dia&gt;2011-09-15&lt;/dia&gt;</code> <code>&lt;xs:element name=\"height\u201d type=\"xs:integer\" /&gt;</code> <code>&lt;height&gt;220&lt;/height&gt;</code> <code>&lt;xs:element name=\"name\u201d type=\"xs:string\u201d /&gt;</code> <code>&lt;name&gt;Pere Puig&lt;/name&gt;</code> <code>&lt;xs:element name=\"size\u201d type=\"xs:float\u201d /&gt;</code> <code>&lt;size&gt;1.7E2&lt;/size&gt;</code> <code>&lt;xs:element name=\"place\u201d type=\"xs:anyURI\u201d /&gt;</code> <code>&lt;place&gt;http://www.ioc.cat&lt;/place&gt;</code>"},{"location":"02-xml-scheme/0201-xml-scheme/#cardinality","title":"Cardinality","text":"<p>When an element is defined in XSD, it is in such a way that the tag must appear once. It is quite common for tags to be repeated certain times. In XSD this has been simplified by attributes of the <code>&lt;element&gt;</code> tag that determine the cardinality of the elements:</p> <ul> <li><code>minOccurs</code>: allows you to define how many times an element must come out at least. A value of \u20180\u2019 indicates that the item may not come out.</li> <li><code>maxOccurs</code>: used to define the maximum number of times an element can be output. <code>unbounded</code> implies that there is no limit to the times it can go out.</li> </ul> <p>Using the attributes, you can set the <code>&lt;firstname&gt;</code> element to go out once and the <code>&lt;surname&gt;</code> element a maximum of twice.</p> <pre><code>&lt;xs:element name=\"firtname\" /&gt;\n&lt;xs:element name=\"surname\" maxOccurs=\"2\" /&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#fixed-and-default-values","title":"Fixed and default values","text":"<p>Values \u200b\u200bcan also be given to elements with the <code>fixed</code>, <code>default</code>, and <code>nullable</code> attributes.</p> <p>The <code>fixed</code> attribute allows you to define a required value for an element:</p> <p><pre><code>&lt;xs:element name=\"centre\" type=\"xs:string\" fixed=\"IOC\" /&gt;\n</code></pre> So only content with the specified value (or nothing) can be defined:</p> <pre><code>&lt;centre /&gt;\n&lt;centre&gt;IOC&lt;/centre&gt;\n</code></pre> <p>But never a different value than specified:</p> <p><pre><code>&lt;!-- validation error --&gt;\n&lt;centre&gt; Institut Cendrassos &lt;/centre&gt;\n</code></pre> Unlike <code>fixed</code>, <code>default</code> assigns a default value but lets it be changed in the contents of the element.</p> <pre><code>&lt;xsi:element name=\"centre\" type=\"xs:string\" default=\"IOC\" /&gt;\n</code></pre> <p>The definition would validate with the following three cases:</p> <pre><code>&lt;center /&gt;\n&lt;centre&gt;IOC&lt;/centre&gt;\n&lt;centre&gt;Institut Cendrassos&lt;/centre&gt;\n</code></pre> <p>The <code>null</code> attribute is used to indicate whether null content is allowed. Therefore, you can only take the values <code>\u200b\u200byes</code> or <code>no</code>.</p>"},{"location":"02-xml-scheme/0201-xml-scheme/#simple-custom-types","title":"Simple custom types","text":"<p>Sometimes it may be interesting to define values \u200b\u200bfor elements that do not necessarily have to match the standards. XSD allows you to define custom types of data. For example, if you want a numeric value but do not accept all values \u200b\u200bbut a subset of integers.</p> <p>To define custom simple types, the type is not placed in the element and a <code>&lt;simpleType&gt;</code> child is defined.</p> <pre><code>&lt;xs:element name=\"person\"&gt;\n&lt;xs:simpleType&gt;\n...\n    &lt;/xs:simpleType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p><code>simpleType</code> specifies the modification you want to make. The most common is that the changes are made with list, union, restriction or extension.</p>"},{"location":"02-xml-scheme/0201-xml-scheme/#lists","title":"Lists","text":"<p>Although lists of values \u200b\u200bcan be defined, it is not highly recommended to use them. Most experts believe that it is better to define the values \u200b\u200bin the list using tag repetitions.</p> <p>Using list will allow you to define that an item can contain lists of values. Therefore, to specify that a  element can contain a list of dates would be defined: <pre><code>&lt;xs:element name=\"matches\"&gt;\n&lt;xs:simpleType&gt;\n&lt;xs:list itemType=\"xs:date\" /&gt;\n&lt;/xs:simpleType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>The element would validate with something like:</p> <p><pre><code>&lt;matches&gt;2011-01-07 2011-01-15 2011-01-21 &lt;/matches&gt;\n</code></pre> <code>simpleType</code> elements can also be defined with a name outside the elements and then used as a custom data type.</p> <pre><code>&lt;xs:simpleType name=\"days\"&gt;\n&lt;xs:list itemType=\"xs:date\" /&gt;\n&lt;/xs:simpleType&gt;\n&lt;xs:element name=\"matches\" type=\"days\" /&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#union","title":"Union","text":"<p>Using custom named types, union type modifications can be created. Union modifiers are used to allow different types to be mixed into the contents of an element.</p> <p>Defining the <code>&lt;price&gt;</code> element will allow the element to be of type value or symbol type.</p> <pre><code>&lt;xs:element name=\"price\"&gt;\n&lt;xs:simpleType&gt;\n&lt;xs:union memberTypes=\"value symbol\" /&gt;\n&lt;/xs:simpleType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>With this we could assign values \u200b\u200blike these:</p> <pre><code>&lt;price&gt;25 \u20ac&lt;/price&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#restrictions","title":"Restrictions","text":"<p>Without a doubt the most interesting modifier is the one that allows to define restrictions to the base types. With the restriction modifier you can create data types in which only certain values \u200b\u200bare accepted, the data meets a certain condition, and so on.</p> <p>The <code>&lt;birth&gt;</code> element can only have integer values \u200b\u200bbetween 1850 and 2011 if defined as follows:</p> <p><pre><code>&lt;xs:element name=\"birth\"&gt;\n&lt;xs:simpleType&gt;\n&lt;xs:restriction base=\"xs:integer\"&gt;\n&lt;xs:maxInclusive value=\"2011\" /&gt;\n&lt;xs:minInclusive value=\"1850\" /&gt;\n&lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n&lt;/xs:element&gt;\n</code></pre> We can also define a simple type for later use:</p> <pre><code>&lt;xs:simpleType name=\"year_birth\"&gt;\n&lt;xs:restriction base=\"xs:integer\"&gt;\n&lt;xs:maxInclusive value=\"2011\" /&gt;\n&lt;xs:minInclusive value=\"1850\" /&gt;\n&lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n&lt;xs:element name=\"birth\" type=\"year_birth\" /&gt;\n</code></pre> <p>Restrictions of many types can be defined by means of attributes (Table.11). Normally the values \u200b\u200bof the constraints are specified in the value attribute:</p> Result Elements <code>maxInclusive</code>/<code>maxExclusive</code> Used to define the maximum numeric value that an item can take. <code>minInclusive</code>/<code>minExclusive</code> Set the minimum value for the value of an item. <code>length</code> With lenght we restrict the length that a text element can have. We can use <code>&lt;xs:minLength&gt;</code> and <code>&lt;xs:maxLenght&gt;</code> to be more accurate. <code>enumeration</code> Only allows the element to have one of the values \u200b\u200bspecified in the different  lines. <code>totalDigits</code> Defines the number of digits of a numeric value. <code>fractionDigits</code> Used to specify the number of decimals that a numeric value can have. <code>pattern</code> Defines a regular expression to which the value of the element must fit in order to be valid. <p>For example, the value of the <code>&lt;answer&gt;</code> element can only have one of the three values \u200b\u200b<code>\"A\"</code>, <code>\"B\"</code> or <code>\"C\"</code> if it is defined in this way:</p> <pre><code>&lt;xs:element name=\"answer\"&gt;\n&lt;xs:simpleType&gt;\n&lt;xs:enumeration value=\"A\" /&gt;\n&lt;xs:enumeration value=\"B\" /&gt;\n&lt;xs:enumeration value=\"C\" /&gt;\n&lt;/xs:simpleType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>One of the most interesting constraints is those defined by the pattern attribute, which allows you to define constraints from regular expressions. As a general rule, we have that if a character is specified in the pattern it must appear in the content; the other possibilities can be seen in the table:</p> Symbol Equivalence <code>.</code> Any character <code>\\d</code> Any digit <code>\\D</code> Any non-digit character <code>\\s</code> Non-printable characters: spaces, tabs, line breaks\u2026 <code>\\S</code> Any printable character <code>x*</code> The previous character must appear 0 or more times <code>x+</code> The previous character must appaer 1 or more times <code>x?</code> The previous character must appear or not <code>[abc]</code> There must be some character inside <code>[0-9]</code> There must be a value between the two specified, inclusive <code>x{5}</code> The <code>x</code> expression must appear 5 times. <code>x{5,}</code> The <code>x</code> expression must appear 5 or more times. <code>x{5,8}</code> The <code>x</code> expression must appear from 5 to 8 times. <p>Using this system you can define highly customized data types. For example, we can define that a data must have the form of a DNI (8 digits, a hyphen and a capital letter) with this expression:</p> <pre><code>&lt;xs:simpleType name=\"dni\"&gt;\n&lt;xs:restriction base=\"xs:string\"&gt;\n&lt;xs:pattern value=\"[0-9]{8}-[A-Z]\" /&gt;\n&lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n</code></pre> <p>More information</p> <p>In Quick-Start: Regex Cheat Sheet you will find a quick guide to Regular Expressions and a lot of related resources.</p>"},{"location":"02-xml-scheme/0201-xml-scheme/#elements-with-complex-type-content","title":"Elements with complex type content","text":"<p>Info</p> <p>Elements with complex type content are those that have attributes, contain other elements, or have no content.</p> <p>Elements with complex content have received a lot of criticism because they are considered too complicated, but they should be used because in all schema files there will usually be a complex type: the root of the document.</p> <p>There are considered to be four major groups of complex content:</p> <ul> <li>Those in its content have only data. Therefore, they are like those of simple types but with attributes.</li> <li>Items that contain only items in the content.</li> <li>The empty elements.</li> <li>Elements with mixed content.</li> </ul> <p>Elements with complex type are defined by specifying that the data type of the element is <code>&lt;xs:complexType&gt;</code>.</p> <pre><code>&lt;xs:element name=\"class\"&gt;\n&lt;xs:complexType&gt;\n....\n    &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>As with simple types, complex named types can be defined for reuse as custom types.</p> <pre><code>&lt;xs:complexType name=\"course\"&gt;\n...\n&lt;/xs:complexType&gt;\n&lt;xs:element classType=\"course\"/&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#content-made-up-of-elements","title":"Content made up of elements","text":"<p>Elements that contain other elements can also be defined in XSD within a <code>&lt;complexType&gt;</code> and can be elements in the following table:</p> Label Used for sequence Specify the content as an ordered list of items. choice Allows you to specify alternative items. all Define the content as a cluttered list of items. complexContent Extend or restrict complex content."},{"location":"02-xml-scheme/0201-xml-scheme/#sequence","title":"Sequence","text":"<p>The <code>&lt;sequence&gt;</code> element allows you to specify the elements that should be part of an element's content. Even in the case where there is only a single tag it can be defined as a sequence.</p> <p>Its most important condition is that elements in XML document must appear in the same order in which they are defined in the sequence.</p> <pre><code>&lt;xs:element name=\"person\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;xs:element name=\"type\" type=\"xs:string\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>The example above defines that one or two surnames may appear before the appearance of <code>&lt;type&gt;</code>.</p> <pre><code>&lt;person&gt;\n&lt;name&gt;Marcel&lt;/name&gt;\n&lt;cognom&gt;Puig&lt;/cognom&gt;\n&lt;cognom&gt;Lozano&lt;/cognom&gt;\n&lt;type&gt;Professor&lt;/type&gt;\n&lt;/person&gt;\n</code></pre> <p>It will not validate any content if some item is not in exactly the same order.</p> <pre><code>&lt;person&gt;\n&lt;type&gt;Professor&lt;/type&gt;\n&lt;cognom&gt;Puig&lt;/cognom&gt;\n&lt;name&gt;Marcel&lt;/name&gt;\n&lt;/person&gt;\n</code></pre> <p>Sequences may contain other sequences of elements.</p> <pre><code>&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"&gt;\n&lt;xs:element name=\"person\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"fullname\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;xs:element name=\"profession\" type=\"xs:string\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#all","title":"All","text":"<p>The most important difference between the <code>&lt;all&gt;</code> and <code>&lt;sequence&gt;</code> element is the order. The <code>&lt;all&gt;</code> element allows you to specify a sequence of elements but allows them to be specified in any order.</p> <p>Therefore, if we define the <code>&lt;person&gt;</code> element as follows:</p> <pre><code>&lt;xs:element name=\"person\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:all&gt;\n&lt;xs:element name=\"nom\" /&gt;\n&lt;xs:element name=\"surname\" /&gt;\n&lt;/xs:all&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>It will help us to validate both this document:</p> <pre><code>&lt;person&gt;\n&lt;name&gt;Pere&lt;/name&gt;\n&lt;cognom&gt;Garcia&lt;/nom&gt;\n&lt;/person&gt;\n</code></pre> <p>like this:</p> <pre><code>&lt;person&gt;\n&lt;cognom&gt;Garcia&lt;/nom&gt;\n&lt;name&gt;Pere&lt;/name&gt;\n&lt;/person&gt;\n```\n\nBut the limitations of this element that were not present in the ordered sequences must always be taken into account:\n\n* There can only be elements within it. There can be no sequences or alternatives.\n* Cardinality cannot be used in the elements it contains, as it would cause a problem of non-determinism.\n\nTherefore, the following example is incorrect, as it is requested so that `&lt;surname&gt;` is able to appear twice.\n\n```xml\n&lt;xs:all&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" maxOccurs=\"2\" type=\"xs:string\" /&gt;\n&lt;/xs:all&gt;\n</code></pre> <p>One possible way to allow the first and last names to be specified in any order would be to do the following:</p> <pre><code>&lt;xs:complexType&gt;\n&lt;xs:choice&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:choice&gt;\n&lt;/xs:complexType&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#choice","title":"Choice","text":"<p>The <code>&lt;choice&gt;</code> element is used to choose one of the alternatives presented.</p> <p>In this example, the person element may contain either the  or  tag, but not both. <pre><code>&lt;xs:complexType name=\"person\"&gt;\n&lt;xs:choice&gt;\n&lt;xs:element name=\"nomCognoms\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"dni\" type=\"xs:string\" /&gt;\n&lt;/xs:choice&gt;\n...\n</code></pre> <p>Alternatives may include sequences or other <code>&lt;choice&gt;</code> elements. The following definition is a more elaborate example than the previous one and allows you to choose between the elements <code>&lt;name&gt;</code> and <code>&lt;surname&gt;</code> or <code>&lt;dni&gt;</code>.</p> <pre><code>&lt;xs:choice&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;xs:element name=\"dni\" type=\"xs:string\" /&gt;\n&lt;/xs:choice&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#complexcontent","title":"<code>complexContent</code>","text":"<p>The <code>complexContent</code> tag allows you to define extensions or restrictions to a complex  type that contains mixed content or just elements.</p> <p>This makes it possible to extend an existing complex content with an extension or to restrict its contents.</p> <p>For example, if you have already defined a full name data type in which the <code>&lt;name&gt;</code> and <code>&lt;surname&gt;</code> elements exist, you can reuse the definition to define a new data type, address book, in which the e-mail.</p> <pre><code>&lt;xs:complexType name=\"fullname\"&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"surname\" type=\"xs:string\" maxOccurs=\"2\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;xs:complexType name=\"agenda\"&gt;\n&lt;xs:complexContent&gt;\n&lt;xs:extension base=\"fullname\"&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"email\" type=\"xs:string\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:extension&gt;\n&lt;/xs:complexContent&gt;\n&lt;/xs:complexType&gt;\n</code></pre> <p>In this way, an agenda element can be defined:</p> <pre><code>&lt;xs:element name=\"persona\" type=\"agenda\" /&gt;\n</code></pre> <p>which must have the three elements <code>&lt;name&gt;</code>, <code>&lt;surname&gt;</code>, and <code>&lt;email&gt;</code>:</p> <pre><code>&lt;person&gt;\n&lt;name&gt;Pere&lt;/name&gt;\n&lt;cognom&gt;Garcia&lt;/cognom&gt;\n&lt;email&gt;pgarcia@ioc.cat&lt;/email&gt;\n&lt;/person&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#attributes","title":"Attributes","text":"<p>A basic feature of XSD is that only complex type elements can have attributes. In essence, there is not much difference between defining an element or an attribute, as it is done in the same way but using the attribute tag.</p> <p>The data types are the same and therefore can have basic types as in the following example:</p> <p><pre><code>&lt;xs:attribute name= \"number\" type=\"xs:integer\" /&gt;\n</code></pre> Restrictions can be placed in the same way as in the elements. In this example, the year attribute cannot have values \u200b\u200bgreater than 2011 if it is defined as follows:</p> <p><pre><code>&lt;xs:attribute name=\"year\"&gt;\n&lt;xs:simpleType&gt;\n&lt;xs:restriction base=\"xs:integer\"&gt;\n&lt;xs:maxInclusive value=\"2021\" /&gt;\n&lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n&lt;/xs:attribute&gt;\n</code></pre> Unless otherwise specified, attributes are always optional.</p> <p>The <code>&lt;attribute&gt;</code> tag has a series of attributes that allow you to define extra features about the attributes.</p> Attribute Use use Specifies whether the attribute is required, optional, or prohibited. default Sets a default value. fixed Used to define required values \u200b\u200bfor attributes. form Defines whether the attribute should go with the namespace alias (qualified) or not (unqualified). <p>For example, the year attribute must be specified if it is defined as follows:</p> <pre><code>&lt;xs:attribute name=\"year\" type=\"xs:integer\" use=\"required\" /&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#text-only-elements-with-attributes","title":"Text-only elements with attributes","text":"<p>A complex text-only element can contain text and attributes. In this case, the content of <code>complexType</code> will be a <code>simpleContent</code>. <code>simpleContent</code> allows you to define restrictions or extensions to elements that only have data as content.</p> <p>The most important difference is that in this case you can define attributes in the element. Attributes are added by defining an extension to the type used in the element.</p> <p><code>xs:extension</code> is used to extent a simpleType or a complexType element.</p> <p>In this example, the <code>&lt;shoesize&gt;</code> element has integer content and defines one attributes, country, that are an string.</p> <p><pre><code>&lt;xs:element name=\"shoesize\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:simpleContent&gt;\n&lt;xs:extension base=\"xs:integer\"&gt;\n&lt;xs:attribute name=\"country\" type=\"xs:string\" /&gt;\n&lt;/xs:extension&gt;\n&lt;/xs:simpleContent&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt; </code></pre> For instance:</p> <pre><code>&lt;shoesize country=\"france\"&gt;35&lt;/shoesize&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#empty-elements","title":"Empty elements","text":"<p>For XSD elements without content are always of complex type. The definition simply does not specify any content and we will have an empty element.</p> <pre><code>&lt;xs:element name=\"delegate\"&gt;\n&lt;xs:complexType /&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>The definition allows you to define the item as follows:</p> <pre><code>&lt;delegate /&gt;\n</code></pre> <p>If the element needs attributes they are simply specified within the <code>complexType</code>.</p> <pre><code>&lt;xs:element name=\"delegate\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:attribute name=\"year\" use=\"required\" type=\"xs:gYear\" /&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n</code></pre> <p>And you can now define the attribute in the empty element:</p> <pre><code>&lt;delegate year=\"2012\" /&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#mixed-content","title":"Mixed content","text":"<p>Mixed content elements are elements that have both elements and text. It was designed to include elements in the middle of a narrative text.</p> <p>In XSD the mixed content is defined by putting the mixed=\"true\" attribute in the definition of the  element. <p><pre><code>&lt;xs:element name=\"letter\"&gt;\n&lt;xs:complexType mixed=\"true\"&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"dia\" type=\"xs:gDay\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n</code></pre> This would allow us to validate content like this:</p> <pre><code>&lt;card&gt;Dear Sir &lt;name&gt;Peter&lt;/name&gt;:\n    I am sending you this letter to remind you that we have stayed for\n    meet us on &lt;day&gt;12&lt;/day&gt;\n&lt;/card&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#example-of-creating-an-xsd","title":"Example of creating an XSD","text":"<p>XSD vocabulary definitions can be created from the idea of \u200b\u200bwhat we want the data to contain or from a sample XML file.</p>"},{"location":"02-xml-scheme/0201-xml-scheme/#practical-case","title":"Practical case","text":"<p>We want to store in an XML document some website bookmarks:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;bookmarks&gt;\n&lt;website&gt;\n&lt;name&gt;Abrirllave&lt;/name&gt;\n&lt;description&gt;Tutoriales de inform\u00e1tica.&lt;/description&gt;\n&lt;url&gt;http://www.abrirllave.com/&lt;/url&gt;\n&lt;/website&gt;\n&lt;website&gt;\n&lt;name&gt;Wikipedia&lt;/name&gt;\n&lt;description&gt;La enciclopedia libre.&lt;/description&gt;\n&lt;url&gt;http://www.wikipedia.org/&lt;/url&gt;\n&lt;/website&gt;\n&lt;website&gt;\n&lt;name&gt;W3C&lt;/name&gt;\n&lt;description&gt;World Wide Web Consortium.&lt;/description&gt;\n&lt;url&gt;http://www.w3.org/&lt;/url&gt;\n&lt;/website&gt;\n&lt;/bookmarks&gt;\n</code></pre> We need to create an XSD file to validate this XML document. </p> <p>The first step is to decide which kind of elements must be created. As the root element always contains elements we have to define it as a complex type.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n&lt;xs:element name=\"bookmarks\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"website\" minOccurs=\"1\" maxOccurs=\"unbounded\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;            &lt;xs:element name=\"name\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"description\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"url\" type=\"xs:anyURI\"/&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>"},{"location":"02-xml-scheme/0201-xml-scheme/#credits-and-bibliography","title":"Credits and bibliography","text":"<ul> <li>Refsnes Data. XML Schema Tutorial available at https://www.w3schools.com/xml/schema_intro.asp</li> <li>Carlos Pes. (Febrer de 2017). Lenguajes de Marcas y Sistemas de Gesti\u00f3n de Informaci\u00f3n (LMSGI)  available at Tutorial de LMSGI .</li> <li>Carlos Pes. Apuntes de XSD (XML Schema) available at https://www.abrirllave.com/xsd/apuntes-de-xsd.php.</li> <li>Xavier Sala. Definici\u00f3 d'esquemes i vocabulari available at https://ioc.xtec.cat/materials/FP/Recursos/fp_asx_m04_/web/fp_asx_m04_htmlindex/WebContent/u2/a2/continguts.html.</li> </ul>"},{"location":"02-xml-scheme/0202-content-syndication/","title":"An example of XML dialect: Content syndication","text":""},{"location":"02-xml-scheme/0202-content-syndication/#introduction","title":"Introduction","text":"<p>The syndication (or broadcasting) of web content is that a part of the content of a web page is made available to other sites or individual subscribers through a web channel, the most common used format is RSS, followed by the Atom. Computer programs that comply with any of these standards they periodically consult a file with several entries linking to the  full or partial articles on the original website. Unlike other media, web content broadcast rights are usually free, and do not usually intervene a contract between the parties but a licence rules.</p> <p></p>"},{"location":"02-xml-scheme/0202-content-syndication/#a-little-history","title":"A little history","text":"<p>As a web user, it is very important to get links from websites that interest you and store them. In such a way that you are able to get back to them quickly. If you wanted to follow the changes on the web pages the only way to do that it was to visit the website to check for news.</p> <p>The advent of what became known as Web 2.0 complicated things. The Web was filled with a large number of blogs and pages that published information, and visiting them all to see if there were any changes took a long time, and, in addition, it is very likely that pages have not changed. </p> <p>The advent of standard syndication systems made possible to obtain information  updates a website in a stable way through an specific address. Content syndication changed   the way the content is retrieved. You no longer had to look for information: it was the information that went to the user.</p> <p>By using syndication, user no longer needs to visit the pages that interest him to see  if there are any changes, because if there are any you will already receive them. This leads to savings of time, as you will not have to visit pages to discover that there are no changes.</p> <p>Another advantage that syndication brings is inherent in XML. Unlike of what happens with HTML, it is easy to interpret the content of the information that is received and therefore it will also be easy to be able to reuse the content to make others tasks.</p> <p>Although syndication is often seen as a system focused on detecting updates on the Web, it is also being used to keep updates in other fields. For example, some computer programs use RSS to find out if there are new versions or updates and thus keep the programs up to date.</p>"},{"location":"02-xml-scheme/0202-content-syndication/#content-syndication-today","title":"Content syndication today","text":"<p>At present, with the emergence of social networks and other technologies, the use of content syndication with standard formats has decreased and the content broadcasting has focused on posting on social media and the use of other sharing systems such as APIs.</p> <p>However, in the world of podcast, it continues to be used as an automatic way to share content.</p> <p>podcast</p> <p>A podcast is a radio, audio, or video file intended for podcasting.</p> <p>Podcasting refers to the technique for creating and broadcasting audio and video files over the Internet that allows the user to download them to their computer and listen to them  or see them whenever you want.</p>"},{"location":"02-xml-scheme/0202-content-syndication/#example-of-use","title":"Example of use","text":"Event 24h24l.org podcast RSS <p>Using a podcatcher we can download the new podcasts published.</p> <p>Adding the feed (name given to the list of items) shows us what's new that there is.</p> <p></p> <p>Once added, we are subscribed and the podcatcher will notify us of news.</p> <p> </p>"},{"location":"02-xml-scheme/0202-content-syndication/#structure-of-content-channels","title":"Structure of content channels","text":"<p>Web feeds allow programs to check if there are updates posted on a website.  To provide a web channel, the site owner may use specialized software (such as a  content management system) that publishes a list (or \"feed\") of articles or  recent content in a standardized automatic reading format.</p> <p>The channel can be downloaded through programs that use it, such as websites that distribute feed content, or through feed readers called aggregators that allow Internet users to subscribe to channels and view their content.</p> <p>A channel (feed) contains entries, which can be headlines, full-text articles, extracts, summaries, or links to content from a website along with various metadata.</p> <p>Next we will analyse the characteristics of the two standards, based on XML,  for creating content channels: RSS 2.0 and Atom 1.0.</p>"},{"location":"02-xml-scheme/0202-content-syndication/#rss-20","title":"RSS 2.0","text":"<p>RSS (RDF Site Summary or Really Simple Syndication) is a web feed (or feed) that allows users and applications access website updates in a format standardized and computer readable.</p> <p>It was developed by the RSS Advisory Board and its first version, RSS 0.90, appeared in March 1999. The latest version, 2.0, was released in March 2009.</p> <p>Info</p> <p>A standard XML file format ensures compatibility with many different machines / programs. RSS feeds also benefit users who want to receive timely updates  from favorite websites or add data from many sites.</p> <p>RSS is an XML dialect. The RSS format itself is relatively easy to read for both automated and human processes. An example feed can have content as follows:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;rss version=\"2.0\"&gt;\n&lt;channel&gt;\n&lt;title&gt;RSS Title&lt;/title&gt;\n&lt;description&gt; This is an example of an RSS feed&lt;/description&gt;\n&lt;link&gt;http://www.example.com/main.html&lt;/link&gt;\n&lt;copyright&gt;2020 Example.com All rights reserved&lt;/copyright&gt;\n&lt;lastBuildDate&gt;Mon, 06 Sep 2010 00:01:00 +0000&lt;/lastBuildDate&gt;\n&lt;pubDate&gt;Sun, 06 Sep 2009 16:20:00 +0000&lt;/pubDate&gt;\n&lt;ttl&gt;1800&lt;/ttl&gt;\n&lt;item&gt;\n&lt;title&gt;Example entry&lt;/title&gt;\n&lt;description&gt;Here is some text containing an interesting description.&lt;/description&gt;\n&lt;link&gt; http://www.example.com/blog/post/1&lt;/link&gt;\n&lt;guid isPermaLink = \"false\"&gt;7bd204c6-1655-4c27-aeee-53f933c5395f&lt;/guid&gt;\n&lt;pubDate&gt;Sun, 06 Sep 2009 16:20:00 +0000&lt;/pubDate&gt;\n&lt;/item&gt;\n&lt;/channel&gt;\n&lt;/rss&gt;\n</code></pre> <p>RSS feed tree diagram </p> <p>At the top level, an RSS document is a <code>&lt;rss&gt;</code> element, with an attribute  required called <code>version</code>, which specifies the RSS version it meets  the document.</p> <p>Subordinate to the <code>&lt;rss&gt;</code> element is a <code>&lt;channel&gt;</code> element that contains information about the channel (metadata) and its content in <code>&lt;item&gt;</code> elements.</p> <p>RSS 2.0 Specification</p> <p>For more details you can access the specification: RSS 2.0 Specification</p> <p>Info</p> <p>You can analise the RSS schema in this website: https://schemas.liquid-technologies.com/w3c/rss/2.0.1.9/?page=rss-2_0_1-rev9_xsd.html</p> <p>Despite the fact that there is not an official RSS schema, we can find some implementations like this: RSS 2.0.</p>"},{"location":"02-xml-scheme/0202-content-syndication/#atom","title":"Atom","text":"<p>The atom syndication format is an XML dialect used for web feeds.</p> <p>The Atom format was developed as an alternative to RSS. Ben Trott, defender of the new format that became Atom, believed that RSS had limitations and flaws, such as the lack of continuous innovation and its need to remain compatible, and that there were advantages in a new design.</p> <p>A document based on the Atom format has the following structure:</p> <pre><code>&lt;?xml version=\"1.0\" encoding = \"utf-8\"?&gt;\n&lt;feed xmlns = \"http://www.w3.org/2005/Atom\"&gt;\n&lt;title&gt; Example Feed &lt;/title&gt;\n&lt;subtitle&gt; A subtitle. &lt;/subtitle&gt;\n&lt;link href = \"http://example.org/feed/\" rel = \"self\" /&gt;\n&lt;link href = \"http://example.org/\" /&gt;\n&lt;id&gt; urn: uuid: 60a76c80-d399-11d9-b91C-0003939e0af6 &lt;/id&gt;\n&lt;updated&gt; 2003-12-13T18: 30: 02Z &lt;/updated&gt;\n&lt;entry&gt;\n&lt;title&gt; Atom-Powered Robots Run Amok &lt;/title&gt;\n&lt;link href = \"http://example.org/2003/12/13/atom03\" /&gt;\n&lt;link rel = \"alternate\" type = \"text / html\"\nhref = \"http://example.org/2003/12/13/atom03.html\" /&gt;\n&lt;link rel = \"edit\" href = \"http://example.org/2003/12/13/atom03/edit\" /&gt;\n&lt;id&gt; urn: uuid: 1225c695-cfb8-4ebb-aaaa-80da344efa6a &lt;/id&gt;\n&lt;updated&gt; 2003-12-13T18: 30: 02Z &lt;/updated&gt;\n&lt;summary&gt; Some text. &lt;/summary&gt;\n&lt;content type = \"xhtml\"&gt;\n&lt;div xmlns = \"http://www.w3.org/1999/xhtml\"&gt;\n&lt;p&gt; This is the entry content. &lt;/p&gt;\n&lt;/div&gt;\n&lt;/content&gt;\n&lt;author&gt;\n&lt;name&gt; John Doe &lt;/name&gt;\n&lt;email&gt; johndoe@example.com &lt;/email&gt;\n&lt;/author&gt;\n&lt;/entry&gt;\n&lt;/feed&gt;\n</code></pre> <p>For more details: RFC 4287 - The Atom Syndication Format</p> <p>Validation</p> <p>Since both RSS and Atom are XML documents, you will be able to check that they are correct using the same verification tools that are used in XML.</p> <p>Although it is possible to use XML validators, the most common is to do so serve specific programs to validate RSS and Atom such as the W3C Feed Validation Service  (validator.w3.org/feed)</p>"},{"location":"02-xml-scheme/0202-content-syndication/#credits-bibliography-and-webography","title":"Credits, bibliography and webography","text":"<ul> <li> <p>Col\u00b7laboradors de la Viquip\u00e8dia. Redifusi\u00f3 de continguts web [en l\u00ednia]. Viquip\u00e8dia, l'Enciclop\u00e8dia Lliure, 2019 [data de consulta: 15 de novembre del 2019]. Disponible en . </p> </li> <li> <p>Xavier Sala. Sindicaci\u00f3 de continguts available at https://ioc.xtec.cat/materials/FP/Recursos/fp_asx_m04_/web/fp_asx_m04_htmlindex/WebContent/u3/a1/continguts.html.</p> </li> </ul>"},{"location":"02-xml-scheme/0299-tasks/","title":"Tasks","text":"<ol> <li> <p><code>200SimpleElements</code>: For the following elements write their simple elements definitions.</p> <pre><code>&lt;city&gt;Roma&lt;/city&gt;\n&lt;birthday&gt;1996-12-18&lt;/birthday&gt;\n&lt;time&gt;18:29:45&lt;/time&gt;\n&lt;mark&gt;7.5&lt;/mark&gt;\n&lt;pass&gt;true&lt;/pass&gt;\n</code></pre> </li> <li> <p><code>201Fruits.xsd</code>: Given the following XML document</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;fruits&gt;\n&lt;item&gt;\n&lt;id&gt;1000&lt;/id&gt;\n&lt;name&gt;Apple&lt;/name&gt;\n&lt;price&gt;4&lt;/price&gt;\n&lt;quantity&gt;133&lt;/quantity&gt;\n&lt;/item&gt; &lt;item&gt;\n&lt;id&gt;1001&lt;/id&gt;\n&lt;name&gt;Apricot&lt;/name&gt;\n&lt;price&gt;5&lt;/price&gt;\n&lt;quantity&gt;175&lt;/quantity&gt;\n&lt;/item&gt; &lt;/fruits&gt;\n</code></pre> Create an XSD document to validate it. After that add some fruits and validate again. </p> <p>After that, modify the XSD file taking into account that the price must be greater than 0 and quantity musn't be negative.   </p> </li> <li> <p><code>202Catalog.xsd</code>: Given the following XML document</p> </li> </ol> <p><pre><code>&lt;catalog&gt;\n&lt;cd&gt;\n&lt;title&gt;Empire Burlesque&lt;/title&gt;\n&lt;artist&gt;Bob Dylan&lt;/artist&gt;        &lt;price&gt;10.90&lt;/price&gt;      &lt;date&gt;1985-05-01&lt;/date&gt;\n&lt;details&gt;\n&lt;company&gt;Columbia&lt;/company&gt;\n&lt;country&gt;USA&lt;/country&gt;\n&lt;/details&gt;\n&lt;/cd&gt;\n&lt;cd&gt;\n&lt;title&gt;Hide your heart&lt;/title&gt;\n&lt;artist&gt;Bonnie Tyler&lt;/artist&gt;\n&lt;price&gt;9.90&lt;/price&gt;\n&lt;date&gt;1988-06-20&lt;/date&gt;\n&lt;details&gt;\n&lt;company&gt;CBS Records&lt;/company&gt;\n&lt;country&gt;UK&lt;/country&gt;\n&lt;/details&gt;      &lt;/cd&gt; &lt;cd&gt;\n&lt;title&gt;Still got the blues&lt;/title&gt;\n&lt;artist&gt;Gary Moore&lt;/artist&gt;\n&lt;price&gt;10.20&lt;/price&gt;\n&lt;date&gt;1990-12-10&lt;/date&gt;\n&lt;details&gt;\n&lt;company&gt;RCA&lt;/company&gt;\n&lt;country&gt;USA&lt;/country&gt;\n&lt;/details&gt;\n&lt;/cd&gt;\n&lt;/catalog&gt;\n</code></pre>   Create an XSD document to validate it. After that add some cd and validate   again. </p> <p>Next, modify the XSD file taking into account that the price must be greater than 0 and    the date cannot be earlier than 1 January 1970.</p> <ol> <li> <p><code>203Card.xsd</code>: Given the following XML document</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;cards xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:noNamespaceSchemaLocation=\"203Cards.xsd\"&gt;\n&lt;card number=\"1\"&gt;\n&lt;name&gt;Ana Sanz Tin&lt;/name&gt;\n&lt;age&gt;22&lt;/age&gt;\n&lt;/card&gt;\n&lt;card number=\"2\"&gt;\n&lt;name&gt;Iker Rubio Mol&lt;/name&gt;\n&lt;age&gt;23&lt;/age&gt;\n&lt;/card&gt;\n&lt;/cards&gt;\n</code></pre> Create the <code>202Cards.xsd</code> file in order to validate it. </p> </li> <li> <p><code>203Card.xsd</code>: Modify the previous task by adding 3 restrictions:</p> <ol> <li><code>age</code> element must be greather than or equal to 18 amb less than 100.</li> <li><code>name</code> element can only contain alphabetic characters.    </li> <li><code>number</code> attribute must only contain positive integers.</li> </ol> </li> <li> <p><code>204Recipes.xml</code>: Given the following XSD file, create a valid XML document with at least two recipes.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n&lt;xs:element name=\"recipes\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"recipe\" maxOccurs=\"unbounded\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\" /&gt;\n&lt;xs:element name=\"photo\" type=\"xs:string\" minOccurs=\"0\" /&gt;\n&lt;xs:element name=\"ingredients\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"ingredient\" maxOccurs=\"unbounded\" type=\"xs:string\" /&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;xs:element name=\"method\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"step\" maxOccurs=\"unbounded\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:simpleContent&gt;\n&lt;xs:extension base=\"xs:string\"&gt;\n&lt;xs:attribute name=\"number\" type=\"xs:integer\" use=\"required\" /&gt;\n&lt;/xs:extension&gt;\n&lt;/xs:simpleContent&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre> </li> <li> <p><code>206Prices.xsd</code>: Triple-digit prices</p> <p>Given the following XML document:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;prices xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"prices.xsd\"&gt;\n&lt;price&gt;8&lt;/price&gt;\n&lt;price&gt;2.6&lt;/price&gt;\n&lt;price&gt;4.95&lt;/price&gt;\n&lt;price&gt;187&lt;/price&gt;\n&lt;/prices&gt;\n</code></pre>  Write the content of the \"prices.xsd\" file to validate it, bearing in mind that the \"price\" element can take as a value a number that contains a maximum of three digits and, of these, only two can be decimals. To do this, write a restriction that cannot be used by other elements and, on the other hand, make use of:</p> <ul> <li><code>xs:totalDigits</code> used to specify the maximum number of digits that a number can have, including decimals.</li> <li><code>xs:fractionDigits</code> used to specify the maximum number of decimal places that a number can have.</li> </ul> </li> <li> <p><code>207Players.xsd</code>. Given the following XML document:</p> <pre><code>&lt;?xml version=\"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;players xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"206Players.xsd\"&gt;\n&lt;player preferred_number=\"7\"&gt;\n&lt;name nickname=\"the bug\"&gt;Cristiano Ronaldo&lt;/name&gt;\n&lt;postion&gt;Left wing&lt;/postion&gt;\n&lt;community /&gt;\n&lt;/player&gt;\n&lt;player preferred_number=\"9\"&gt;\n&lt;name nickname=\"the bull\"&gt;Maxi G\u00f3mez&lt;/name&gt;\n&lt;postion&gt;Striker&lt;/postion&gt;  &lt;/player&gt;\n&lt;player preferred_number=\"10\"&gt;\n&lt;name nickname=\"the flea\"&gt;Lionel Messi&lt;/name&gt;\n&lt;postion&gt;Right wing&lt;/postion&gt;\n&lt;community /&gt;\n&lt;/player&gt;\n&lt;player preferred_number=\"8\"&gt;\n&lt;name&gt;Carlos Soler&lt;/name&gt;\n&lt;postion&gt;Right midfielder&lt;/postion&gt;\n&lt;community /&gt;\n&lt;/player&gt;\n&lt;/players&gt;    </code></pre> <p>Write an XSD file to validate it. After that, add 2 new records.</p> <p>In addition, you can define the position element as a <code>choice</code> element   in order to control the correctness of positions. You can find the name of positions in English at Soccer Positions: The Numbers, Player Roles &amp; Basic Formations</p> </li> <li> <p><code>208people.xsd</code>: Given the following XSD file \"people.xsd\".</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n&lt;xs:element name=\"people\"&gt;\n&lt;xs:complexType&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"person\" maxOccurs=\"unbounded\"&gt;\n&lt;xs:complexType mixed=\"true\"&gt;\n&lt;xs:sequence&gt;\n&lt;xs:element name=\"name\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"city\" type=\"xs:string\"/&gt;\n&lt;xs:element name=\"age\" type=\"xs:positiveInteger\"/&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre> Using the elements \"name\", \"city\" and \"age\", write a XML document that can be validate by \"people.xsd\" and that storages the following information:</p> <ul> <li>\"Eva lives in Paris and she is 25 years old.\"</li> <li>\"Giovanni lives in Florence and he is 26 years old.\"</li> </ul> </li> </ol>"},{"location":"02-xml-scheme/0299-tasks/#content-syndication","title":"Content syndication","text":"<ol> <li> <p>Using a RSS aggregator</p> <p>In the next task we will install an RSS aggregator and subscribe to some channels.</p> <ol> <li>Install the Firefox add-on: Feedbro.</li> <li>Access the add-on.</li> <li>Subscribe to the following channels:<ol> <li>The podcasts of the 24h24l.org event.</li> <li>The latest news from El Pa\u00eds</li> <li>The front page news of El Mundo.</li> <li>Check if any of the pages you consult regularly redistribute their contents. If so, subscribe to their channel.</li> </ol> </li> </ol> </li> <li> <p><code>222rssfeed.xml</code>. Creating an RSS feed </p> <p>You were the creator of the web <code>recipe-example.org</code> and you currently have in the main page the following content.</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang = \"ca\"&gt;\n&lt;head&gt;\n&lt;meta charset = \"UTF-8\"&gt;\n&lt;meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\"&gt;\n&lt;title&gt;Recipes&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;header&gt;\n&lt;h1&gt;Sample recipes &lt;/h1&gt;\n&lt;/header&gt;\n&lt;main&gt;\n&lt;article&gt;\n&lt;h2&gt;Baked rice&lt;/h2&gt;\n&lt;time datetime = \"2020-12-13 08:00:00\"&gt; Sunday, December 13\n    2020 &lt;/time&gt;\n&lt;p&gt; The peculiarity of this rice, as the name suggests, is\n    which is baked. I,\n    like paella and other Valencian rice dishes, it is also a\n    dish of popular origin, which in this case was made from\n    of the remains of the putxero. That's why among his\n    Ingredients are not missing chickpeas, pork chops and\n    sausage. This dish is especially typical in counties such as\n    la Costera, where it has been celebrated in X\u00e0tiva for a long time\n    a few years the National Baked Rice Contest. &lt;/p&gt;\n&lt;p&gt; &lt;a href=\"/2020/12/arros-al-forn.html\"&gt; Continue reading &lt;/a&gt; &lt;/p&gt;\n&lt;/article&gt;\n&lt;article&gt;\n&lt;h2&gt;Paella valenciana&lt;/h2&gt;\n&lt;time datetime=\"2020-04-06 13:20:00\"&gt; Monday, April 6,\n   2020 &lt;/time&gt;\n&lt;p&gt; The paella is the highest standard of Valencian cuisine and\n  probably also of the Spanish, due to its recognition\n  gastronomy worldwide. Its origin, like that of all\n  dishes of popular cuisine, derived from the conjunction of foods that\n  each family had at their disposal, especially in the area of\n  the orchard of Valencia, which was supplied with fresh vegetables.\n  In addition, it was formerly customary to raise chickens and rabbits for\n  to family use, therefore, if we add abundance to all this\n  of the rice cultivated in the Albufera, the result is this\n  genuinely Valencian dish that receives the name of the container in the\n  which is cooked. &lt;/p&gt;\n&lt;p&gt;&lt;a href=\"/2020/04/paella-valenciana.html\"&gt; Continue reading &lt;/a&gt; &lt;/p&gt;\n&lt;/article&gt;\n&lt;article&gt;\n&lt;h2&gt;Olleta&lt;/h2&gt;\n&lt;time datetime = \"2019-12-28 18:20:00\"&gt; Friday, December 28\n  2019 &lt;/time&gt;\n&lt;p&gt; L'olleta is the most representative dish in the mountain area\n  of Alicante and in the interior of Valencia. This is a succulent putxero,\n  similar to a broth stew but one of the most refined in all of Spain,\n  and for this reason it is recognized nationally. Its intense flavor\n  and fragrant derives from the aromatic fragrance of the sausages and,\n  once degreased, it reaches a sublime point. &lt;/p&gt;\n&lt;p&gt; &lt;a href=\"/2019/12/olleta.html\"&gt; Continue reading &lt;/a&gt; &lt;/p&gt;\n&lt;/article&gt;\n&lt;/main&gt;\n&lt;footer&gt;\n&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Create the RSS feed in version 2.0 so that users know when you post new recipes.</p> <p>Validate the file.</p> </li> <li> <p><code>223Ivoox</code>. Given the following IVOOX screenshot create by hand in your notebook an RSS feed that announces the three      podcast episodes.</p> <p></p> </li> </ol>"},{"location":"03-html/0300-intro/","title":"HyperText Markup Language","text":""},{"location":"03-html/0300-intro/#learning-outcomes","title":"Learning outcomes","text":"<ul> <li>Classify the markup languages \u200b\u200bof the web environment.</li> <li>Know the different sections that make up HTML documents.</li> <li>Create well-formed XHTML documents.</li> <li>Identify the differences between XHTML and HMTL.</li> <li>Recognize the use of XHTML in information management systems.</li> <li>Use tools to develop XHTML documents.</li> </ul>"},{"location":"03-html/0300-intro/#contents","title":"Contents","text":"<ol> <li>HTML: structure of a web page.</li> <li>Identification of HTML tags and attributes.</li> <li>XHTML: syntactic and structural differences with HTML.</li> <li>Advantages of XHTML over HTML.</li> <li>HTML and XHTML versions.</li> <li>HTML to XHTML conversion.</li> <li>Web design tools.</li> <li>Transmission of information through markup languages.</li> </ol>"},{"location":"03-html/0300-intro/#assessment-criteria","title":"Assessment criteria","text":"<ul> <li>Markup languages \u200b\u200brelated to the web and their versions  have been identified and classified.</li> <li>The structure of an HTML document has been analyzed and the sections that make it up have been identified.</li> <li>The functionality of the main tags and attributes of the HTML language have been recognized.</li> <li>The similarities and differences between HTML and XHTML languages \u200b\u200bhave been established.</li> <li>The use of XHTML in information management systems is recognized.</li> <li>Tools are used in the creation of web documents.</li> </ul>"},{"location":"03-html/0301-html/","title":"HyperText Markup Language","text":"<p>The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript. </p>"},{"location":"03-html/0301-html/#a-little-history","title":"A little history","text":"<ul> <li>In 1980, Tim Berners-Lee, a physicist at CERN, proposed and prototyped ENQUIRE, a system for CERN researchers to use and share documents. </li> <li>In 1989, Berners-Lee wrote a memo proposing an Internet-based hypertext system. </li> <li>Berners-Lee specified HTML and wrote the browser and server software in late 1990. </li> <li>The first publicly available description of HTML was a document called \"HTML Tags\", first mentioned on the Internet by Tim Berners-Lee in late 1991.</li> <li>Berners-Lee considered HTML to be an application of SGML. </li> <li>It was formally defined as such by the Internet Engineering Task Force (IETF) with the mid-1993 publication of the first proposal for an HTML specification, the \"Hypertext Markup Language (HTML)\" Internet Draft by Berners-Lee and Dan Connolly, which included an SGML Document type definition to define the grammar.</li> <li>The draft expired after six months, but was notable for its acknowledgment of the NCSA Mosaic browser's custom tag for embedding in-line images, reflecting the IETF's philosophy of basing standards on successful prototypes.</li> <li>Similarly, Dave Raggett's competing Internet-Draft, \"HTML+ (Hypertext Markup Format)\", from late 1993, suggested standardizing already-implemented features like tables and fill-out forms.</li> <li>After the HTML and HTML+ drafts expired in early 1994, the IETF created an HTML Working Group, which in 1995 completed \"HTML 2.0\", the first HTML specification intended to be treated as a standard against which future implementations should be based.</li> <li>Further development under the auspices of the IETF was stalled by competing interests. Since 1996, the HTML specifications have been maintained, with input from commercial software vendors, by the World Wide Web Consortium (W3C).</li> <li>However, in 2000, HTML also became an international standard (ISO/IEC 15445:2000). </li> <li>HTML 4.01 was published in late 1999, with further errata published through 2001. </li> <li>In 2004, development began on HTML5 in the Web Hypertext Application Technology Working Group (WHATWG), which became a joint deliverable with the W3C in 2008, and completed and standardized on 28 October 2014.</li> <li>In July 2012, WHATWG and W3C decided on a degree of separation. W3C will continue the HTML5 specification work, focusing on a single definitive standard, which is considered as a \"snapshot\" by WHATWG. The WHATWG organization will continue its work with HTML5 as a \"Living Standard\". The concept of a living standard is that it is never complete and is always being updated and improved. New features can be added but functionality will not be removed.</li> <li>On 28 May 2019, the W3C announced that WHATWG would be the sole publisher of the HTML and DOM standards.The W3C and WHATWG had been publishing competing standards since 2012. While the W3C standard was identical to the WHATWG in 2007 the standards have since progressively diverged due to different design decisions. The WHATWG \"Living Standard\" had been the de facto web standard for some time.</li> </ul>"},{"location":"03-html/0301-html/#html-and-browsers-timeline","title":"HTML and browsers timeline","text":""},{"location":"03-html/0301-html/#html-5","title":"HTML 5","text":"<ul> <li>2011 HTML5 \u2013 Last Call</li> <li>2012 HTML5 \u2013 Candidate Recommendation</li> <li>2014 HTML5 \u2013 Proposed Recommendation and Recommendation</li> <li>2016 HTML 5.1 - Published as a W3C Recommendation.</li> <li>2017 HTML 5.2 - Published as a W3C Recommendation.</li> <li>Currently the standard is maintained by WHATWG and it is known as a \"living standard\"</li> </ul>"},{"location":"03-html/0301-html/#html-401-vs-xhtml-11","title":"HTML 4.01 vs XHTML 1.1","text":""},{"location":"03-html/0301-html/#html-5-vs-xhtml5","title":"HTML 5 vs (X)HTML5","text":""},{"location":"03-html/0301-html/#what-is-the-web-and-how-does-it-work","title":"\ud83d\udcf9 What is \"The Web\" and how does it work?","text":"<p>https://www.youtube.com/watch?v=O_GWbkXIqEY&amp;list=PLo3w8EB99pqLEopnunz-dOOBJ8t-Wgt2g&amp;index=1</p>"},{"location":"03-html/0301-html/#whats-html-and-how-does-it-work","title":"\ud83d\udcf9 What's HTML and how does it work?","text":"<ul> <li>https://www.youtube.com/watch?v=PORRrz3Y8Vc&amp;list=PLo3w8EB99pqLEopnunz-dOOBJ8t-Wgt2g&amp;index=2</li> </ul>"},{"location":"03-html/0301-html/#related-contents-in-mdn","title":"Related contents in MDN","text":"<ol> <li>Getting started with the web</li> <li>Introduction to HTML</li> <li>Multimedia and embedding</li> <li>HTML Tables</li> <li>Web forms \u2014 Working with user data. Only the five first sections.</li> </ol>"},{"location":"03-html/0301-html/#tasks","title":"Tasks","text":"<ol> <li> <p><code>301-letter.html</code> Before doing this task you must have worked through the sections in the prerequisites box.  https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter</p> </li> <li> <p><code>302-webpagestructure.html</code>: Before doing this task you must have worked through the sections in the prerequisites box https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content</p> </li> <li> <p><code>303-mozilla-splash.zip</code>: Before doing this task you must have worked through the sections in the prerequisites box  https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page</p> </li> <li> <p><code>304-planet-table.html</code>: Before doing this task you must have worked through the sections in the prerequisites box  https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Structuring_planet_data</p> </li> <li> <p><code>305-webform.html</code>: Before doing this task you must have worked through the sections in the prerequisites box (see on Aules).</p> </li> <li> <p>Review the HTML elements used in the Marking up a letter task. In the notebook, in two columns, indicate which elements are block elements and which are inline.</p> </li> <li> <p>Copy in your notebook the basic web page structure (only elements) from task 302 in your notebook. Annote the meaning of each element.</p> </li> <li> <p>Write in your notebook the basic structure of responsive images, video and picture with at least two different sources.</p> </li> <li> <p>Write in your notebook the basic structure of a table, including caption, header, body and footer. At least with two columns.  </p> </li> </ol>"},{"location":"03-html/0301-html/#credits-bibliography-and-webography","title":"Credits, bibliography and webography","text":"<ul> <li> <p>Wikipedia contributors. (2021, October 22). HTML. In Wikipedia, The Free Encyclopedia. Retrieved 17:43, October 22, 2021, from https://en.wikipedia.org/w/index.php?title=HTML&amp;oldid=1051291322 </p> </li> <li> <p>Karl Dubost (2008, January 15). HTML 5, one vocabulary, two serializations. Retrieved 16:00 October 22, 2021 https://www.w3.org/blog/2008/01/html5-is-html-and-xml/</p> </li> </ul>"},{"location":"04-css/04-01-css/","title":"Cascading Style Sheets","text":"Learning outcomes <ul> <li>Identify the advantages of applying Cascading Style Sheets.</li> <li>Apply Cascading Style Sheets.</li> <li>Create websites by separating content from presentation.</li> <li>Learn techniques to content layout</li> </ul> Contents <ol> <li>Introduction to Cascading Style Sheets.</li> <li>Types of Cascading Style Sheets.</li> <li>Generic structure of a CSS document</li> <li>Rules of style</li> <li>Selection criteria, properties and values.</li> <li>Inheritance and precedence.</li> <li>Box model.</li> <li>Flexible box model.</li> <li>Grids with CSS   </li> </ol> Assessment criteria <ul> <li>The advantages of using style sheets have been identified.</li> <li>Style sheets have been applied.</li> <li>The rules of style have been understood.</li> <li>Layouts have been designed using the flexible box and grid model</li> </ul>"},{"location":"04-css/04-01-css/#introduction","title":"Introduction","text":"<ul> <li>CSS Introduction</li> </ul>"},{"location":"04-css/04-01-css/#syntax","title":"Syntax","text":"<ul> <li>CSS Syntax</li> </ul>"},{"location":"04-css/04-01-css/#selectors","title":"Selectors","text":"<ul> <li>CSS Selectors</li> </ul> <p>Games </p> <ul> <li>CSS Diner - Where we feast on CSS Selectors! </li> <li>CSS Leveler </li> <li>Gues CSS! </li> </ul>"},{"location":"04-css/04-01-css/#how-to-add-css","title":"How to add CSS","text":"<ul> <li>How to add CSS</li> </ul>"},{"location":"04-css/04-01-css/#comments","title":"Comments","text":"<ul> <li>CSS Comments</li> </ul>"},{"location":"04-css/04-01-css/#colors","title":"Colors","text":"<ul> <li>CSS Colors</li> </ul>"},{"location":"04-css/04-01-css/#backgrounds","title":"Backgrounds","text":"<ul> <li>CSS Backgrounds</li> </ul>"},{"location":"04-css/04-01-css/#box-model","title":"Box Model","text":"<ul> <li>CSS Box Model</li> <li>CSS Border</li> <li>CSS Margin</li> <li>CSS Padding</li> </ul> <p>Additional resources:</p> <ul> <li>CSS Box Model explained with examples by Freecodecamp</li> <li>CSS Battle</li> <li>The box model by MDN</li> </ul>"},{"location":"04-css/04-01-css/#text-and-fonts","title":"Text and fonts","text":"<ul> <li>CSS Text</li> <li>CSS Fonts</li> </ul>"},{"location":"04-css/04-01-css/#layout-float-and-clear","title":"Layout - float and clear","text":"<ul> <li>Layout - float and clear</li> <li>Float on MDN</li> <li>Float skills on MDN</li> </ul>"},{"location":"04-css/04-01-css/#additional-resources","title":"Additional resources","text":"<ul> <li>Mozilla Firefox add-on: Pixel Perfect Pro helps developers and designers to make best sites and more high quality products.</li> <li>CSS 3 cheat sheet</li> </ul>"},{"location":"04-css/04-02-css-layout/","title":"An introduction to CSS layout","text":"<p>CSS page layout techniques allow us to take elements contained in a web page and control where they're positioned relative to the following factors: their default position in normal layout flow, the other elements around them, their parent container, and the main viewport/window. The page layout techniques we'll be covering in more detail in this module are:</p> <ul> <li>Normal flow</li> <li>The display property</li> <li>Flexbox</li> <li>Grid</li> <li>Floats</li> <li>Positioning</li> <li>Table layout</li> <li>Multiple-column layout</li> </ul>"},{"location":"04-css/04-02-css-layout/#learning-resources","title":"Learning resources","text":"<ul> <li>Introduction to CSS layout at MDN</li> <li>Flexbox</li> </ul>"},{"location":"04-css/04-02-css-layout/#more-resources","title":"More resources","text":"<ul> <li>CSS tricks</li> <li>Flexbox - The Ultimate CSS Flex Cheatsheet (with animated diagrams!)</li> <li>Flexbox Defense is a game to learn Flebox.</li> <li>Flexbox Froggy is a game to learn Flexbox.</li> <li>Flexyboxes is an app that allows you to see code samples and change parameters to see how Flexbox works visually.</li> <li>Flexbox Patterns is a website that shows off a bunch of Flexbox examples.</li> <li>Flex Box Adventure is a game to learn Flexbox.</li> </ul>"},{"location":"04-css/04-99-tasks/","title":"Activities","text":"<ol> <li> <p><code>401-html-css</code>. Given the following html file HTML 5 and CSS 3 create an stylesheet in order to make the html file looks like the screenshot taking into account that the body width is 700px.</p> <p>After that, choose from Google Fonts:</p> <ul> <li>a sans serif font for the headings</li> <li>a serif font for the body.</li> </ul> </li> <li> <p><code>402-html-css</code>. Given the following html file HTML 5 and CSS 3 vs. 2 create an stylesheet in order to create a perfect match with the provided screenshot. Use the Firefox extension Pixel Perfect Pro.</p> <p>The required fonts are included in the HTML file and they are:</p> <ul> <li><code>Noto Sans</code></li> <li><code>Noto Serif</code></li> <li><code>Noto Sans Mono</code>.</li> </ul> <p>Upload the project in a zip file including a screenshot of the resulting page with Pixel Perfect Pro activated.</p> </li> <li> <p><code>403-playing-with-boxes</code>. Given the following html file Playing with boxes create an stylesheet in order to create a match as similar as possible with the provided screenshot. Use the Firefox extension Pixel Perfect Pro to compare.</p> <p>These are the basic requirements:</p> <ul> <li>HTML file cannot be modified.</li> <li>The <code>body</code> element will have a width of 700px.</li> <li>The four <code>div</code> elements will have a width of 250px.</li> <li>In the CSS file, add a comment, at the begining with your full name.</li> <li>You have to deliver two files: an screenshot of the pixel perfect comparison and the css file.            </li> </ul> </li> <li> <p><code>404-landing-page</code>. Given the following html file Landing page create an stylesheet in order to create a match as similar as possible with the provided screenshot. Use the Firefox extension Pixel Perfect Pro to compare.</p> <p>These are the basic requirements:     </p> <ul> <li>The HTML file can be modified to add images or class selectors.</li> <li>You have to deliver a zip file with the entire website.</li> </ul> </li> <li> <p><code>405-landing-page-columns</code>. Modify the previous task in order to display the services in columns. Use Pixel Perfect Pro to compare the resulting page.</p> </li> <li> <p><code>406-fundamental-layout-comprehension</code>. Do the following task Fundamental layout comprehension resolving it using the Float and Flexbox.</p> </li> </ol>"},{"location":"05-handling-storage-xml-documents/0500-intro/","title":"Handling and Storage of XML Documents","text":"Goals <ul> <li>Recognize the need for converting XML documents.</li> <li>Determine the areas of application.</li> <li>Analyse the involved technologies and how they work.</li> <li>Explain the specific syntax used in converting and adapting XML documents.</li> <li>Create conversion specifications.</li> <li>Identify and characterize specific tools related to converting XML documents.</li> <li>Perform conversions in different output formats.</li> <li>Document and debug conversion specifications.</li> <li>Identify the main methods for storing information in XML documents.</li> <li>Recognize the disadvantages of storing information in XML format.</li> <li>Use relational database management systems for storing XML-formatted information.</li> <li>Use specific techniques to create XML documents from information stored in relational databases.</li> <li>Identify the characteristics of native XML database management systems.</li> <li>Use techniques to manage information stored in native XML databases.</li> <li>Identify languages and tools for processing and storing information and incorporating it into XML documents.</li> <li>Identify the main methods of storing information used in XML documents.</li> <li>Identify the drawbacks of storing information in XML format.</li> <li>Use relational database management systems in the storage of information in XML format.</li> <li>Use specific techniques to create XML documents from information stored in relational databases.</li> <li>Identify the characteristics of native XML database management systems.</li> <li>Use techniques to manage information stored in native XML databases.</li> <li>Identify languages and tools for processing and storing information and including it in XML documents.</li> </ul> Assessment criteria <ol> <li>The need for converting XML documents has been recognized.</li> <li>The areas of application have been established.</li> <li>The involved technologies have been analysed and their mode of operation has been understood.</li> <li>The specific syntax used in converting and adapting XML documents has been described.</li> <li>Conversion specifications have been created.</li> <li>Specific tools related to converting XML documents have been identified and characterized.</li> <li>Conversions have been performed in different output formats.</li> <li>Conversion specifications have been documented and debugged.</li> <li>The main methods for storing information in XML documents have been identified.</li> <li>The disadvantages of storing information in XML format have been recognized.</li> <li>Efficient storage technologies for information have been established based on their characteristics.</li> <li>Relational database management systems have been used for storing XML-formatted information.</li> <li>Specific techniques have been used to create XML documents from information stored in relational databases.</li> <li>The characteristics of native XML database management systems have been identified.</li> <li>Analysed systems and native XML database systems have been installed.</li> <li>Techniques have been used to manage information stored in native XML databases.</li> <li>Languages and tools for processing and storing information and incorporating it into XML documents have been identified.</li> </ol> <p>In this lesson, we will learn how to handle XML documents. We will learn how to change  XML documents into different kinds of documents or how to rearrange them.   We will also learn how to store XML data in databases, like in a relational   database system or a native database.</p> <p>XML is mainly used for storing and exchanging information, but sometimes it needs to be transformed  so that it can be read by people or specific programs more easily. There are 3 ways to do this: </p> <ol> <li>Create a program that converts the XML into a more readable format, </li> <li>Use CSS to change the way the document is displayed, </li> <li>Change the document into a format that is designed for viewing, like PDF, HTML, XHTML, etc.</li> </ol> <p>In the following example an CSS file are applied in order to change the way an XML document is shown in a browser:</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;?xml-stylesheet href=\"sample.css\"?&gt;\n&lt;professor&gt;\n&lt;nom&gt;Marcel&lt;/nom&gt;\n&lt;cognom&gt;Garcia&lt;/cognom&gt;\n&lt;departament&gt;Departament d'Inform\u00e0tica&lt;/departament&gt;\n&lt;carrecs&gt;\n&lt;carrec&gt;Cap de Departament&lt;/carrec&gt;\n&lt;carrec&gt;Tutor&lt;/carrec&gt;\n&lt;/carrecs&gt;\n&lt;/professor&gt;\n</code></pre> <pre><code>professor { padding: 30px;\nmargin: 30px;\nborder: 4px black solid;\nwidth: 40%; }\nnom,cognom { font-size: 30px; }\ndepartament { padding-top: 20px; display:block;\nfont-weight:bold;\n}\ncarrec { font-style: italic;\npadding-left:10px; }\ncarrec:after { content:\",\"; }\n</code></pre> <p>The resulting page will be similar to:</p> <p></p> <p>To make XML more readable for humans, CSS can be used. But CSS has some limitations:</p> <ul> <li>We can't change the order of information</li> <li>It's difficult to show some attributes</li> <li>Can't do any new calculations or data processing</li> <li>Can't format data for printing easily.</li> </ul> <p>CSS only changes how the document looks, not what the document is. If we want to change the document, CSS is not helpful.</p>"},{"location":"05-handling-storage-xml-documents/0500-intro/#conversion-and-adaptation-of-xml-documents","title":"Conversion and adaptation of XML documents","text":"<p>The W3C created a generalization of CSS style sheets called XSL (eXtensible Stylesheet Language). XSL is a language used to format and transform XML documents into other formats, like HTML or PDF, to make them easier to read. XSL is like a set of instructions for the computer to follow to change an XML document into a new, readable format. The W3C has developed three languages:</p> <ul> <li>XPath: A language for referring to parts of an XML document.</li> <li>XSLT (XSL Transformation, ie XSL Transformations): a language for transforming XML documents.</li> <li>XSL-FO (XSL Formatting Objects): a language for specifying the format of an XML document and converting it to PDF or PostScript.</li> </ul> <p></p>"},{"location":"05-handling-storage-xml-documents/0500-intro/#bibliography-webography-and-credits","title":"Bibliography, webography and credits","text":"<ul> <li>Bartolom\u00e9 Sint\u00e9s Marco. (2022, January 30). XPath: XML Path language, available at  https://www.mclibre.org/consultar/xml/lecciones/xml-xpath.html</li> </ul>"},{"location":"05-handling-storage-xml-documents/0501-xpath/","title":"XPath","text":"<p>XPath is a simple language for identifying parts of an XML document that are of interest.  It is used by XSLT, and also by XLink; it is extended considerably by XQuery.</p> <p>XLink</p> <p>XLink is used to create hyperlinks in XML documents.</p> <p>XPath cannot be used stand-alone: it is always used in the context of a host language, whether that language is XSLT, Python, PHP, C#, JavaScript...</p> <p>XPath can be very powerful: for example, to find all <code>div</code> elements that have a class attribute called <code>sock</code> with a <code>span</code> child whose class attribute is equal to <code>colour</code>, one might write,</p> <pre><code>div[@class=\"sock\"]/span[@class=\"colour\"]\n</code></pre> <p>XPath uses a path notation (as in URLs) for navigating through the hierarchical structure of an XML document. It uses a non-XML syntax so that it can be used in URIs and XML attribute values.</p> <p>XPath 3.1 became a Recommendation on 21 March 2017.</p>"},{"location":"05-handling-storage-xml-documents/0501-xpath/#document-tree","title":"Document tree","text":"<p>XPath treat XML documents as trees of nodes. The topmost element of the tree is called the root element:</p> <p> </p>"},{"location":"05-handling-storage-xml-documents/0501-xpath/#node-types","title":"Node types","text":"<p>In XPath, nodes can include more than just elements. There are seven types of nodes.</p> <ol> <li>root element</li> <li>elements</li> <li>attributes</li> <li>text nodes</li> <li>namespaces</li> <li>processing instructions</li> <li>comments</li> </ol>"},{"location":"05-handling-storage-xml-documents/0501-xpath/#xpath-expression-syntax","title":"XPath expression syntax","text":"<p>XPath expressions are written in text and describe the path you want to follow. To use XPath, the document must be well-structured. There are two ways to write XPath expressions: shorthand, which is simpler and easier to understand, and full syntax, which is more complex but has more options. We will learn the first one.</p> <p>When you evaluate an XPath expression, the system will look for nodes in the document that match the path you described. The result of the evaluation will be all the nodes that match the path. An XPath expression can be divided into search steps, each of which has three parts:</p> <ol> <li>The axis, which determines if you are looking for element or attribute nodes based on their names.</li> <li>The predicate, which restricts the axis selection to nodes that meet certain conditions.</li> <li>The node selection, which chooses the elements or text contained in the selected nodes.</li> </ol>"},{"location":"05-handling-storage-xml-documents/0501-xpath/#xml-sample","title":"XML sample","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;library&gt;\n&lt;book&gt;\n&lt;title&gt;Life is Elsewhere&lt;/title&gt;\n&lt;author&gt;Milan Kundera&lt;/author&gt;\n&lt;publicationDate year=\"1973\"/&gt;\n&lt;/book&gt;\n&lt;book&gt;\n&lt;title&gt;Pantaleon and the Visitors&lt;/title&gt;\n&lt;author birthDate=\"03/28/1936\"&gt;Mario Vargas Llosa&lt;/author&gt;\n&lt;publicationDate year=\"1973\"/&gt;\n&lt;/book&gt;\n&lt;book&gt;\n&lt;title&gt;Conversation in the Cathedral&lt;/title&gt;\n&lt;author birthDate=\"03/28/1936\"&gt;Mario Vargas Llosa&lt;/author&gt;\n&lt;publicationDate year=\"1969\"/&gt;\n&lt;/book&gt;\n&lt;/library&gt;\n</code></pre> Node tree representation of the above XML document"},{"location":"05-handling-storage-xml-documents/0501-xpath/#axis","title":"Axis","text":"<p>The axis allows us to select a subset of nodes. Element nodes are indicated by the element name. Attribute nodes are indicated by <code>@</code> and the name.</p> <p><code>/</code>: at the beginning of the expression, indicates the root node, otherwise indicates \"child\". It must be followed by the name of an element or attribute.</p> <p><code>/biblioteca/libro/autor</code></p> <pre><code>&lt;autor&gt;Milan Kundera&lt;/autor&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n</code></pre> <p><code>/autor</code></p> <pre><code>Returns nothing because &lt;author&gt; is not a child of the root node.\n</code></pre> <p><code>/biblioteca/autor</code></p> <pre><code>Returns nothing because &lt;author&gt; is not a child of &lt;biblioteca&gt;.\n</code></pre> <p><code>/biblioteca/libro/autor/@fechaNacimiento</code></p> <pre><code> fechaNacimiento=\"28/03/1936\"\n fechaNacimiento=\"28/03/1936\"\n</code></pre> <p><code>/biblioteca/libro/@fechaNacimiento</code></p> <pre><code>Returns nothing because fechaNacimiento is an attribute of &lt;author&gt; not of &lt;libro&gt;.\n</code></pre> <p><code>//</code>: indicates \"descendant\" (children, children of children, etc.).</p> <p><code>/biblioteca//autor</code></p> <pre><code>&lt;autor&gt;Milan Kundera&lt;/autor&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n</code></pre> <p><code>//autor</code></p> <pre><code>&lt;autor&gt;Milan Kundera&lt;/autor&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n</code></pre> <p><code>//autor//libro</code></p> <pre><code>Returns nothing because &lt;libro&gt; is not a child of &lt;autor&gt;.\n</code></pre> <ul> <li><code>/..</code>: indicates the parent element.</li> </ul> <p><code>//@a\u00f1o</code></p> <pre><code> a\u00f1o=\"1973\"\n a\u00f1o=\"1973\"\n a\u00f1o=\"1969\"\n</code></pre> <p><code>/biblioteca/libro/autor/@fechaNacimiento/..</code></p> <pre><code>&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n</code></pre> <p><code>//@fechaNacimiento/../..</code></p> <pre><code>&lt;libro&gt;\n&lt;titulo&gt;Pantale\u00f3n y las visitadoras&lt;/titulo&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n&lt;fechaPublicacion a\u00f1o=\"1973\"/&gt;\n&lt;/libro&gt;\n&lt;libro&gt;\n&lt;titulo&gt;Conversaci\u00f3n en la catedral&lt;/titulo&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n&lt;fechaPublicacion a\u00f1o=\"1969\"/&gt;\n&lt;/libro&gt;\n</code></pre> <ul> <li><code>|</code>: allows to indicate several routes.</li> </ul> <p><code>//autor|//titulo</code></p> <pre><code>&lt;titulo&gt;La vida est\u00e1 en otra parte&lt;/titulo&gt;\n&lt;autor&gt;Milan Kundera&lt;/autor&gt;\n&lt;titulo&gt;Pantale\u00f3n y las visitadoras&lt;/titulo&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n&lt;titulo&gt;Conversaci\u00f3n en la catedral&lt;/titulo&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\n</code></pre> <p><code>//autor|//titulo|//@a\u00f1o</code></p> <pre><code>&lt;titulo&gt;La vida est\u00e1 en otra parte&lt;/titulo&gt;\n&lt;autor&gt;Milan Kundera&lt;/autor&gt;\na\u00f1o=\"1973\"\n&lt;titulo&gt;Pantale\u00f3n y las visitadoras&lt;/titulo&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\na\u00f1o=\"1973\"\n&lt;titulo&gt;Conversaci\u00f3n en la catedral&lt;/titulo&gt;\n&lt;autor fechaNacimiento=\"28/03/1936\"&gt;Mario Vargas Llosa&lt;/autor&gt;\na\u00f1o=\"1969\"\n</code></pre>"},{"location":"05-handling-storage-xml-documents/0501-xpath/#predicate","title":"Predicate","text":"<p>The predicate is written in square brackets, following the axis.</p> <p>If the axis has selected some nodes, the predicate allows you to restrict that selection to those that meet certain conditions.</p> <ul> <li><code>[@attribute]</code>: select the elements that have the attribute.</li> <li><code>[number]</code>: if there are several results, select one of them by order number; <code>last()</code> selects the last one.</li> <li><code>[condition]</code>: select the nodes that meet the condition.</li> </ul>"},{"location":"05-handling-storage-xml-documents/0501-xpath/#conditions","title":"Conditions","text":"<p>Predicates allow you to define conditions on attribute values. The following operators can be used in the conditions:</p> <ul> <li>logical operators: and, or, not()</li> <li>arithmetic operators: +, -, *, div, mod</li> <li>comparison operators: =, !=, &lt;, &gt;, &lt;=, &gt;= </li> </ul> <pre><code>//fechaPublicacion[@a\u00f1o&gt;1970]\n\n//libro[autor=\"Mario Vargas Llosa\"]\n\n//@a\u00f1o[.&gt;1970]\n\n//autor[.=\"Mario Vargas Llosa\"]\n\n//libro[autor=\"Mario Vargas Llosa\" and fechaPublicacion/@a\u00f1o=\"1973\"]\n\n//libro[autor=\"Mario Vargas Llosa\" and fechaPublicacion/@a\u00f1o=\"1973\"]\n</code></pre>"},{"location":"05-handling-storage-xml-documents/0501-xpath/#node-selection","title":"Node selection","text":"<p>The node selection is written after the axis and the predicate. If the axis and the predicate have selected some nodes, the selection of nodes indicates what part of those nodes we keep.</p> <ul> <li><code>/node()</code>: Select all children (elements or text) of the node.</li> <li> <p><code>//node()</code>: Select all descendants (elements or text) of the node.</p> </li> <li> <p><code>/text()</code>: Select only the text contained in the node.</p> </li> <li><code>//text()</code>: Select only the text contained in the node and all its descendants.</li> <li><code>/*</code>: Select all children (elements only) of the node.</li> <li><code>//*</code>: Select all descendants (elements only) of the node.</li> <li><code>/@*</code>: Select all attributes of the node.</li> <li><code>//@*</code>: Select all attributes of the node's descendants.</li> </ul> <p></p>    A node tree sample"},{"location":"05-handling-storage-xml-documents/0501-xpath/#tools","title":"Tools","text":"<p>To evaluate XPath expressions we can use <code>xmllint --xpath expr</code> or VSCode extension: XSLT/XPath for Visual Studio Code.</p>"},{"location":"05-handling-storage-xml-documents/0501-xpath/#bibliography-webography-and-credits","title":"Bibliography, webography and credits","text":"<ul> <li>Bartolom\u00e9 Sint\u00e9s Marco. (2022, January 30). XPath: XML Path language, available at  https://www.mclibre.org/consultar/xml/lecciones/xml-xpath.html</li> </ul>"},{"location":"05-handling-storage-xml-documents/0502-xslt/","title":"XSLT","text":"<p>XSLT (Extensible Stylesheet Language for Transformations) is a language used to  change the way XML information is shown. It takes the structure of XML elements  and converts it into a different type of document.</p> <p>The W3C, which is the organization behind the internet, recommends XSLT, just  like it recommends CSS. However, XSLT is more powerful and can do more  things than CSS.</p> <p>With XSLT, you can completely change the structure of a document,  rearrange information, add new information, make decisions  based on the information in the document, and even do calculations.</p> <p>To work properly, XSLT uses other XML technologies such as XPath and  XML Schemas. XPath helps decide which templates to use and XML Schemas defines the data types.</p> <p>XSLT templates are often used to create custom views of an XML document  to be viewed on different devices like printers, computers, or smartphones.  All you need is the original XML document and XSLT can create the other  views as needed.</p> <p>One limitation of XSLT is that the input document must always be in XML format,  even though the output can be in any format like text, HTML, or XML.</p>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#xslt-transformation","title":"XSLT - Transformation","text":"<p>XSLT is a declarative language. Therefore, XSLT stylesheets are not written  as a sequence of instructions, but as a collection of template rules.  Each template sets how a particular element is transformed  (defined by XPath expressions). The document is transformed as follows:</p> <ol> <li>The processor scans the document and builds the document tree.</li> <li>The processor traverses the document tree from the root node.</li> <li>On each node traversed, the processor may or may not apply a template:<ul> <li>If no template can be applied to a node, its contents are included in the final document (the text of the node, not the text of the descending nodes). The processor then traverses its child nodes.</li> <li>If a template can be applied to a node, the template is applied. The template can generate text that is included in the final document. In principle, the processor does not traverse its child nodes, unless the template tells the processor that the child nodes should be traversed.</li> </ul> </li> <li>When the processor has traversed the tree, the transformation is complete.</li> </ol> <p>More information at XSLT Tutorial at W3Schools</p>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#how-to-display-transformations","title":"How to display transformations","text":"<p>We have several options:</p> <ol> <li>By adding a reference to the XSL stylesheet in the XML document and open it from a live server.</li> <li>By using a VSCode extension like XML extension by Red Hat.</li> <li>By using a CLI command like <code>xsltproc</code>.</li> </ol>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#xslt-elements","title":"XSLT elements","text":"<p>Our samples are based on this template:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;library&gt;\n&lt;book&gt;\n&lt;title&gt;Life is Elsewhere&lt;/title&gt;\n&lt;author&gt;Milan Kundera&lt;/author&gt;\n&lt;publicationDate year=\"1973\"/&gt;\n&lt;/book&gt;\n&lt;book&gt;\n&lt;title&gt;Pantaleon and the Visitors&lt;/title&gt;\n&lt;author birthDate=\"03/28/1936\"&gt;Mario Vargas Llosa&lt;/author&gt;\n&lt;publicationDate year=\"1973\"/&gt;\n&lt;/book&gt;\n&lt;book&gt;\n&lt;title&gt;Conversation in the Cathedral&lt;/title&gt;\n&lt;author birthDate=\"03/28/1936\"&gt;Mario Vargas Llosa&lt;/author&gt;\n&lt;publicationDate year=\"1969\"/&gt;\n&lt;/book&gt;\n&lt;/library&gt;\n</code></pre>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#xslstylesheet","title":"<code>xsl:stylesheet</code>","text":"<p>This element serves as the root element of an XSLT stylesheet, and it contains  the XSLT instructions for transforming the source XML document.</p>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#xsltemplate","title":"<code>xsl:template</code>","text":"<p>This element defines a template rule that specifies how a particular part of  the source XML document should be transformed.</p>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#xslapply-templates","title":"<code>xsl:apply-templates</code>","text":"<p>This element tells the XSLT processor to continue processing childs of current element.</p>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#xslvalue-of","title":"<code>xsl:value-of</code>","text":"<p>This element is used to insert the value of a specified element or attribute into the result tree.</p> <p>Here's a basic XSLT example that transforms the XML document into an HTML table,  displaying the title, author, and publication year of each book:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n&lt;xsl:template match=\"/\"&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;th&gt;Title&lt;/th&gt;\n&lt;th&gt;Author&lt;/th&gt;\n&lt;th&gt;Publication Year&lt;/th&gt;\n&lt;/tr&gt;\n&lt;xsl:apply-templates /&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template match=\"book\"&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;xsl:value-of select=\"title\" /&gt;&lt;/td&gt;\n&lt;td&gt;&lt;xsl:value-of select=\"author\" /&gt;&lt;/td&gt;\n&lt;td&gt;&lt;xsl:value-of select=\"publicationDate/@year\" /&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre> In this XSLT stylesheet, the first template rule uses <code>xsl:apply-templates</code> to force the processing of child nodes. The second template rule matches the book elements and defines how to transform them into table rows.  The result will be the:</p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;th&gt;Title&lt;/th&gt;\n&lt;th&gt;Author&lt;/th&gt;\n&lt;th&gt;Publication Year&lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Life is Elsewhere&lt;/td&gt;\n&lt;td&gt;Milan Kundera&lt;/td&gt;\n&lt;td&gt;1973&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Pantaleon and the Visitors&lt;/td&gt;\n&lt;td&gt;Mario Vargas Llosa&lt;/td&gt;\n&lt;td&gt;1973&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Conversation in the Cathedral&lt;/td&gt;\n&lt;td&gt;Mario Vargas Llosa&lt;/td&gt;\n&lt;td&gt;1969&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#line-breaks-and-whitespace","title":"Line breaks and whitespace","text":"<p>When transforming a document, XSLT processors embed line breaks and white space in the output, but they do not do so consistently.</p> <p>There doesn't seem to be a simple solution that works on all processors, but there are solutions that work on every processor.</p>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#the-xslstrip-space-statement","title":"The <code>&lt;xsl:strip-space&gt;</code> statement","text":"<p>The <code>&lt;xsl:strip-space&gt;</code> command allows you to indicate whether elements containing only  whitespace are included in the transformation.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\nversion=\"1.0\"&gt;\n&lt;xsl:strip-space elements=\"*\" /&gt;\n&lt;xsl:template match=\"/\"&gt;\n&lt;html&gt;\n&lt;h1&gt;Autores&lt;/h1&gt;\n&lt;xsl:apply-templates /&gt;\n&lt;/html&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template match=\"libro\"&gt;\n&lt;p&gt;&lt;xsl:value-of select=\"autor\"/&gt;&lt;/p&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre> <p>The output will be:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html&gt;\n&lt;h1&gt;Autores&lt;/h1&gt;\n&lt;p&gt;Milan Kundera&lt;/p&gt;\n&lt;p&gt;Mario Vargas Llosa&lt;/p&gt;\n&lt;p&gt;Mario Vargas Llosa&lt;/p&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#xsltext","title":"<code>&lt;xsl:text&gt;</code>","text":"<p><code>&lt;xsl:text&gt;</code> allow you to generate text you cannot generate simply by adding it (line breaks, and whitespaces, for instance).</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\"&gt;\n&lt;xsl:template match=\"/\"&gt;\n&lt;html&gt;\n&lt;xsl:text&gt;&amp;#10; &lt;/xsl:text&gt;\n&lt;h1&gt;Authors&lt;/h1&gt;\n&lt;xsl:apply-templates /&gt;\n&lt;/html&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template match=\"libro\"&gt;\n&lt;p&gt;&lt;xsl:value-of select=\"autor\"/&gt;&lt;/p&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre> The output will be:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html&gt;\n&lt;h1&gt;Autores&lt;/h1&gt;\n&lt;p&gt;Milan Kundera&lt;/p&gt;\n&lt;p&gt;Mario Vargas Llosa&lt;/p&gt;\n&lt;p&gt;Mario Vargas Llosa&lt;/p&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#creating-attributes","title":"Creating attributes","text":"<p>The <code>&lt;xsl:attribute&gt;</code> command allows you to generate an attribute and its value.</p> <p>From the following XML document, we want to generate the <code>&lt;img&gt;</code> tag. Where the value of the <code>src</code> attribute is the content of the <code>&lt;image&gt;</code> tag. </p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;licenses&gt;\n&lt;license&gt;\n&lt;name&gt;Creative Commons By - Share Alike&lt;/name&gt;\n&lt;image&gt;cc-bysa-88x31.png&lt;/image&gt;\n&lt;/license&gt;\n&lt;/licenses&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\"&gt;\n&lt;xsl:template match=\"license\"&gt;\n&lt;p&gt;\n&lt;img src=\"&lt;xsl:value-of select=\"imagen\" /&gt;\" /&gt;\n  &lt;/p&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre> <p>Error at line 5, column 19: not well-formed (invalid  token)</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\"&gt;\n&lt;xsl:template match=\"/\"&gt;\n&lt;html&gt;\n&lt;xsl:apply-templates /&gt;\n&lt;/html&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template match=\"licencia\"&gt;\n&lt;p&gt;&lt;img&gt;\n&lt;xsl:attribute name=\"src\"&gt;\n&lt;xsl:value-of select=\"imagen\" /&gt;\n&lt;/xsl:attribute&gt;\n&lt;/img&gt;\n&lt;/p&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre> HTML output will be:</p> <pre><code>  &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html&gt;\n&lt;p&gt;&lt;img src=\"cc-bysa-88x31.png\"/&gt;&lt;/p&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"05-handling-storage-xml-documents/0502-xslt/#webography","title":"Webography","text":"<ul> <li>Bartolom\u00e9 Sint\u00e9s Marco. (2022, January 30). XSLT: XSLT language, available at  https://www.mclibre.org/consultar/xml/lecciones/xml-xslt.html</li> </ul>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/","title":"XML  Storage","text":"<p>XML is a way of storing and sharing information about things. It separates the  information from how it looks to people. </p> <p>An XML database is a collection of XML documents, where each document represents  a record. Although each document has a similar structure, it can be set up  differently, which makes it easier to access.</p> <p>To find specific information in an XML file, the file needs to be fully  processed. But sometimes, the information is divided across multiple documents.  So, a system is needed to efficiently search for and change data across all   the documents.</p> <p>The independent structure of each document collection makes it more flexible  and helpful for making applications. Also, XML is great for sharing information   between organizations as it allows for automatic and efficient sharing of information.</p> <p>In recent years, organizations have needed ways to share information in a more  comfortable, automatic, and efficient way. That's why many organizations use  XML as it is a reliable and accepted standard for storing and exchanging information.</p>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/#ways-of-storing-xml-documents","title":"Ways of storing XML documents","text":"<p>There are several methods for storing XML documents, each with its own advantages  and disadvantages. Here are some of the most common methods:</p> <ol> <li> <p>File system: This method stores XML documents as files in a directory hierarchy.  It is simple and easy to implement, but it can become difficult to manage and search as the number of files grows.</p> </li> <li> <p>Relational database: This method stores XML documents in a traditional relational database by converting the XML structure into a set of tables. It provides powerful search and query capabilities, but can be complex to set up and maintain.</p> </li> <li> <p>Relational databases with XML support: This method stores XML document in a relational database by using data types that allows to store documents in XML format. It also has capabilities for querying and updating them.</p> </li> <li> <p>Native XML database: This method stores XML documents in a database designed specifically for XML. It provides fast access and query capabilities and is easy to use, but it can be less familiar to developers who are used to relational databases.</p> </li> </ol>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/#relational-databases","title":"Relational databases","text":"<p>Almost all organizations have their data organized with some relational system, as database management systems have become an indispensable element in the functioning of companies. They are used to control many of the operating data of companies: turnover, accounting, stocks\u2026</p> <p>Therefore, in the face of the emergence of a new type of data, one of the easy reasons would be: \u201cIf we already have a well-functioning data organization system, why can\u2019t we put that data in the same system?\u201d. In this way, the data obtained from XML files would achieve a very efficient storage system and a method of manipulating information that has been widely tested for many years and is well known to many people.</p> <p>The inclusion of XML files in relational database management systems can be done in two ways:</p> <ol> <li>Convert data from XML files to relational data:<ul> <li>This system has the advantage that the data, once within the relational system, will be identical to the existing ones.</li> <li>The biggest downside is that if you need the original XML document again, it can be very difficult to regenerate it, as there will often be information about the XML structure that will not be stored.</li> </ul> </li> <li>Store entire XML documents in databases:<ul> <li>Entire XML files will be placed in a field in a database table, so it will be like the other data.</li> <li>In order to work well, the database will need to provide some moderately efficient way to search the contents of XML documents.</li> </ul> </li> </ol>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/#convert-xml-data-to-relational","title":"Convert XML data to relational","text":"<p>One solution that may seem simple but not so simple is to take the data from the XML files and turn it into relational data. Once the data has been added to the database, the XML files can be deleted.</p> <p>Because the structure of the data is already defined in the XML document, and XML documents are often associated with a vocabulary, we need to:</p> <ol> <li>Generate the structure of relational tables can be done by analysing the structure of the XML document.</li> <li>Vocabulary definition fields can be obtained by simply looking at the contents of the XML document.</li> </ol> <p>And besides, there are systems that allow you to transform XML data into other file types (for example, XSLT).</p>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/#convert-an-xml-document-into-relational-data","title":"Convert an XML document into relational data","text":"<p>If you start from the following XML document:</p> <pre><code>&lt;?xml version = \"1.0\"?&gt;\n&lt;students&gt;\n&lt;student&gt;\n&lt;name&gt;Frederic&lt;/name&gt;\n&lt;cognom&gt;Pi&lt;/cognom&gt;\n&lt;/student&gt;\n&lt;student&gt;\n&lt;name&gt;Philomeno&lt;/name&gt;\n&lt;cognom&gt;Garcia&lt;/cognom&gt;\n&lt;/student&gt;\n&lt;/students&gt;\n</code></pre> <p>It is relatively easy to see that the structure of the document consists of a list of \u201cstudent\u201d items. And that <code>&lt;student&gt;</code> will have two data fields which are <code>&lt;name&gt;</code> and <code>&lt;surname&gt;</code>.</p> <p>Therefore, the relational structure of this file will simply be to create a \u201cstudent\u201d table with a first and last name. This is trivial with the SQL CREATE TABLE command:</p> <pre><code>CREATE TABLE student (firstname VARCHAR (30), lastname VARCHAR (30))\n</code></pre> <p>Getting the data to fill the table shouldn\u2019t be a big deal either. Simply insert each data field:</p> <pre><code>INSERT INTO student VALUES (\"Frederic\", \"Pi\");\nINSERT INTO student VALUES (\"Filomeno\", \"Garcia\");\n</code></pre> <p>The easiest way to do this is to create an XSLT template that will transform the XML file into SQL rules.</p> <p>Despite the apparent simplicity of this system, it is not always easy to do this conversion, as relational and XML systems are based on quite different concepts:</p> <ul> <li>The relational system is based on two-dimensional data without hierarchy or order, while the XML system is based on hierarchical trees in which order is significant.</li> <li>In an XML document there may be repeated data, while relational systems escape repetitions.</li> <li>Relationships and structures within XML documents are not always obvious.</li> <li>What if we need to have the XML document back? Doing the reverse process is not always trivial. One of the difficult concepts is to determine which data were attributes and which elements.</li> </ul> <p>Therefore, this is usually not the most advisable system, but it is a valid system that can be useful in specific cases.</p>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/#relational-systems-with-xml-extensions","title":"Relational systems with XML extensions","text":"<p>Until the advent of XML, virtually everyone stored data that needed to be quickly queried or modified by some relational system. Database management systems have been the king of data management in organizations for years.</p> <p>But the increase in information in XML that needed to be queried or required to perform tasks that were previously reserved in relational databases has led to some kind of XML support having to be included in the database management systems.</p> <p>All major database systems such as Oracle, IBM DB2, or Microsoft SQL Server have some kind of XML support, which is usually specified in the following:</p> <ul> <li>Allow exporting relational data in some XML format to transport the data.</li> <li>Have some way to be able to store XML documents as fields in relational tables.</li> <li>Allow searches and changes to stored XML documents.</li> <li>Generate XML from relational data in the database.</li> </ul> <p>Info</p> <p>Although SQL/XML is part of the SQL standard, not all database managers support it.</p> <p>Because SQL (the quintessential relational data query language) did not support XML in 2003, the SQL language standard was modified to add the SQL/XML extension.</p>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/#sqlxml","title":"SQL/XML","text":"<p>SQL/XML is an extension of the SQL standard that allows you to work with the XML language using SQL statements.</p> <p>This extension was developed by a group in which there were large database companies (Microsoft, Oracle, IBM, SyBase, DataDirect Technologies\u2026) and is already implemented in some database system.</p> <p>Info</p> <p>Despite participating in the development of the standard, Microsoft announced that it did not intend to incorporate SQL/XML into Microsoft SQL Server. Instead, Microsoft SQL Server uses its own system called Microsoft SQLXML or OPENXML to work with SQL and XML.</p> <p>SQL/XML defines a series of functions for publishing XML files from relational data, defines a type of XML data and a way to query and manipulate stored XML data.</p> <p>How about MySQL</p> <p>MySQL doesn\u2019t support XML data types like Microsoft SQL Server or PostgreSQL. In MySQL, you have to store XML in CLOB (Character Large Object) data type. MYSQL database provides support CLOB datatype TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT. MySQL provides different types of XML function so using those functions, we can parse the XML data very easily. More info at https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html</p>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/#native-xml-databases","title":"Native XML databases","text":"<p>If we do not go into technical details, the definition of a database is a place where data can be stored. In the case of an XML database, it is simply a matter of storing the XML files at a specific point in the operating system.</p> <p>The increase in XML documents to be stored has made it difficult to have some way to automate the process, even though the storage can be done manually. To facilitate this automation, native XML (NXD) databases have appeared.</p> <p>When we talk about native XML databases, we are referring to databases designed to contain and store data in XML format.</p> <p>Unlike relational databases, which have been in operation for many years and have an important theoretical basis behind them, NXDs do not have definite standards for doing things, and the theory behind them is not very well-defined. As a result, each database often does things in a way that may be completely different from another.</p> <p>Native XML databases are primarily used to store data that contains:</p> <ul> <li>Narrative content.</li> <li>Which are less predictable than those normally stored in relational databases.</li> <li>That should generate outputs for web environments.</li> <li>They have to be transported from one system to another.</li> </ul>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/#xquery","title":"XQuery","text":"<p>One of the most basic requirements for searching for data is to have a query language that is powerful enough to meet the needs of those who need to use it. That\u2019s why the XQuery language was developed.</p> <p>Important</p> <p>XQuery is a query language designed to become the standard way to retrieve data from XML document collections.</p> <p>It\u2019s a functional language, so instead of telling you the steps to do a task, all you have to do is evaluate the expressions against the XML file and generate a result. Unlike common programming languages, XQuery specifies what is what you want and not the way you have to do it to get it.</p> <p>Among the most interesting features of XQuery, it allows:</p> <ul> <li>Select the information according to criteria. Sort, group, add data.</li> <li>Filter the information you want from the data stream.</li> <li>Search for information in a document or group of documents.</li> <li>Join data from multiple documents.</li> <li>Transform and restructure XML.</li> <li>Don\u2019t be limited to search, as it can perform numerical and character manipulation operations.</li> <li>You can work with namespaces and documents defined by DTD or XSD.</li> </ul> <p>An important part of XQuery 1.0 is the XPath 2.0 language, which is the part that allows you to make selections of information and browse the document.</p>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/#xquery-resources","title":"XQuery resources","text":"<ul> <li>XQuery tutorial at W3Schools.</li> <li>XQuery tutorial at Tuorialspoint</li> </ul>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/#programming-tools-to-work-with-xml","title":"Programming tools to work with XML","text":"<p>An alternative to treating XML documents is to do it through a programming  language instead of using databases. The most commons API are:</p> <p>\u2212 <code>SAX</code> (Simple API for XML). It was the first collection of functions used to deal with JAVA XML files. It is event based and therefore differs a bit in treating the document by means of a tree. This API as it reads the document sends notifications in real time. It is recommended for large documents, as its way of processing data is not stored in memory.</p> <p>\u2212 <code>DOM</code> (Document Object Model). In this case, the API is used to access and process XML documents as tree structures. It is independent of the language used in this case, Java, since what it does are object models that can be treated in any markup-oriented language. The DOM object hierarchy stores the relationships between the different nodes of an XML document to facilitate its treatment. The difference with the previous API is that in this case all the data is stored in the memory of the document. This feature makes the memory space have a considerable capacity and the most recommended files for this way of working are the smaller documents.</p> <p>All of the above are included in the Java, PHP and other lenguages.</p>"},{"location":"05-handling-storage-xml-documents/0503-xmlstorage/#credits-bibliography-and-webography","title":"Credits, bibliography and webography","text":"<ul> <li>Xavier Sala. Bases de dades natives XML available at https://ioc.xtec.cat/materials/FP/Recursos/fp_asx_m04_/web/fp_asx_m04_htmlindex/WebContent/u3/a3/continguts.html.</li> <li>Wikipedia contributors. (2022, April 19). NoSQL. In Wikipedia, The Free Encyclopedia. Retrieved 10:40, April 20, 2022, from https://en.wikipedia.org/w/index.php?title=NoSQL&amp;oldid=1083635963 </li> <li>Jos\u00e9 Luis Comesa\u00f1a, 2010. Almacenamiento de la informaci\u00f3n. Lenguajes de marca del curso de \u201cDesarrollo de Aplicaciones Web\u201d.</li> <li>Wikipedia contributors. (2021, December 16). Document-oriented database. In Wikipedia, The Free Encyclopedia. Retrieved 19:48, April 25, 2022, from https://en.wikipedia.org/w/index.php?title=Document-oriented_database&amp;oldid=1060575076 </li> </ul>"},{"location":"05-handling-storage-xml-documents/0599-tasks/","title":"Tasks","text":""},{"location":"05-handling-storage-xml-documents/0599-tasks/#xpath","title":"XPath","text":"<ol> <li>XPath - Exercise 1 - Simple expressions</li> </ol> <p>Given the following XML document, write the XPath expressions that return the desired response (shown in the boxes).</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;secondary-school&gt;\n&lt;name&gt;IES Abastos&lt;/name&gt;\n&lt;web&gt;http://www.iesabastos.org&lt;/web&gt;\n&lt;cycles&gt;\n&lt;cycle id=\"NISA\"&gt;\n&lt;name&gt;Network Information Systems Administration&lt;/name&gt;\n&lt;grade&gt;Higher&lt;/grade&gt;\n&lt;decreeTitle year=\"2009\" /&gt;\n&lt;/cycle&gt;\n&lt;cycle id=\"DAW\"&gt;\n&lt;name&gt;Web Application Development&lt;/name&gt;\n&lt;grade&gt;Higher&lt;/grade&gt;\n&lt;decreeTitle year=\"2010\" /&gt;\n&lt;/cycle&gt;\n&lt;cycle id=\"MSN\"&gt;\n&lt;name&gt;Microcomputer Systems and Networks&lt;/name&gt;\n&lt;grade&gt;Intermediate&lt;/grade&gt;\n&lt;decreeTitle year=\"2008\" /&gt;\n&lt;/cycle&gt;\n&lt;/cycles&gt;\n&lt;/secondary-school&gt;\n</code></pre>   a. Name of Institute:</p> <pre><code>&lt;name&gt;IES Abastos&lt;/name&gt;\n</code></pre> <p>b. School website:</p> <pre><code>http://www.iesabastos.org\n</code></pre> <p>c. Name of Training Cycles:</p> <pre><code>Administration of Computer Network Systems\nWeb applications development\nMicrocomputer systems and networks\n</code></pre> <p>d. Acronyms by which the Training Cycles are known:</p> <pre><code>id=\"NISA\"\nid=\"WAD\"\nid=\"MSN\"\n</code></pre> <p>e. Years in which the title decrees of the Training Cycles were published:</p> <pre><code>year=\"2009\"\nyear=\"2010\"\nyear=\"2008\"\n</code></pre> <p>f. Intermediate Training Cycles (it is about obtaining the complete  element): <p>Note: Solve this exercise in two different ways, in a single search step and in two search steps.</p> <pre><code>  &lt;cycle id=\"MSN\"&gt;\n    &lt;name&gt;Microcomputer Systems and Networks&lt;/name&gt;\n    &lt;grade&gt;Medium&lt;/grade&gt;\n    &lt;decreeTitle year=\"2008\"/&gt;\n  &lt;/cycle&gt;\n</code></pre> <p>g. Name of Higher Level Training Cycles:</p> <p>Note: Solve this exercise in two different ways, in a single search step and in two search steps.</p> <pre><code>&lt;name&gt;Network Information Systems Administration&lt;/name&gt;\n&lt;name&gt;Web Application Development&lt;/name&gt;\n</code></pre> <p>h. Name of Training Cycles prior to 2010:</p> <p>Note: Solve this exercise in two different ways, in a single search step and in two search steps.</p> <pre><code>Administration of Computer Network Systems\nMicrocomputer systems and networks\n</code></pre> <p>i. Name of the Formative Cycles of 2008 or 2010:</p> <p>Note: Solve this exercise in two different ways, in a single search step and in two search steps.</p> <pre><code>Web application development\nMicrocomputer systems and networks\n</code></pre> <ol> <li>XPath - Exercise 2 - Simple expressions</li> </ol> <p>Given the following XML document, write the XPath expressions that return the desired response (shown in the boxes).</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;school&gt;\n&lt;modules&gt;\n&lt;module id=\"0228\"&gt;\n&lt;name&gt;Web Applications&lt;/name&gt;\n&lt;course&gt;2&lt;/course&gt;\n&lt;weeklyHours&gt;4&lt;/weeklyHours&gt;\n&lt;cycle&gt;MSN&lt;/cycle&gt;\n&lt;/module&gt;\n&lt;module id=\"0372\"&gt;\n&lt;name&gt;Database Management&lt;/name&gt;\n&lt;course&gt;1&lt;/course&gt;\n&lt;hoursWeekly&gt;5&lt;/hoursWeekly&gt;\n&lt;cycle&gt;NISA&lt;/cycle&gt;\n&lt;/module&gt;\n&lt;module id=\"0373\"&gt;\n&lt;name&gt;Markup languages \u200b\u200band information management systems&lt;/name&gt;\n&lt;course&gt;1&lt;/course&gt;\n&lt;hoursWeekly&gt;3&lt;/hoursWeekly&gt;\n&lt;cycle&gt;NISA&lt;/cycle&gt;\n&lt;cycle&gt;WAD&lt;/cycle&gt;\n&lt;/module&gt;\n&lt;module id=\"0376\"&gt;\n&lt;name&gt;Web Application Deployment&lt;/name&gt;\n&lt;course&gt;2&lt;/course&gt;\n&lt;hoursWeekly&gt;5&lt;/hoursWeekly&gt;\n&lt;cycle&gt;WAD&lt;/cycle&gt;\n&lt;/module&gt;\n&lt;/modules&gt;\n&lt;/school&gt;\n</code></pre>   a. Name of the modules taught at the School:</p> <pre><code>Web Applications\nDatabase management\nMarkup languages \u200b\u200band information management systems\nImplementation of web applications\n</code></pre> <p>b. Name of the NISA cycle modules:</p> <p>Note: Solve this exercise in two different ways, in a single search step and in two search steps.</p> <pre><code>Database management\nMarkup languages \u200b\u200band information management systems\nImplementation of web applications\n</code></pre> <p>c. Name of the modules taught in the second year of any cycle:</p> <p>Note: Solve this exercise in two different ways, in a single search step and in two search steps.</p> <pre><code>Web applications\nImplementation of web applications\n</code></pre> <p>d. Name of the modules of less than 5 hours per week:</p> <p>Note: Solve this exercise in two different ways, in a single search step and in two search steps.</p> <pre><code>Web applications\nMarkup languages \u200b\u200band information management systems\n</code></pre> <p>e. Name of the modules taught in the first NISA course:</p> <p>Note: Solve this exercise in two different ways, in a single search step and in two search steps.</p> <pre><code>Database management\nMarkup languages \u200b\u200band information management systems\n</code></pre> <p>f. Weekly hours of modules of more than 3 hours per week:</p> <p>Note: Solve this exercise in two different ways, in a single search step and in two search steps.</p> <pre><code>4\n5\n5\n</code></pre>"},{"location":"05-handling-storage-xml-documents/0599-tasks/#xsl","title":"XSL","text":"<ol> <li> <p>XSLT Transformations</p> <p>Given the following XML document, write the XPath expressions that return the desired response (shown in the boxes).</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;secondary-school&gt;\n&lt;name&gt;IES Abastos&lt;/name&gt;\n&lt;web&gt;http://www.iesabastos.org&lt;/web&gt;\n&lt;cycles&gt;\n&lt;cycle id=\"NISA\"&gt;\n&lt;name&gt;Network Information Systems Administration&lt;/name&gt;\n&lt;grade&gt;Upper&lt;/grade&gt;\n&lt;decreeTitle year=\"2009\" /&gt;\n&lt;/cycle&gt;\n&lt;cycle id=\"DAW\"&gt;\n&lt;name&gt;Web Applications Development&lt;/name&gt;\n&lt;grade&gt;Upper&lt;/grade&gt;\n&lt;decreeTitle year=\"2010\" /&gt;\n&lt;/cycle&gt;\n&lt;cycle id=\"MSN\"&gt;\n&lt;name&gt;Microcomputer Systems and Networks&lt;/name&gt;\n&lt;grade&gt;Intermediate&lt;/grade&gt;\n&lt;decreeTitle year=\"2008\" /&gt;\n&lt;/cycle&gt;\n&lt;/cycles&gt;\n&lt;/secondary-school&gt;\n</code></pre> <p>XSLT (1) - Exercise 1</p> <p>Without tags:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n    Network Information Systems Administration    \n    Web Application Development\n    Sistemas Microinform\u00e1ticos y Redes\n</code></pre> XSLT (1) - Exercise 2</p> <p>P\u00e1rrafos:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html&gt;\n&lt;p&gt;Network Information Systems Administration&lt;/p&gt;\n&lt;p&gt;Web Application Development&lt;/p&gt;\n&lt;p&gt;Microcomputer Systems and Networks&lt;/p&gt;\n&lt;/html&gt;\n</code></pre> XSLT (1) - Exercise 3</p> <p>List:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html&gt;\n&lt;ul&gt;\n&lt;li&gt;Network Information Systems Administration&lt;/li&gt;\n&lt;li&gt;Web Application Development&lt;/li&gt;\n&lt;li&gt;Microcomputer Systems and Networks&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/html&gt;\n</code></pre> <p>XSLT (1) - Exercise 4</p> <p>Table:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;td&gt;Network Information Systems Administration&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Web Application Development&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Microcomputer Systems and Networks&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/html&gt;\n</code></pre> </li> </ol> <ol> <li> <p>XSLT Transformation. XML to HTML</p> <p>Given the following xml document</p> <pre><code>  &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;secondary-school&gt;\n&lt;name&gt;IES Abastos&lt;/name&gt;\n&lt;web&gt;http://www.iesabastos.org&lt;/web&gt;\n&lt;cycles&gt;\n&lt;cycle id=\"NISA\"&gt;\n&lt;name&gt;Computer Network Systems Management&lt;/name&gt;\n&lt;grade&gt;Higher&lt;/grade&gt;\n&lt;decreeTitle year=\"2009\" /&gt;\n&lt;/cycle&gt;\n&lt;cycle id=\"DAW\"&gt;\n&lt;name&gt;Development of Web Applications&lt;/name&gt;\n&lt;grade&gt;Higher&lt;/grade&gt;\n&lt;decreeTitle year=\"2010\" /&gt;\n&lt;/cycle&gt;\n&lt;cycle id=\"MSN\"&gt;\n&lt;name&gt;Microcomputer Systems and Networks&lt;/name&gt;\n&lt;grade&gt;Intermediate&lt;/grade&gt;\n&lt;decreeTitle year=\"2008\" /&gt;\n&lt;/cycle&gt;\n&lt;/cycles&gt;\n&lt;/secondary-school&gt;\n</code></pre> <p>Exercise 1. Paragraphs</p> <pre><code>  &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html&gt;\n&lt;h1&gt;IES Abastos&lt;/h1&gt;\n&lt;p&gt;Computer Network Systems Management&lt;/p&gt;\n&lt;p&gt;Development of Web Applications&lt;/p&gt;\n&lt;p&gt;Microcomputer Systems and Networks&lt;/p&gt;\n&lt;/html&gt;\n</code></pre> <p>Exercise 2. List:</p> <pre><code>  &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html&gt;\n&lt;h1&gt;IES Abastos&lt;/h1&gt;\n&lt;p&gt;Web page: &lt;a href=\"http://www.iesabastos.org/\"&gt;\nhttp://www.iesabastos.org/&lt;/a&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Computer Network Systems Management&lt;/li&gt;\n&lt;li&gt;Development of Web Applications&lt;/li&gt;\n&lt;li&gt;Microcomputer Systems and Networks&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/html&gt;\n</code></pre> <p>Exercise 3. Table:</p> <pre><code>  &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;html&gt;\n&lt;h1&gt;IES Abastos&lt;/h1&gt;\n&lt;p&gt;Web page: &lt;a href=\"http://www.iesabastos.org/\"&gt;\nhttp://www.iesabastos.org/&lt;/a&gt;&lt;/p&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;th&gt;Cycle name&lt;/th&gt;\n&lt;th&gt;Grade&lt;/th&gt;\n&lt;th&gt;Year of title&lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Computer Network Systems Management&lt;/td&gt;\n&lt;td&gt;High&lt;/td&gt;\n&lt;td&gt;2009&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Development of Web Applications&lt;/td&gt;\n&lt;td&gt;High&lt;/td&gt;\n&lt;td&gt;2010&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Microcomputer Systems and Networks&lt;/td&gt;\n&lt;td&gt;Intermediate&lt;/td&gt;\n&lt;td&gt;2008&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/html&gt;\n</code></pre> </li> </ol>"},{"location":"05-handling-storage-xml-documents/0599-tasks/#xml-to-xml","title":"XML to XML","text":"<ol> <li> <p>XML Transformation. XML to XML</p> <p>Given the following XML document, write XSLT stylesheets that return the desired response.</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;museums&gt;\n&lt;museum&gt;\n&lt;name&gt;Prado Museum&lt;/name&gt;\n&lt;city&gt;Madrid&lt;/city&gt;\n&lt;country&gt;Spain&lt;/country&gt;\n&lt;/museum&gt;\n&lt;museum&gt;\n&lt;name&gt;British Museum&lt;/name&gt;\n&lt;city&gt;London&lt;/city&gt;\n&lt;country&gt;United Kingdom&lt;/country&gt;\n&lt;/museum&gt;\n&lt;museum&gt;\n&lt;name&gt;National Gallery&lt;/name&gt;\n&lt;city&gt;London&lt;/city&gt;\n&lt;country&gt;United Kingdom&lt;/country&gt;\n&lt;/museum&gt;\n&lt;/museums&gt;\n</code></pre> Exercise 1. Convert tags to attributes:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;museums&gt;\n&lt;museum name=\"Museo del Prado\" city=\"Madrid\" country=\"Spain\"/&gt;\n&lt;museum name=\"British Museum\" city=\"London\" country=\"United Kingdom\"/&gt;\n&lt;museum name=\"National Gallery\" city=\"London\" country=\"United Kingdom\"/&gt;\n&lt;/museums&gt;\n</code></pre> <p>Exercise 2. Convert some tags to attributes:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;museums&gt;\n&lt;museum&gt;\n&lt;name&gt;Prado Museum&lt;/name&gt;\n&lt;location city=\"Madrid\" country=\"Spain\"/&gt;\n&lt;/museum&gt;\n&lt;museum&gt;\n&lt;name&gt;British Museum&lt;/name&gt;\n&lt;location city=\"London\" country=\"United Kingdom\"/&gt;\n&lt;/museum&gt;\n&lt;museum&gt;\n&lt;name&gt;National Gallery&lt;/name&gt;\n&lt;location city=\"London\" country=\"United Kingdom\"/&gt;\n&lt;/museum&gt;\n&lt;/museums&gt;\n</code></pre> Exercise 3. Change the document structure:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;cities&gt;\n&lt;city&gt;\n&lt;name&gt;Madrid&lt;/name&gt;\n&lt;country&gt;Spain&lt;/country&gt;\n&lt;museum&gt;Prado Museum&lt;/museum&gt;\n&lt;/city&gt;\n&lt;city&gt;\n&lt;name&gt;London&lt;/name&gt;\n&lt;country&gt;United Kingdom&lt;/country&gt;\n&lt;museum&gt;British Museum&lt;/museum&gt;\n&lt;/city&gt;\n&lt;city&gt;\n&lt;name&gt;London&lt;/name&gt;\n&lt;country&gt;United Kingdom&lt;/country&gt;\n&lt;museum&gt;National Gallery&lt;/museum&gt;\n&lt;/city&gt;\n&lt;/cities&gt;\n</code></pre> <p>Exercise 4.  Change the structure of the document and some elements in attributes:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;cities&gt;\n&lt;city name=\"Madrid\" country=\"Spain\"&gt;\n&lt;museum&gt;Prado Museum&lt;/museum&gt;\n&lt;/city&gt;\n&lt;city name=\"London\" country=\"United Kingdom\"&gt;\n&lt;museum&gt;British Museum&lt;/museum&gt;\n&lt;/city&gt;\n&lt;city name=\"London\" country=\"United Kingdom\"&gt;\n&lt;museum&gt;National Gallery&lt;/museum&gt;\n&lt;/city&gt;\n&lt;/cities&gt;\n</code></pre> <p>Exercise 5. Change the structure of the document and some labels in attributes:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;countries&gt;\n&lt;country name=\"Spain\"&gt;\n&lt;museum museum=\"Museo del Prado\" city=\"Madrid\"/&gt;\n&lt;/country&gt;\n&lt;country name=\"United Kingdom\"&gt;\n&lt;museum museum=\"British Museum\" city=\"London\"/&gt;\n&lt;/country&gt;\n&lt;country name=\"United Kingdom\"&gt;\n&lt;museum museum=\"National Gallery\" city=\"London\"/&gt;\n&lt;/country&gt;\n&lt;/countries&gt;\n</code></pre> </li> </ol> <ol> <li> <p>XML Transformations. XML to XML</p> <p>Given the following XML document, write XSLT style sheets that return the desired response.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;museums&gt;\n&lt;museum name=\"Museo del Prado\" city=\"Madrid\" country=\"Spain\"/&gt;\n&lt;museum name=\"British Museum\" city=\"London\" country=\"United Kingdom\"/&gt;\n&lt;museum name=\"National Gallery\" city=\"London\" country=\"United Kingdom\"/&gt;\n&lt;/museums&gt;\n</code></pre> <p>Exercise 1. Convert attributes to tags:</p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;museums&gt;\n&lt;museum&gt;\n&lt;name&gt;Prado Museum&lt;/name&gt;\n&lt;city&gt;Madrid&lt;/city&gt;\n&lt;country&gt;Spain&lt;/country&gt;\n&lt;/museum&gt;\n&lt;museum&gt;\n&lt;name&gt;British Museum&lt;/name&gt;\n&lt;city&gt;London&lt;/city&gt;\n&lt;country&gt;United Kingdom&lt;/country&gt;\n&lt;/museum&gt;\n&lt;museum&gt;\n&lt;name&gt;National Gallery&lt;/name&gt;\n&lt;city&gt;London&lt;/city&gt;\n&lt;country&gt;United Kingdom&lt;/country&gt;\n&lt;/museum&gt;\n&lt;/museums&gt;\n</code></pre> Exercise 2. Convert some attributes to tags:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;museums&gt;\n&lt;museum location=\"Madrid (Spain)\"&gt;Prado Museum&lt;/museum&gt;\n&lt;museum location=\"London (United Kingdom)\"&gt;British Museum&lt;/museum&gt;\n&lt;museum location=\"London (United Kingdom)\"&gt;National Gallery&lt;/museum&gt;\n&lt;/museums&gt;\n</code></pre> <p>Exercise 3. Change the document structure and convert some attributes to tags:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;cities&gt;\n&lt;city name=\"Madrid\"&gt;\n&lt;country&gt;Spain&lt;/country&gt;\n&lt;museum&gt;Prado Museum&lt;/museum&gt;\n&lt;/city&gt;\n&lt;city name=\"London\"&gt;\n&lt;country&gt;United Kingdom&lt;/country&gt;\n&lt;museum&gt;British Museum&lt;/museum&gt;\n&lt;/city&gt;\n&lt;city name=\"London\"&gt;\n&lt;country&gt;United Kingdom&lt;/country&gt;\n&lt;museum&gt;National Gallery&lt;/museum&gt;\n&lt;/city&gt;\n&lt;/cities&gt;\n</code></pre> <p>Exercise 4. Change structure:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;countries&gt;\n&lt;country name=\"Spain\"&gt;\n&lt;city name=\"Madrid\"&gt;\n&lt;museum name=\"Prado Museum\"/&gt;\n&lt;/city&gt;\n&lt;/country&gt;\n&lt;country name=\"United Kingdom\"&gt;\n&lt;city name=\"London\"&gt;\n&lt;museum name=\"British Museum\"/&gt;\n&lt;/city&gt;\n&lt;/country&gt;\n&lt;country name=\"United Kingdom\"&gt;\n&lt;city name=\"London\"&gt;\n&lt;museum name=\"National Gallery\"/&gt;\n&lt;/city&gt;\n&lt;/country&gt;\n&lt;/countries&gt;\n</code></pre> <p>Exercise 5. Change the document structure:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;places&gt;\n&lt;place type=\"museum\"&gt;\n&lt;location name=\"city\"&gt;Madrid&lt;/location&gt;\n&lt;location name=\"country\"&gt;Spain&lt;/location&gt;\n&lt;name&gt;Prado Museum&lt;/name&gt;\n&lt;/place&gt;\n&lt;place type=\"museum\"&gt;\n&lt;location name=\"city\"&gt;London&lt;/location&gt;\n&lt;location name=\"country\"&gt;United Kingdom&lt;/location&gt;\n&lt;name&gt;British Museum&lt;/name&gt;\n&lt;/place&gt;\n&lt;place type=\"museum\"&gt;\n&lt;location name=\"city\"&gt;London&lt;/location&gt;\n&lt;location name=\"country\"&gt;United Kingdom&lt;/location&gt;\n&lt;name&gt;National Gallery&lt;/name&gt;\n&lt;/place&gt;\n&lt;/places&gt;\n</code></pre> </li> </ol>"},{"location":"05-handling-storage-xml-documents/0599-tasks/#xml-to-text","title":"XML to text","text":"<ol> <li> <p>The goal of this task is to learn how to transform an XML document into a text document.</p> <p>A school have an XML document which contains the marks of different modules.</p> <pre><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?&gt;\n&lt;department name=\"Computing\"&gt;\n&lt;students&gt;\n&lt;student&gt;\n&lt;name&gt;Frederick&lt;/name&gt;\n&lt;lastname&gt;Garcia&lt;/lastname&gt;\n&lt;lastname&gt;Puig&lt;/lastname&gt;\n&lt;credits&gt;\n&lt;credit&gt;\n&lt;name&gt;Markup languages\u200b\u200b&lt;/name&gt;\n&lt;mark&gt;6&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Programming&lt;/name&gt;\n&lt;mark&gt;5&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Database&lt;/name&gt;\n&lt;mark&gt;3&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;/credits&gt;\n&lt;/student&gt;\n&lt;student&gt;\n&lt;name&gt;Filomenu&lt;/name&gt;\n&lt;lastname&gt;Pi&lt;/lastname&gt;\n&lt;lastname&gt;Bru&lt;/lastname&gt;\n&lt;credits&gt;\n&lt;credit&gt;\n&lt;name&gt;Markup languages\u200b\u200b&lt;/name&gt;\n&lt;mark&gt;10&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Programming&lt;/name&gt;\n&lt;mark&gt;9&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Database&lt;/name&gt;\n&lt;mark&gt;10&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;/credits&gt;\n&lt;/student&gt;\n&lt;student&gt;\n&lt;name&gt;Manolito&lt;/name&gt;\n&lt;lastname&gt;Puigdevall&lt;/lastname&gt;\n&lt;lastname&gt;Torres&lt;/lastname&gt;\n&lt;credits&gt;\n&lt;credit&gt;\n&lt;name&gt;Markup languages\u200b\u200b&lt;/name&gt;\n&lt;mark&gt;2&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Programming&lt;/name&gt;\n&lt;mark&gt;3&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Database&lt;/name&gt;\n&lt;mark&gt;9&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;/credits&gt;\n&lt;/student&gt;\n&lt;student&gt;\n&lt;name&gt;Bernat&lt;/name&gt;\n&lt;lastname&gt;Joy&lt;/lastname&gt;\n&lt;credits&gt;\n&lt;credit&gt;\n&lt;name&gt;Markup languages\u200b\u200b&lt;/name&gt;\n&lt;mark&gt;5&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Programming&lt;/name&gt;\n&lt;mark&gt;1&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Database&lt;/name&gt;\n&lt;mark&gt;6&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;/credits&gt;\n&lt;/student&gt;\n&lt;student&gt;\n&lt;name&gt;Filibert&lt;/name&gt;\n&lt;lastname&gt;Blanch&lt;/lastname&gt;\n&lt;lastname&gt;Blanch&lt;/lastname&gt;\n&lt;credits&gt;\n&lt;credit&gt;\n&lt;name&gt;Markup languages\u200b\u200b&lt;/name&gt;\n&lt;mark&gt;7&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Programming&lt;/name&gt;\n&lt;mark&gt;4&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Database&lt;/name&gt;\n&lt;mark&gt;4&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;/credits&gt;\n&lt;/student&gt;\n&lt;student&gt;\n&lt;name&gt;Magdalena&lt;/name&gt;\n&lt;lastname&gt;Roig&lt;/lastname&gt;\n&lt;lastname&gt;Fern\u00e1ndez&lt;/lastname&gt;\n&lt;credits&gt;\n&lt;credit&gt;\n&lt;name&gt;Markup languages\u200b\u200b&lt;/name&gt;\n&lt;mark&gt;5&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Programming&lt;/name&gt;\n&lt;mark&gt;5&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;credit&gt;\n&lt;name&gt;Database&lt;/name&gt;\n&lt;mark&gt;5&lt;/mark&gt;\n&lt;/credit&gt;\n&lt;/credits&gt;\n&lt;/student&gt;                &lt;/students&gt;\n&lt;/department&gt;\n</code></pre> <p>They need a list of marks from the Markup Language module that looks like this:</p> <pre><code>Marks from // Markup Languages //\n--------------------------------\nFederico Garcia: 6\nFilomenu Pi: 10\nManolito Puigdevall: 2\nBernat Alegria: 5\nFilibert Blanch: 7\nMagdalena Roig: 5\n</code></pre> </li> </ol>"},{"location":"05-handling-storage-xml-documents/0599-tasks/#xml-storage","title":"XML storage","text":"<ol> <li> <p>BaseX for dummies</p> <p>Do the exercises contained in the step by step guide of BaseX for dummies document. You can download the XML document factbook.xml.</p> <p>Create an screenshot for each exercise and save them in Aules.</p> </li> <li> <p>Given the following XML document bookstore.xml:</p> <ol> <li>Create new XML database called <code>Bookstore</code>.</li> <li>Do the following tasks (save every query in a document, <code>531-##.xq</code>):<ol> <li>List the title of all the books.</li> <li>List year and title of all books, ordered by year.</li> <li>List the books whose price is 19.95</li> <li>List books published before the year 2000</li> <li>List year and title of books published in English after 2004.</li> <li>Show the names of the authors that appear in the document, without repetitions, in alphabetical order.</li> <li>For each book, list its title and authors grouped in a <code>&lt;result&gt;</code> element.</li> <li>For each book, get its title and the number of authors, grouped in a <code>&lt;book&gt;</code> element.</li> <li>Generate an HTML document with a header that says \"Book List\" followed by a 3-column table showing the title, author and price of each book. The table should have borders and the first row should be specially formatted with column names. The title and editorial columns will be aligned to the left, and the price to the right.</li> <li>Generate an HTML document with the information of the books on web category. The total price value is a field calculated using a query with a let clause.</li> </ol> </li> <li>Add the following document bookstore_2.xml to Bookstore database.</li> </ol> </li> <li> <p>Do the exercises you will find in the following link: https://ioc.xtec.cat/materials/FP/Recursos/fp_asx_m04_/web/fp_asx_m04_htmlindex/WebContent/u3/a3/activitats.html</p> </li> <li> <p>Repeat exercises 2.9 and 2.10 from task 531 using Javascript and the DOM API.</p> </li> </ol>"},{"location":"05-handling-storage-xml-documents/99-tasks/","title":"Tasks","text":"<ol> <li> <p>BaseX for dummies</p> <p>Do the exercises contained in the step by step guide of BaseX for dummies document. You can download the XML document factbook.xml.</p> <p>Create an screenshot for each exercise and save them in the <code>unit 7</code> directory of your repository.</p> </li> <li> <p>Given the following XML document bookstore.xml:</p> <ol> <li>Create new XML database called <code>Bookstore</code>.</li> <li>Do the following tasks (save every query in a document, <code>702-##.xq</code>):<ol> <li>List the title of all the books.</li> <li>List year and title of all books, ordered by year.</li> <li>List the books whose price is 19.95</li> <li>List books published before the year 2000</li> <li>List year and title of books published in English after 2004.</li> <li>Show the names of the authors that appear in the document, without repetitions, in alphabetical order.</li> <li>For each book, list its title and authors grouped in a <code>&lt;result&gt;</code> element.</li> <li>For each book, get its title and the number of authors, grouped in a <code>&lt;book&gt;</code> element.</li> <li>Generate an HTML document with a header that says \"Book List\" followed by a 3-column table showing the title, author and price of each book. The table should have borders and the first row should be specially formatted with column names. The title and editorial columns will be aligned to the left, and the price to the right.</li> <li>Generate an HTML document with the information of the books on web category. The total price value is a field calculated using a query with a let clause.</li> </ol> </li> <li>Add the following document bookstore_2.xml to Bookstore database.</li> </ol> </li> <li> <p>Do the exercises you will find in the following link: https://ioc.xtec.cat/materials/FP/Recursos/fp_asx_m04_/web/fp_asx_m04_htmlindex/WebContent/u3/a3/activitats.html</p> </li> <li> <p>Repeat exercises 2.9 and 2.10 from task 702 using Javascript and the DOM API.</p> </li> </ol>"},{"location":"06-an-introdution-to-javascript/01-intro/","title":"Introduction to Javascript","text":""},{"location":"06-an-introdution-to-javascript/01-intro/#goals","title":"Goals","text":"<ul> <li>Characterize the use of scripting languages on the client.</li> <li>Learn the basics of language.</li> <li>Manipulate the Document Object Model (DOM) to apply dynamism to documents HTML.</li> </ul>"},{"location":"06-an-introdution-to-javascript/01-intro/#contents","title":"Contents","text":""},{"location":"06-an-introdution-to-javascript/01-intro/#javascript-fundamentals","title":"JavaScript fundamentals","text":"<ul> <li>JavaScript first steps</li> <li>JavaScript basics</li> </ul>"},{"location":"06-an-introdution-to-javascript/01-intro/#functions","title":"Functions","text":"<ul> <li>Functions</li> <li>Function expressions</li> <li>Callback functions</li> <li>Arrow functions</li> </ul>"},{"location":"06-an-introdution-to-javascript/01-intro/#built-in-objects-string-math-array","title":"Built-in objects: String, Math, Array","text":"<ul> <li>Arrays</li> <li>Array Methods</li> </ul>"},{"location":"06-an-introdution-to-javascript/01-intro/#validations","title":"Validations","text":""},{"location":"06-an-introdution-to-javascript/01-intro/#dom-manipulation","title":"DOM manipulation","text":"<ul> <li>Document</li> <li>DOM tree</li> <li>Searching: getElement*, querySelector*</li> <li>Modifying the document</li> <li>The HTML DOM API </li> </ul>"},{"location":"06-an-introdution-to-javascript/01-intro/#events","title":"Events","text":"<ul> <li>Introduction to browser events</li> <li>Page: DOMContentLoaded, load, beforeunload, unload</li> </ul>"},{"location":"06-an-introdution-to-javascript/01-intro/#objects","title":"Objects","text":"<ul> <li>https://javascript.info/object</li> <li>https://javascript.info/constructor-new</li> </ul>"},{"location":"06-an-introdution-to-javascript/01-intro/#localstorage","title":"localStorage","text":"<ul> <li>https://javascript.info/localstorage</li> </ul>"},{"location":"06-an-introdution-to-javascript/01-intro/#json","title":"JSON","text":"<ul> <li>https://www.json.org/json-en.html</li> <li>Fetch at Javascript.info   </li> </ul>"},{"location":"06-an-introdution-to-javascript/01-intro/#resources","title":"Resources","text":"<ul> <li>JavaScript Guide at Mozilla Developer Network</li> <li>The Modern JavaScript Tutorial</li> <li>Javascript Cheatsheet at Codecademy </li> </ul>"},{"location":"07-intro-web-apps/0700-index/","title":"Unit 7: Introduction to Node.js","text":""},{"location":"07-intro-web-apps/0700-index/#objectives","title":"Objectives","text":"<ul> <li>Understand how the web applications work</li> <li>Understand the characteristics and functionalities of Node.js</li> <li>Learn how to use Node.js to create web applications and servers</li> <li>Familiarise with the Node.js package ecosystem</li> </ul>"},{"location":"07-intro-web-apps/0700-index/#estimated-duration","title":"Estimated duration","text":"<ul> <li>12-14 hours</li> </ul>"},{"location":"07-intro-web-apps/0700-index/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic knowledge of JavaScript</li> </ul>"},{"location":"07-intro-web-apps/0700-index/#content","title":"Content","text":""},{"location":"07-intro-web-apps/0700-index/#1-introduction-to-web-applications","title":"1. Introduction to web applications","text":"<ul> <li>Definition of web applications</li> <li>Characterisation of web applications</li> <li>Differences between server and client in a web application</li> <li>HTTP protocol in web applications</li> </ul>"},{"location":"07-intro-web-apps/0700-index/#2-what-is-nodejs","title":"2. What is Node.js?","text":"<ul> <li>Introduction to Node.js</li> <li>Characteristics and advantages of Node.js</li> <li>Comparison with other server technologies</li> <li>Examples of applications created with Node.js</li> </ul>"},{"location":"07-intro-web-apps/0700-index/#3-installing-nodejs","title":"3. Installing Node.js","text":"<ul> <li>Downloading and installing Node.js</li> <li>Verifying the installation</li> <li>Using the console and the REPL interpreter</li> </ul>"},{"location":"07-intro-web-apps/0700-index/#4-modules-and-packages-in-nodejs","title":"4. Modules and packages in Node.js","text":"<ul> <li>What are modules in Node.js?</li> <li>Importing and exporting modules</li> <li>Using packages and managing dependencies with NPM</li> </ul>"},{"location":"07-intro-web-apps/0700-index/#5-creating-applications-with-nodejs","title":"5. Creating applications with Node.js","text":"<ul> <li>Using Node.js to create command-line applications</li> <li>Creating a basic web server with Node.js</li> <li>Handling HTTP requests and responses in Node.js</li> <li>Using Node.js's <code>http</code> library to create a web server</li> </ul>"},{"location":"07-intro-web-apps/0700-index/#6-developing-more-advanced-applications-with-nodejs","title":"6. Developing more advanced applications with Node.js","text":"<ul> <li>Using server frameworks such as Express.js</li> <li>Creating a simple web application with Express.js</li> <li>Integrating databases in Node.js</li> <li>Using testing tools for Node.js applications</li> </ul>"},{"location":"07-intro-web-apps/0700-index/#7-publishing-nodejs-applications","title":"7. Publishing Node.js applications","text":"<ul> <li>Choosing a hosting provider for Node.js applications</li> <li>Preparing a Node.js application for publishing</li> <li>Deploying a Node.js application on a production server</li> </ul>"},{"location":"07-intro-web-apps/0700-index/#evaluation","title":"Evaluation","text":"<ul> <li>Creating a basic web application with Node.js and Express.js</li> <li>Testing the application on a local server and a production server</li> </ul>"},{"location":"07-intro-web-apps/0700-index/#resources","title":"Resources","text":"<ul> <li>Official Node.js website: https://nodejs.org/</li> <li>Node.js documentation: https://nodejs.org/en/docs/</li> <li>Express.js documentation: https://expressjs.com/</li> <li>Node.js package repository: https://www.npmjs.com/</li> </ul>"},{"location":"07-intro-web-apps/0701-intro/","title":"Introduction to web applications","text":"<p>Web applications are computer programs that run on the internet, allowing users to access and interact with them through a web browser. They are built using web technologies such as HTML, CSS, and JavaScript, and can be accessed on any device with an internet connection.</p>"},{"location":"07-intro-web-apps/0701-intro/#characterisation-of-web-applications","title":"Characterisation of web applications","text":"<p>The main characteristics of web applications are:</p> <ul> <li>They are accessed through a web browser or a web-based interface.</li> <li>They are developed using web technologies such as HTML, CSS, and JavaScript.</li> <li>They use a client-server architecture to handle requests and responses.</li> <li>They can run on any device with an internet connection.</li> <li>They can be hosted on a server or on the cloud.</li> </ul>"},{"location":"07-intro-web-apps/0701-intro/#differences-between-server-and-client","title":"Differences between server and client","text":"<p>In a web application, the client refers to the user's device, such as a computer or mobile phone, while the server refers to the computer that hosts the application. The client sends requests to the server, which processes them and sends back responses.</p> <p>Some differences between the client and server in a web application are:</p> <ul> <li>The client runs on the user's device, while the server runs on a remote computer.</li> <li>The client typically handles the presentation layer, while the server handles the application logic and data storage.</li> <li>The client interacts with the user directly, while the server interacts with the database and other services.</li> </ul> <p></p> Client vs Server side scripting"},{"location":"07-intro-web-apps/0701-intro/#http-protocol","title":"HTTP protocol","text":"<p>HTTP stands for Hypertext Transfer Protocol and is the foundation of communication on the World Wide Web. It is a request-response protocol that allows clients and servers to exchange information over the internet.</p> <p>In a web application, the client sends HTTP requests to the server, which responds with an HTTP response. HTTP requests are made up of a method (e.g. GET, POST), a URL, headers, and an optional body. HTTP responses contain a status code, headers, and a response body. </p> <p>HTTP is stateless, which means that each request is independent and doesn't remember any previous requests. To maintain state, web applications use techniques such as cookies, session IDs, and tokens.</p> <p></p>      HTTP transaction diagram"},{"location":"07-intro-web-apps/0702-node/","title":"What is Node.js?","text":"<p>Node.js is an open-source, cross-platform JavaScript runtime environment that allows developers to run JavaScript code on the server-side. It was created by Ryan Dahl in 2009 and is built on top of the V8 JavaScript engine, which is also used by Google Chrome.</p>"},{"location":"07-intro-web-apps/0702-node/#characteristics-and-advantages-of-nodejs","title":"Characteristics and advantages of Node.js","text":"<p>Among the features of Node.js we are going to highlight:</p> <ul> <li>It is fast, efficient and asincronous, as it uses an event-driven, non-blocking I/O model that allows it to handle large amounts of data and requests simultaneously. </li> <li>It is lightweight and easy to learn, as it uses JavaScript, a language with which many developers are already familiar.</li> <li>It has a large and active community of developers and users, who contribute to its development and maintenance.</li> <li>It is cross-platform, which means it can run on any operating system, including Windows, macOS and Linux.</li> <li>It has a large and growing ecosystem of modules and packages, making it easy to add functionality to applications and reducing development time and effort.</li> </ul>"},{"location":"07-intro-web-apps/0702-node/#comparison-with-other-server-technologies","title":"Comparison with other server technologies","text":"<p>Node.js is not the only server technology available to developers. Some other popular server-side technologies include:</p> <ul> <li>PHP: a server-side scripting language that is widely used for web development. PHP is known for its simplicity and ease of use, but can be slower and less scalable than Node.js.</li> <li>Java: a general-purpose programming language that is used for a variety of applications, including web development. Java is known for its stability and security, but can be complex and time-consuming to learn and use.</li> <li>Ruby on Rails: a web application framework that is built using the Ruby programming language. Ruby on Rails is known for its productivity and ease of use, but can be slower and less scalable than Node.js.</li> </ul>"},{"location":"07-intro-web-apps/0702-node/#examples-of-applications-created-with-nodejs","title":"Examples of applications created with Node.js","text":"<p>Node.js is used by many companies and organizations to build web applications and services. Some examples of applications built with Node.js include:</p> <ul> <li>PayPal: the online payments system uses Node.js to handle over 400 million requests per day.</li> <li>Netflix: the popular streaming service uses Node.js for its user interface, which allows for fast and responsive browsing and searching.</li> <li>Uber: the ride-sharing company uses Node.js for its backend services, which handle real-time data processing and location tracking.</li> </ul>"},{"location":"07-intro-web-apps/0703-installing/","title":"Installing Node.js","text":"<p>Before getting started with Node.js, you'll need to download and install it on your computer. Here are the steps to do that:</p> <ul> <li>Go to the official Node.js website (https://nodejs.org).</li> <li>Download the appropriate installer for your operating system.</li> <li>Run the installer and follow the prompts to install Node.js on your computer.</li> </ul> <p>In Ubuntu 22.04, we can install the packages provided by Nodesource (https://github.com/nodesource/distributions#deb). </p> <p>Long Term Support versions</p> <p>As a general rule we will work with LTS versions so that this versions have a longer lifecycle.</p>"},{"location":"07-intro-web-apps/0703-installing/#verifying-the-installation","title":"Verifying the installation","text":"<p>After installing Node.js, you can verify that it's working correctly by opening a terminal or command prompt and running the following command:</p> <pre><code>node -v\n</code></pre> <p>This should display the version number of Node.js that you have installed.</p>"},{"location":"07-intro-web-apps/0703-installing/#using-the-console-and-the-repl-interpreter","title":"Using the console and the REPL interpreter","text":"<p>Once you've verified that Node.js is installed correctly, you can start using it by opening a terminal or command prompt and running the <code>node</code> command. This will open the Node.js console, which allows you to run JavaScript code interactively.</p> <p>You can also use the REPL (Read-Eval-Print Loop) interpreter, which is a tool that allows you to enter JavaScript code and see the results immediately. To start the REPL interpreter, open a terminal or command prompt and run the <code>node</code> command without any arguments.</p> <p>Here's an example of how to use the REPL interpreter:</p> <pre><code>&gt; let x = 10\nundefined\n&gt; let y = 5\nundefined\n&gt; x + y\n15\n&gt; console.log(\"Hello, world!\")\nHello, world!\nundefined\n</code></pre> <p>To exit the REPL, type <code>.exit</code> or press <code>Ctrl+C</code> twice.</p> <p>In this example, we defined two variables (<code>x</code> and <code>y</code>) and then added them together. We also used the <code>console.log()</code> method to print a message to the console.</p> <p>Using the console and the REPL interpreter can be a helpful way to experiment with Node.js and learn how to write JavaScript code for the server-side.</p>"},{"location":"07-intro-web-apps/0703-installing/#creating-our-first-nodes-app","title":"Creating our first Node.s app","text":"<p>To create a Node.js program that takes in the user's name as a command-line argument and outputs a greeting to the console the program should:</p> <ol> <li>Use the <code>process.argv</code> array to get the user's name from the command line.</li> <li>Output a greeting to the console in the following format: <code>Hello, &lt;username&gt;!</code>, where <code>&lt;username&gt;</code> is the input value.</li> </ol> <p>Here's an example of how your program should behave:</p> <pre><code>$node hello.js Alice\nHello, Alice!\n</code></pre> <p>The code should be something like that:</p> <pre><code>// hello.js\n// Get the command-line arguments\nconst args = process.argv;\n// Get the username from the command-line arguments\nconst username = args[2];\n// Print out the greeting\nconsole.log(`Hello, ${username}!`);\n</code></pre>"},{"location":"07-intro-web-apps/0703-installing/#more-resources","title":"More resources","text":"<ul> <li>https://www.digitalocean.com/community/tutorials/how-to-use-the-node-js-repl</li> <li>https://nodejs.org/docs/latest-v18.x/api/process.html#processargv</li> </ul>"},{"location":"07-intro-web-apps/0704-modules/","title":"Modules and packages in Node.js","text":""},{"location":"07-intro-web-apps/0704-modules/#what-are-modules-in-nodejs","title":"What are modules in Node.js?","text":"<p>In Node.js, a module is a reusable block of code that can be loaded into another application or module. Modules can contain functions, variables, classes, and other code that can be used to add functionality to an application or to encapsulate code into logical units.</p> <p>Modules are typically stored in separate files, with each file containing one or more modules. Modules are identified by their file names and can be loaded into an application using the <code>require()</code> function.</p>"},{"location":"07-intro-web-apps/0704-modules/#importing-and-exporting-modules","title":"Importing and exporting modules","text":"<p>To use a module in Node.js, you need to import it into your application using the <code>require()</code> function. Here's an example of how to import a module:</p> <pre><code>const myModule = require('./myModule');\n</code></pre> <p>In this example, we're importing a module called <code>myModule</code> that is stored in a file called <code>myModule.js</code>.</p> <p>To export a module from a file in Node.js, you need to use the <code>module.exports</code> object. Here's an example of how to export a module:</p> <pre><code>function myFunction() {\n  // code goes here\n}\n\nmodule.exports = myFunction;\n</code></pre> <p>In this example, we're exporting a function called <code>myFunction</code> that can be used in other modules or applications.</p>"},{"location":"07-intro-web-apps/0704-modules/#using-packages-and-managing-dependencies-with-npm","title":"Using packages and managing dependencies with NPM","text":"<p>In addition to modules, Node.js also has a package management system called NPM (Node Package Manager). NPM allows you to easily install and manage packages (collections of modules) that can be used in your Node.js applications.</p> <p>To install a package using NPM, you can run the following command in your terminal or command prompt:</p> <pre><code>npm install packageName\n</code></pre> <p>This will download and install the specified package and any dependencies it requires.</p> <p>To use a package in your application, you need to import it into your code using the <code>require()</code> function, just like with modules. Here's an example of how to import a package:</p> <pre><code>const express = require('express');\n</code></pre> <p>In this example, we're importing the <code>express</code> package, which is a popular web framework for Node.js.</p> <p>NPM also allows you to manage dependencies for your own Node.js applications. You can create a <code>package.json</code> file that lists the dependencies for your application, and NPM will automatically install them when you run the <code>npm install</code> command.</p> <p>Here's an example of a <code>package.json</code> file:</p> <pre><code>{\n  \"name\": \"myApp\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  }\n}\n</code></pre> <p>In this example, we're specifying that our application depends on the <code>express</code> package, version <code>4.17.1</code> or higher. When we run <code>npm install</code>, NPM will download and install this package, along with any other dependencies specified in the <code>package.json</code> file.</p>"},{"location":"07-intro-web-apps/0704-modules/#an-example-prompt-module","title":"An example: <code>prompt</code> module","text":"<p>This is an example program using the <code>prompt</code> module to ask the user for their name and age, and then print out a message with their information:</p> <pre><code>// index.js\n// Import the prompt module\nconst prompt = require('prompt');\n// Start the prompt\nprompt.start();\n// Get the name and age from the user\nprompt.get(['name', 'age'], function(err, result) {\nif (err) {\nconsole.error(err);\nreturn;\n}\n// Print out a message with the user's information\nconsole.log(`Your name is ${result.name} and you are ${result.age} years old.`);\n});\n</code></pre> <p>In this program, we use the <code>prompt</code> module to ask the user for their name and age. We pass an array of property names (<code>['name', 'age']</code>) to <code>prompt.get()</code>, which will prompt the user for those values. We also pass a callback function that will be called once the user has entered their information.</p> <p>If there's an error while prompting the user, we log the error to the console. Otherwise, we use string interpolation to print out a message with the user's information.</p> <p>To run this program, make sure you have installed the <code>prompt</code> module (you can do this with <code>npm install prompt</code>), and then run the program with <code>node index.js</code>. The program will prompt you for your name and age, and then print out a message with your information.</p>"},{"location":"07-intro-web-apps/0704-modules/#accessing-databases-from-nodejs-mysql2","title":"Accessing databases from Node.js: mysql2","text":"<p><code>mysql2</code> is a Node.js module that provides a MySQL database driver. The module uses the Node.js <code>stream</code> interface to communicate with the MySQL server, which allows for better performance and lower memory usage. <code>mysql2</code> supports all the common MySQL operations such as querying, inserting, updating, and deleting data.</p> <p>To install it run:</p> <pre><code>npm i mysql2\n</code></pre> <p>Supose we have the following database:</p> <pre><code>CREATE DATABASE IF NOT EXISTS `nodejs_sample`;\nUSE `nodejs_sample`;\nCREATE TABLE IF NOT EXISTS `users` (\n`id` INT(11) NOT NULL AUTO_INCREMENT,\n`username` VARCHAR(50) NOT NULL,\n`email` VARCHAR(100) NOT NULL,\n`age` INT(11) NOT NULL,\nPRIMARY KEY (`id`)\n);\nINSERT INTO users (username, email, age) VALUES ('JohnDoe', 'johndoe@example.com', 28);\nINSERT INTO users (username, email, age) VALUES ('JaneSmith', 'janesmith@example.com', 35);\nINSERT INTO users (username, email, age) VALUES ('BobJohnson', 'bobjohnson@example.com', 42);\nINSERT INTO users (username, email, age) VALUES ('AliceBrown', 'alicebrown@example.com', 23);\n</code></pre>"},{"location":"07-intro-web-apps/0704-modules/#basic-operations","title":"Basic operations","text":"<pre><code>const mysql = require('mysql2');\n// create the connection to the database\nconst connection = mysql.createConnection({\nhost: 'localhost',\nuser: 'youruser',\npassword: 'yourpassword',\ndatabase: 'nodejs_sample'\n});\n// select data from a table\nconst sqlSelect = 'SELECT * FROM users';\nconnection.query(sqlSelect, function (err, results) {\nif (err) throw err;\nconsole.log(results);\n});\n// insert data into a table\nconst sqlInsert = 'INSERT INTO users (username, email) VALUES (?, ?)';\nconst values = ['JackDoe', 'johndoe@example.com'];\nconnection.query(sqlInsert, values, function (err, results) {\nif (err) throw err;\nconsole.log(\"Number of records inserted: \" + results.affectedRows);\n});\n// update data in a table\nconst sqlUpdate = 'UPDATE users SET email = ? WHERE username = ?';\nconst updateValues = ['newemail@example.com', 'JohnDoe'];\nconnection.query(sqlUpdate, updateValues, function (err, results) {\nif (err) throw err;\nconsole.log(\"Number of records updated: \" + results.affectedRows);\n});\n// delete data from a table\nconst sqlDelete = 'DELETE FROM users WHERE username = ?';\nconst deleteValues = ['JohnDoe'];\nconnection.query(sqlDelete, deleteValues, function (err, results) {\nif (err) throw err;\nconsole.log(\"Number of records deleted: \" + results.affectedRows);\n});\n// close the connection to the database\nconnection.end();\n</code></pre> <p>In this example, we first create a connection to the database by passing in the database details. We then execute various SQL queries, including selecting data from a table, inserting data into a table, updating data in a table, and deleting data from a table.</p> <p>Note that this is just a basic example and there are many more complex operations that can be done with the mysql2 module in Node.js.</p>"},{"location":"07-intro-web-apps/0704-modules/#importing-and-exporting-xml-files-intofrom-database","title":"Importing and exporting XML files into/from database","text":"<p>The <code>fast-xml-parser</code> module is a lightweight and high-performance XML parser for Node.js. It allows you to efficiently parse XML documents and convert them into JavaScript objects for further processing.</p> <p>We can use <code>fast-xml-parser</code> to read and write XML files.</p> <p>The following code is an example of exporting a database table to XML using <code>mysql2</code>, <code>fs</code>, and <code>fast-xml-parser</code> in Node.js:</p> <p><pre><code>const fs = require('fs');\nconst mysql = require('mysql2');\nconst { XMLBuilder } = require('fast-xml-parser');\n// Create the database connection\nconst connection = mysql.createConnection({\nhost: 'localhost',\nuser: 'youruser',\npassword: 'yourpassword',\ndatabase: 'yourdatabase'\n});\n// Select data from the database table\nconst sqlSelect = 'SELECT * FROM users';\nconnection.query(sqlSelect, (err, results) =&gt; {\nif (err) {\nconsole.error(err);\nreturn;\n}\nconst builder = new XMLBuilder(\n{\nformat: true\n}\n);\n// Convert the results to XML\nconst xmlData = builder.build({\nroot: {\nitem: result\n}\n});\n// Write the XML string to a file\nfs.writeFile('data.xml', xmlString, (err) =&gt; {\nif (err) {\nconsole.error(err);\nreturn;\n}\nconsole.log('Data exported to data.xml');\n});\n// Close the database connection\nconnection.end();\n});\n</code></pre> This script connects to the MySQL database, selects all data from the specified table, converts the results into an XML object using <code>fast-xml-parser</code>, and then converts the XML object to a formatted XML string. Finally, the XML string is written to a file named <code>data.xml</code> using the <code>fs.writeFile</code> function.</p> <p>You can adjust the <code>build</code> options provided to <code>fast-xml-parser</code> to customize the XML output as per your requirements.</p> <p>The result file should look like that:</p> <pre><code>&lt;root&gt;\n&lt;item&gt;\n&lt;id&gt;1&lt;/id&gt;\n&lt;username&gt;JohnDoe&lt;/name&gt;\n&lt;email&gt;johndoe@example.com&lt;/email&gt;\n&lt;age&gt;28&lt;/age&gt;\n&lt;/item&gt;\n&lt;item&gt;\n&lt;id&gt;2&lt;/id&gt;\n&lt;username&gt;JaneSmith&lt;/name&gt;\n&lt;email&gt;janesmith@example.com&lt;/email&gt;\n&lt;age&gt;35&lt;/age&gt;\n&lt;/item&gt;\n&lt;item&gt;\n&lt;id&gt;3&lt;/id&gt;\n&lt;username&gt;BobJohnson&lt;/name&gt;\n&lt;email&gt;bobjohnson@example.com&lt;/email&gt;\n&lt;age&gt;42&lt;/age&gt;\n&lt;/item&gt;\n&lt;/root&gt;\n</code></pre> <p>This is an example of importing rows into a database table in Node.js:</p> <p><pre><code>const fs = require('fs');\nconst mysql = require('mysql2');\nconst { XMLParser } = require('fast-xml-parser');\n// Create the database connection\nconst connection = mysql.createConnection({\nhost: 'localhost',\nuser: 'youruser',\npassword: 'yourpassword',\ndatabase: 'yourdatabase'\n});\n// Read the XML file\nfs.readFile('data.xml', 'utf-8', (err, xmlData) =&gt; {\nif (err) {\nconsole.error(err);\nreturn;\n}\nconst parser = new XMLParser();\n// Parse the XML data\nconst parsedData = parser.parse(xmlData);\n// Extract the items from the parsed XML object\nconst items = parsedData.root.item;\n// Insert the data into the database table\nconst sqlInsert = 'INSERT INTO users (username, email, age) VALUES (?, ?, ?)';\nitems.forEach(item =&gt; {\nconst values = [item.username, item.email, item.age];\nconnection.query(sqlInsert, values, (err, results) =&gt; {\nif (err) {\nconsole.error(err);\nreturn;\n}\nconsole.log('Record inserted:', results.insertId);\n});\n});\n// Close the database connection\nconnection.end();\n});\n</code></pre> This script reads the XML file (<code>data.xml</code>), parses its contents using <code>fast-xml-parser</code>, and extracts the necessary data. Then, it inserts the extracted data into the specified table in the MySQL database using parameterized queries. Finally, it logs the insert IDs of the inserted records and closes the database connection.</p>"},{"location":"07-intro-web-apps/0705-creating-app/","title":"Creating applications with Node.js","text":""},{"location":"07-intro-web-apps/0705-creating-app/#using-nodejs-to-create-command-line-applications","title":"Using Node.js to create command-line applications","text":"<p>Node.js can be used to create command-line applications that can be run from the terminal or command prompt. These applications can perform various tasks, such as file manipulation, data processing, or system administration.</p> <p>To create a command-line application in Node.js, you can use the <code>process.argv</code> object to access the command-line arguments passed to the application. Here's an example of a simple command-line application that takes two numbers as arguments and adds them together:</p> <pre><code>const args = process.argv.slice(2);\nconst num1 = parseInt(args[0]);\nconst num2 = parseInt(args[1]);\nconst sum = num1 + num2;\nconsole.log(sum);\n</code></pre> <p>In this example, we're using the <code>process.argv</code> object to retrieve the command-line arguments passed to the application. We then convert the arguments to numbers using <code>parseInt()</code> and add them together. Finally, we use <code>console.log()</code> to output the result to the terminal.</p>"},{"location":"07-intro-web-apps/0705-creating-app/#creating-a-basic-web-server-with-nodejs","title":"Creating a basic web server with Node.js","text":"<p>Node.js can also be used to create web applications and servers. To create a basic web server in Node.js, you can use the built-in <code>http</code> module. Here's an example of a simple web server that responds to HTTP requests with the text \"Hello, world!\":</p> <pre><code>const http = require('http');\nconst server = http.createServer((req, res) =&gt; {\nres.writeHead(200, {'Content-Type': 'text/plain'});\nres.end('Hello, world!');\n});\nserver.listen(3000, () =&gt; {\nconsole.log('Server running on port 3000');\n});\n</code></pre> <p>In this example, we're using the <code>http.createServer()</code> method to create a new web server. We define a callback function that is called every time the server receives an HTTP request. Inside the callback function, we set the response headers using <code>res.writeHead()</code> and write the response body using <code>res.end()</code>. Finally, we start the server listening on port 3000 using <code>server.listen()</code>.</p>"},{"location":"07-intro-web-apps/0705-creating-app/#handling-http-requests-and-responses","title":"Handling HTTP requests and responses","text":"<p>When an HTTP request is received by a Node.js server, it is passed to the server's request listener function as an argument. The request object contains information about the incoming request, such as the request method, URL, headers, and body.</p> <p>Similarly, when an HTTP response is sent from a Node.js server, it is passed to the server's response listener function as an argument. The response object contains methods for setting the response headers and writing the response body.</p>"},{"location":"07-intro-web-apps/0705-creating-app/#using-nodejss-http-library-to-create-a-web-server","title":"Using Node.js's <code>http</code> library to create a web server","text":"<p>Node.js's built-in <code>http</code> library provides a range of methods and classes for creating web servers and handling HTTP requests and responses. Some of the key classes and methods in the <code>http</code> library include:</p> <ul> <li><code>http.createServer()</code>: Creates a new HTTP server.</li> <li><code>http.Server</code>: Represents an HTTP server.</li> <li><code>http.IncomingMessage</code>: Represents an incoming HTTP request.</li> <li><code>http.ServerResponse</code>: Represents an outgoing HTTP response.</li> <li><code>req.method</code>: The HTTP method used in the request (e.g. GET, POST).</li> <li><code>req.url</code>: The URL of the requested resource.</li> <li><code>req.headers</code>: An object containing the headers of the request.</li> <li><code>res.writeHead()</code>: Sets the HTTP response headers.</li> <li><code>res.write()</code>: Writes data to the response body.</li> <li><code>res.end()</code>: Ends the response and sends it to the client.</li> </ul> <p>By using these classes and methods, you can create powerful and flexible web applications with Node.js.</p>"},{"location":"07-intro-web-apps/0705-creating-app/#a-basic-app-using-http-library","title":"A basic app using <code>http</code> library","text":"<p>The following code will create a web server that responds with \"Hello, World!\":</p> <ol> <li>Start by setting up a new Node.js project with the following structure:</li> </ol> <pre><code>\u251c\u2500\u2500 server.js\n\u2514\u2500\u2500 public\n    \u2514\u2500\u2500 index.html\n</code></pre> <ol> <li> <p>Open the <code>index.html</code> file in the <code>public</code> folder and add the following content:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Hello World&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Hello, World!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>In the <code>server.js</code> file, add the following code to create a basic web server using the built-in <code>http</code> module:</p> </li> </ol> <pre><code>const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\nconst server = http.createServer((req, res) =&gt; {\n// Set the content type to HTML\nres.setHeader('Content-Type', 'text/html');\n// Read the index.html file and send its contents as the response\nconst filePath = path.join(__dirname, 'public', 'index.html');\nfs.readFile(filePath, 'utf-8', (err, content) =&gt; {\nif (err) {\nres.statusCode = 500;\nres.end('Internal Server Error');\nconsole.error(err);\n} else {\nres.statusCode = 200;\nres.end(content);\n}\n});\n});\nconst port = 3000;\nserver.listen(port, () =&gt; {\nconsole.log(`Server running on port ${port}`);\n});\n</code></pre> <ol> <li> <p>Open a terminal, navigate to the project folder, and run the following command to start the server:    <pre><code>node server.js\n</code></pre></p> </li> <li> <p>Open a web browser and visit <code>http://localhost:3000</code> to see the \"Hello, World!\" message displayed in HTML.</p> </li> </ol>"},{"location":"07-intro-web-apps/0705-creating-app/#using-a-template-engine","title":"Using a template engine","text":"<p>A template engine is a library that allows you to generate dynamic content by combining predefined templates with data. It simplifies the process of creating dynamic web pages or generating other text-based documents by separating the presentation logic (the template) from the data or business logic.</p> <p>In the context of Node.js, there are several popular template engines available that can be used to generate dynamic HTML pages, such as:</p> <ol> <li>EJS (Embedded JavaScript): EJS is a simple and widely used template engine for Node.js. It allows you to embed JavaScript code within your HTML templates. You can define variables, loops, conditionals, and other JavaScript expressions directly in the template. EJS templates use the <code>.ejs</code> file extension.</li> </ol> <p>Example usage: <pre><code>&lt;!-- index.ejs --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Dynamic Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Hello, &lt;%= name %&gt;!&lt;/h1&gt;\n&lt;% if (isAdmin) { %&gt;\n    &lt;p&gt;Welcome, administrator!&lt;/p&gt;\n&lt;% } else { %&gt;\n    &lt;p&gt;Welcome, guest!&lt;/p&gt;\n&lt;% } %&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <ol> <li>Pug (formerly Jade): Pug is a concise and feature-rich template engine for Node.js. It uses indentation and a clean syntax to define HTML structure and elements. Pug templates use the <code>.pug</code> file extension.</li> </ol> <p>Example usage: <pre><code>// index.pug\ndoctype html\nhtml\nhead\ntitle= pageTitle\nbody\nh1= greeting\nif isAdmin\n      p Welcome, administrator!\n    else\np Welcome, guest!\n</code></pre></p> <ol> <li>nunjucks: Nunjucks is another popular template engine for Node.js that provides a powerful and flexible way to generate dynamic content. It is inspired by Jinja2, a template engine used in Python.</li> </ol> <p>Example usage: <pre><code>&lt;!-- index.nkj --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Dynamic Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Hello, {{ name }}!&lt;/h1&gt;\n  {% if isAdmin %}\n    &lt;p&gt;Welcome, administrator!&lt;/p&gt;\n  {% else %}\n    &lt;p&gt;Welcome, guest!&lt;/p&gt;\n  {% endif %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>These are just a few examples of popular template engines in the Node.js ecosystem. Each template engine has its own syntax and features, but they all serve the purpose of separating the presentation logic from the data, making it easier to generate dynamic content in web applications.</p> <p>By using a template engine, you can dynamically render HTML pages with data from your Node.js application, resulting in more maintainable and flexible code.</p>"},{"location":"07-intro-web-apps/0705-creating-app/#basic-example-using-ejs","title":"Basic example using <code>EJS</code>","text":"<p>Here's an example of using EJS as a template engine in a Node.js application:</p> <ol> <li> <p>Set up a new Node.js project with the following structure:    <pre><code>\u251c\u2500\u2500 server.js\n\u2514\u2500\u2500 views\n    \u2514\u2500\u2500 index.ejs\n</code></pre></p> </li> <li> <p>In the <code>views</code> folder, create an <code>index.ejs</code> file with the following content:    <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Dynamic Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Hello, &lt;%= name %&gt;!&lt;/h1&gt;\n&lt;% if (isAdmin) { %&gt;\n    &lt;p&gt;Welcome, administrator!&lt;/p&gt;\n&lt;% } else { %&gt;\n    &lt;p&gt;Welcome, guest!&lt;/p&gt;\n&lt;% } %&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> </li> <li> <p>In your <code>server.js</code> file, include the necessary code to set up a basic HTTP server and render the EJS template:    <pre><code>const http = require('http');\nconst fs = require('fs');\nconst ejs = require('ejs');\nconst server = http.createServer((req, res) =&gt; {\n// Read the template file\nfs.readFile('./views/index.ejs', 'utf8', (err, template) =&gt; {\nif (err) {\nres.writeHead(500, { 'Content-Type': 'text/plain' });\nres.end('Internal Server Error');\nreturn;\n}\n// Define the data\nconst data = {\nname: 'John Doe',\nisAdmin: true\n};\n// Render the template with the data\nconst rendered = ejs.render(template, data);\n// Set the response headers and send the rendered template\nres.writeHead(200, { 'Content-Type': 'text/html' });\nres.end(rendered);\n});\n});\nconst port = 3000;\n// Start the server\nserver.listen(port, () =&gt; {\nconsole.log(`Server running on port ${port}`);\n});\n</code></pre></p> </li> <li> <p>Run the server using the command:    <pre><code>node server.js\n</code></pre></p> </li> <li> <p>Open a web browser and visit <code>http://localhost:3000</code> to see the rendered EJS template with the dynamic content.</p> </li> </ol> <p>In this example, the HTTP server is created using the <code>http</code> module. The <code>fs</code> module is used to read the EJS template file, and the <code>ejs</code> module is used to render the template with the provided data.</p> <p>By dynamically rendering the EJS template, you can generate HTML pages with dynamic content.</p> <p>You have more information about EJS in Embedded JavaScript templating</p>"},{"location":"07-intro-web-apps/0706-advanced-apps/","title":"Developing more advanced applications with Node.js","text":""},{"location":"07-intro-web-apps/0706-advanced-apps/#using-server-frameworks-such-as-expressjs","title":"Using server frameworks such as Express.js","text":"<p>While Node.js's built-in <code>http</code> library provides a low-level API for creating web servers, it can be time-consuming and error-prone to build complex web applications from scratch. To simplify the process of building web applications, many developers use server frameworks such as Express.js.</p> <p>Express.js is a popular server framework for Node.js that provides a range of features for building web applications, including routing, middleware, templates, and error handling. Express.js is built on top of Node.js's <code>http</code> library and provides a higher-level API for working with HTTP requests and responses.</p>"},{"location":"07-intro-web-apps/0706-advanced-apps/#creating-a-simple-web-application-with-expressjs","title":"Creating a simple web application with Express.js","text":"<p>Here's an example of a simple web application built with Express.js:</p> <pre><code>const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) =&gt; {\n  res.send('Hello, world!');\n});\n\napp.listen(3000, () =&gt; {\n  console.log('Server running on port 3000');\n});\n</code></pre> <p>In this example, we're using the <code>express</code> module to create a new Express.js application. We define a route for the root URL (<code>/</code>) using the <code>app.get()</code> method, and set the response body using the <code>res.send()</code> method. Finally, we start the server listening on port 3000 using the <code>app.listen()</code> method.</p>"},{"location":"07-intro-web-apps/0706-advanced-apps/#integrating-databases-in-nodejs","title":"Integrating databases in Node.js","text":"<p>Node.js can also be used to build applications that interact with databases. There are many database systems that can be used with Node.js, including MySQL, MongoDB, and PostgreSQL.</p> <p>To interact with databases in Node.js, you can use database drivers and libraries that provide a higher-level API for working with databases. For example, the <code>mysql2</code> module provides a MySQL driver for Node.js, while the <code>mongoose</code> module provides an Object-Document Mapping (ODM) library for MongoDB.</p>"},{"location":"07-intro-web-apps/0706-advanced-apps/#using-testing-tools-for-nodejs-applications","title":"Using testing tools for Node.js applications","text":"<p>Testing is an important part of software development, and there are many testing tools and frameworks available for Node.js applications. Some popular testing tools for Node.js include:</p> <ul> <li>Mocha: A testing framework that provides a range of features for writing and running tests.</li> <li>Chai: An assertion library that provides a range of assertion styles and interfaces.</li> <li>Sinon: A testing library that provides features for mocking and stubbing.</li> <li>Supertest: A library for testing HTTP servers and requests in Node.js.</li> </ul> <p>By using these testing tools, you can write and run automated tests for your Node.js applications to ensure that they are working as expected and to catch any bugs or errors before they are deployed to production.</p>"},{"location":"07-intro-web-apps/0707-publish-apps/","title":"Publishing Node.js applications","text":""},{"location":"07-intro-web-apps/0707-publish-apps/#choosing-a-hosting-provider-for-nodejs-applications","title":"Choosing a hosting provider for Node.js applications","text":"<p>When it comes to hosting Node.js applications, there are many options available, including cloud-based services like AWS, Heroku, and Azure, as well as traditional web hosting providers.</p> <p>The choice of hosting provider will depend on various factors, such as the requirements of the application, the budget, the level of technical expertise, and the scalability and performance requirements.</p>"},{"location":"07-intro-web-apps/0707-publish-apps/#preparing-a-nodejs-application-for-publishing","title":"Preparing a Node.js application for publishing","text":"<p>Before publishing a Node.js application, there are several steps that should be taken to ensure that the application is ready for production. These steps may include:</p> <ul> <li>Optimizing the application code for performance and scalability</li> <li>Minimizing dependencies and reducing the size of the application bundle</li> <li>Implementing security measures, such as encryption and authentication</li> <li>Configuring environment variables and settings for the production environment</li> <li>Setting up logging and error handling mechanisms</li> </ul>"},{"location":"07-intro-web-apps/0707-publish-apps/#deploying-a-nodejs-application-on-a-production-server","title":"Deploying a Node.js application on a production server","text":"<p>Once the Node.js application is ready for production, it can be deployed to a production server. The deployment process may vary depending on the hosting provider and the deployment method, but generally involves the following steps:</p> <ul> <li>Uploading the application files to the server</li> <li>Installing any required dependencies and libraries</li> <li>Starting the Node.js application using a process manager or a script</li> <li>Configuring the server settings and environment variables</li> <li>Testing the application to ensure that it is running correctly</li> </ul> <p>It's important to monitor the deployed application to ensure that it is performing correctly and to handle any errors or issues that may arise. Tools like monitoring services, log analyzers, and error trackers can help with this process.</p>"},{"location":"07-intro-web-apps/0799-tasks/","title":"Tasks","text":"<ol> <li> <p>Install Nodejs 18 LTS in your computer. Verify the installation.</p> </li> <li> <p>Using the Node.js REPL to create a simple calculator</p> <ol> <li>Open the command prompt or terminal on your computer.</li> <li>Type <code>node</code> to start the Node.js REPL.</li> <li>Create a function that takes two numbers as arguments and returns their sum.</li> <li>Test the function by calling it with different numbers and verifying that the output is correct.</li> <li>Create additional functions for subtraction, multiplication, and division, and test them in the same way.     </li> <li>Save your code in <code>702.js</code> file.</li> </ol> </li> <li> <p>Create a command-line program to calculate the area of a rectangle</p> <ol> <li>Use the process.argv array to get the width and height values from the command line.</li> <li>Parse the width and height values from strings to numbers using the parseInt function.</li> <li>Calculate the area of the rectangle by multiplying the width and height values together.</li> <li>Output the area of the rectangle to the console in the following format: <code>The area of a rectangle with width X and height Y is Z</code>, where X and Y are the input values and Z is the calculated area.</li> </ol> <p>Here's an example of how your program should behave:</p> <pre><code>$node rectangle-area.js 4 5\nThe area of a rectangle with width 4 and height 5 is 20\n</code></pre> </li> <li> <p>Create a basic command-line calculator: </p> <p>Adapt <code>702.js</code> program in order to ask the user for two numbers and an operator. The program will return the result. The program will continue asking until the user writes \"No\".</p> <p>Here you have a example of how the program should behave:</p> <pre><code>$node 704.js\nprompt: number 1:  1\nprompt: number 2:  2\nprompt: operation: +\nThe result of 1 + 2 is 3.\n\nprompt: Would you like to do another operation?: No\n</code></pre> </li> <li> <p>Write a program that creates a new text file and saves information about the user's operating system to it.</p> <p>Prerequisites: </p> <ul> <li>Working with objects in JavaScript</li> <li>Handling JSON strings.</li> </ul> <p>Here are the steps to complete the assignment:</p> <ol> <li>Create a new Node.js file and require the <code>os</code> and <code>fs</code> modules.</li> <li>Use the <code>os.platform()</code>, <code>os.arch()</code>, and <code>os.release()</code> methods to get the name of the user's operating system, architecture, and release version, respectively.</li> <li>Use the <code>os.userInfo()</code> to get the username. </li> <li>Create a JavaScript object that contains the operating system information and the username.</li> <li>Use the <code>fs.writeFile()</code> method to create a new file and save the compiled information to it in JSON format.</li> </ol> <p>Here's an example of how the program should behave:</p> <pre><code>$node 705.js\nOperating system information saved to os-info.txt\n</code></pre> <p>Optionally, if file <code>os-info.txt</code> exists ask the user for overwriting it or not.</p> </li> <li> <p>Create a Node.js app in order to connect to <code>tienda_informatica</code> database and perform the following basic operations:</p> <ol> <li>Connect to the database, checking if connection is created successfully.</li> <li>Show in the console a list of products with their price.</li> <li>Add a new product: Xiaomi Mi Smart Watch Lite, 60\u20ac. Show the inserted record.</li> <li>Change the price of Yoga laptop to 499\u20ac. Show the updated record.</li> <li>Delete the previous created product. Show if the operation is successfully executed.</li> </ol> </li> <li> <p>The aim of this task is to create a custom module and import it. </p> <ol> <li>Copy the task 704 code.</li> <li>Encapsulate the calculator functionality in an object defined in a separated file <code>calculator.js</code>. 3.   Export the module. </li> <li>Import the module in <code>707.js</code>.</li> <li>Adapt the task in order to make it work properly.</li> </ol> </li> <li> <p>Create a Node.js application in order to export the table <code>producto</code> into a valid XML document called <code>productos.xml</code>, the root element must be named <code>products</code> and the document must be formatted.</p> </li> <li> <p>Create a Node.js application in order to import product data from the XML file <code>productos.xml</code> created in the previous task. Make some changes in their content before importing it.</p> </li> <li> <p>Adjust the two previous tasks to include the vendor data in every product. For instance:       <pre><code>&lt;product&gt;\n...\n     &lt;name&gt;\nMi Watch Lite\n     &lt;/name&gt;\n&lt;vendor&gt;\n&lt;id&gt;1&lt;/id&gt;\n&lt;name&gt;Xaomi&lt;/name&gt;\n&lt;/vendor&gt;\n&lt;/product&gt;\n</code></pre>      This task is optional.</p> </li> <li> <p>Create a web applications that returns an HTML page that includes a h1 heading with the text: Hello world!. In addition, add the requested resouce and the query string. The server must listen to the port 5500.</p> </li> <li> <p>Implement the basic server created in Creating applications with Node.js. Then     </p> <ol> <li>Create two new files called <code>error404.html</code> and <code>error500.html</code> in <code>public</code> directory. </li> <li>Change the code in order to serve different pages depending on the request url:<ol> <li>If root (<code>/</code>) is requested <code>index.html</code> page will be served. </li> <li>If other url are requested <code>error404.html</code> will be served, changing the status code.</li> <li>If any error are raise <code>error500.html</code> will be served.</li> </ol> </li> <li>Adapt the pages to contain relevant content.</li> </ol> </li> <li> <p>Copy the previous task. Change the HTML files in order to add some dynamic parts:</p> <ol> <li><code>index.html</code> must show <code>Hello USERNAME</code> if the query <code>username=USERNAME</code> appears in the URL, if not <code>Hello World!</code> must appear.</li> <li><code>error404.html</code> must show the requested URL when called.</li> </ol> <p>Tip: You have to make up a way to set a placeholder in HTML files that can be changed in running time.</p> </li> <li> <p>Copy the task 713. Refactor it to use EJS template engine.</p> </li> <li> <p>Do the following tasks:</p> <ol> <li>Copy the previous task. </li> <li>Create <code>index.ejs</code>. This template will contain the list of products.</li> <li>The name of the product has to contain a link to <code>/products?id=##</code> where <code>##</code> is the id of the product.</li> <li>Modify the <code>server.js</code> code in order to connect to the database and retrieve the products.    </li> <li>Create the <code>products.ejs</code> template that will contain the selected product details.</li> </ol> </li> </ol>"},{"location":"10-bussines-information-systems/01-intro/","title":"Business information systems","text":"Learning outcomes <ul> <li>Recognize the advantages of enterprise resource planning and management systems.</li> <li>Evaluate the characteristics of management systems.</li> <li>Install and configure enterprise management applications.</li> <li>Establish and verify secure access to information.</li> <li>Generate reports.</li> <li>Perform integration tasks with office applications.</li> <li>Perform information extraction procedures for processing and incorporation into various systems.</li> <li>Perform assistance and incident resolution tasks.</li> <li>Prepare documents related to the operation of the application.</li> </ul> Assessment criteria <ul> <li>The advantages of enterprise resource planning and management systems have been recognized.</li> <li>The characteristics of the main enterprise management applications have been evaluated.</li> <li>Enterprise management applications have been installed.</li> <li>The applications have been configured and adapted.</li> <li>Secure access to information has been established and verified.</li> <li>Reports have been generated.</li> <li>Integration tasks with office applications have been performed.</li> <li>Information extraction procedures for processing and incorporation into various systems have been completed.</li> <li>Assistance and incident resolution tasks have been performed.</li> <li>Documents related to the operation of the application have been prepared.</li> </ul>"},{"location":"10-bussines-information-systems/01-intro/#basic-goals","title":"Basic goals","text":"<p>Computers were first used to help companies work faster. Nowadays, they are very important for many companies. There are two main reasons why companies use computers:</p> <ul> <li>To help workers do their jobs more easily.</li> <li>To help leaders make decisions.</li> </ul> <p>Companies often decide if a computer system is successful or not by looking at how well it helps workers and leaders.</p>"},{"location":"10-bussines-information-systems/01-intro/#decision-making","title":"Decision-making","text":"<p>In many organizations, one of the most important goals is to gain and maintain a competitive advantage. This advantage helps them to succeed for a long time. To achieve this, companies need to make decisions quickly and effectively. They may need to invest money, increase production or hire more staff. However, making the right decision quickly can be difficult.</p> <p>Computer systems are a valuable tool for organizations because they help decision-makers to use data to make informed choices. There are two types of data: internal data, which is generated by the company itself, and environmental data, which includes information about the market, competitors, and regulations.</p> <p>The problem is that there is a lot of data available, and not all of it is relevant to the company's goals. Sorting through this data can be expensive in terms of resources and personnel.</p> <p>Computer systems help to organize and classify data so that decision-makers can quickly and easily find the information they need. This allows organizations to make informed decisions that give them a competitive advantage.</p>"},{"location":"10-bussines-information-systems/01-intro/#make-tasks-easier","title":"Make tasks easier","text":"<p>The use of computers has made it much easier for workers to carry out their tasks, especially in the process of company transactions. This process includes routine tasks like stock control, preparing delivery notes, creating invoices, and accounting. Before computers were used, these tasks required a lot of resources, such as a large number of employees and data storage.</p> <p></p> A company transactioon process <p>Computerization has made these processes much more efficient, which has resulted in many benefits for companies. They are faster, use fewer resources, and are less prone to errors. This has helped companies reduce costs and provide better service. In fact, computerized transaction processes are now used in almost every company.</p>"},{"location":"10-bussines-information-systems/01-intro/#business-software","title":"Business software","text":"<p>Business software refers to computer programs and applications that are designed to assist businesses in managing various aspects of their operations. There are various types of applications that can be used in companies, ranging from office programs to specialized programs for a particular sector.</p> <p>One way to classify business software is based on how it is created. The following categories are commonly used:</p> <ol> <li>Generic applications: These are standard programs that can be used by any type of company, such as Microsoft Office or Google Suite.</li> <li>Custom software: This type of software is designed specifically for a company's needs and requirements.</li> <li>Standard software: These are pre-designed software packages that meet the needs of a particular industry, such as accounting software for small businesses or project management software for construction companies.</li> <li>ERP (Enterprise Resource Planning) software: This type of software integrates all aspects of a company's operations into a single system, including accounting, human resources, inventory management, and customer relationship management.</li> </ol> <p>Generally, larger companies have more control over all aspects of their business and may use more customized or integrated software systems, while smaller companies may opt for more affordable software options with similar functions.</p>"},{"location":"10-bussines-information-systems/01-intro/#generic-applications","title":"Generic applications","text":"<p>In addition to specialized business software, companies also use other types of programs that are not specifically designed for managing their operations. These programs include office applications like Microsoft Word, web browsers such as Google Chrome, and email programs like Microsoft Outlook.</p> <p>Although these programs are not created specifically for business management, they can still be very useful in certain situations. For example, web browsers are necessary for accessing certain online services, and data exported from other programs can often be analyzed in office applications like Microsoft Excel.</p> <p>Even very small companies can benefit from using generic programs like office applications to help manage their business activities in a simple and cost-effective way.</p>"},{"location":"10-bussines-information-systems/01-intro/#custom-software","title":"Custom software","text":"<p>In the past, it was common for companies to create their own computer systems by developing a program that would fit their specific needs. This process, known as tailoring software, involved hiring computer scientists to develop a program that would computerize the company's activities. Since these programs were custom-made for the organization, they were perfectly adapted to its unique requirements.</p> <p>However, there were several problems associated with this approach:</p> <ul> <li>The company's operations had to be carefully analyzed to ensure that the program was a perfect fit.</li> <li>The implementation process was time-consuming and prone to errors, as the program had not been tested before.</li> <li>These programs were so specific to the company that any changes in its operations usually required changes to the software as well. This made it very expensive to maintain this type of software.</li> </ul>"},{"location":"10-bussines-information-systems/01-intro/#standard-software","title":"Standard software","text":"<p>Standard Business Management Software is software that is specifically developed to work in most organizations. This software is designed to perform specific tasks in a generic company or a particular sector. The advantage of this type of software is that it greatly reduces costs since the software is already developed and tested. The implementation time is also reduced, as it is generally enough to enter the data and start working.</p> <p>However, there are disadvantages to this software, as all the functions are designed to work \"anywhere\" and do not usually adapt perfectly to the specific needs of any company. Sometimes the company has to adapt to the operation of the program instead of the other way around. Moreover, having software from different companies can cause problems, such as \"computer islands,\" where different departments have their own data and only share part of it with the rest of the company.</p> <p>It is important to note that programs are not perfect, and problems may arise, evolve, and new versions may come out. An update of any of the programs may cause problems to exchange data with other programs, which may do tasks differently.</p> <p>Despite these disadvantages, standard software is a valid option for the management of many small and medium-sized businesses.</p>"},{"location":"10-bussines-information-systems/01-intro/#erp-enterprise-resource-planning","title":"ERP (Enterprise Resource Planning)","text":"<p>ERPs have become a popular choice for businesses because they provide a single platform for managing different processes, which simplifies communication between departments and helps streamline operations. ERPs are modular and can be adapted to suit the specific needs of a company. They integrate all areas and procedures of a company into a single application, providing a global view of the business. ERPs are designed to interact with general-purpose applications such as browsers and email programs, and they can be accessed through web browsers. ERPs simplify communications between processes by allowing modules to communicate with a common data source.</p> <p> Evolution of business computer systems</p> <p> Communications between processes with an ERP</p>"},{"location":"10-bussines-information-systems/01-intro/#erp-characteristics","title":"ERP Characteristics","text":"<p>Simplifying a lot we can say that an ERP consists of two basic components:</p> <ul> <li>A centralized database.</li> <li>A group of modules or applications.</li> </ul> <p>Basic scheme of an ERP </p>"},{"location":"10-bussines-information-systems/01-intro/#a-centralized-database","title":"A centralized database","text":"<p>The ERPs work with a centralized database in which all programs interact so that the data is only stored once and there is never disintegrated data.</p> <p>This central data repository guarantees that since the information is at one point, at any time an image of the state in which the company is located can be obtained. This eliminates the possibility of creating \"computer islands\".</p> <p>It also minimizes the exchange of information between departments and the possibility that someone will work with outdated data as the information is the same for everyone.</p>"},{"location":"10-bussines-information-systems/01-intro/#modules","title":"Modules","text":"<p>Modules are a set of applications that can be integrated to form the software system. It is quite common for each of these modules to coincide with the functional units of the company (purchases, sales, inventory, finance...).</p> <p>Therefore, one of the great advantages of ERPs with respect to other systems is that with a single program all the management of the company is integrated. This brings associated advantages:</p> <ul> <li>Learning time is reduced because you do not need to learn how different environments work, because it is the same in all programs.</li> <li>The system can be adapted to the needs of each moment of the company, adding new modules to do new tasks or changing the way the installed modules work.</li> </ul> <p>All modules share the information they generate with the other modules so that at any point reliable and truthful information can be obtained.</p>"},{"location":"10-bussines-information-systems/01-intro/#disadvantages","title":"Disadvantages","text":"<p>Not everything is advantages in ERPs; They also have some disadvantages.</p> <p>One problem is that it can be hard to get the ERP set up in a company. Everyone in the company needs to be involved and sometimes people in different departments resist the change. Also, the company may need to change the way it does things to fit with the ERP, which can take a long time.</p> <p>There are other things that can also make the process take longer. Sometimes the data from the old system doesn't fit into the new ERP, some people don't want to learn the new tools, and some people don't like change.</p> <p>Another problem is that the company becomes dependent on one software provider for the ERP. This means the company has to pay for the software and any updates or fixes. It can be expensive.</p> <p>Overall, ERPs are helpful, but they may not be a good fit for companies that change a lot or are spread out over many locations.</p>"},{"location":"10-bussines-information-systems/01-intro/#types-of-erp","title":"Types of ERP","text":"<p>There are two main types of ERPs: horizontal and vertical.</p> <p>A horizontal ERP is a general-purpose software that can be used in any company, regardless of the industry. It includes standard features such as inventory control, purchasing, sales, and finances.</p> <p>A vertical ERP, on the other hand, is designed for a specific industry or business sector. It includes all the features of a horizontal ERP, as well as additional features that are tailored to the needs of a particular industry.</p> <p>There are many ERP products available in the market, including those offered by large companies like SAP AG, Oracle, and Microsoft. However, there are also many other solutions, such as those provided by SAGE, Epicor, Infor, or Acumatica. It is important to choose the right ERP for a company to ensure its successful implementation.</p> <p></p> ERP market share according to Software Connect"},{"location":"10-bussines-information-systems/01-intro/#open-source-erp","title":"Open source ERP","text":"<p>Also in the world of free software you can find ERP software, whose manufacturers often achieve income through the supply of customer services.</p> <p>Among the open source ERP programs are:</p> <ul> <li>Odoo (formerly OpenERP) - Odoo S.A.</li> <li>ERPNext - Frappe Technologies Pvt. Ltd.</li> <li>Dolibarr - Dolibarr ERP/CRM project team</li> <li>Apache OFBiz - The Apache Software Foundation</li> <li>Compiere - Aptean</li> </ul> <p>Open source ERPs offer several advantages that must be considered when deciding whether or not to implement them:</p> <ul> <li>The most significant advantage is the cost. Open source ERPs can be obtained at no cost, which reduces implementation costs and user licences.</li> <li>There is no dependence on a software vendor because the company controls the software and can use it to create its own ERP with fewer resources than required in a paid system.</li> <li>With access to the code, the program can be customized to meet the specific needs of the company. Payment solutions allow for customization, but there are often limitations. Open source systems have no such limitations.</li> </ul> <p>However, free software is not without its challenges, which prevent some companies from using it:</p> <ul> <li>Program operation documentation may not always be available, which can increase learning time.</li> <li>Software updates are often unpredictable and changes are not always documented.</li> <li>Projects sometimes disappear, which can force the company to change products.</li> <li>Although almost all of them offer a free product with a paid version that includes support, support may not be as good as that offered by proprietary software.</li> </ul> <p>Open source ERPs are a valid alternative and should be considered when choosing the most suitable ERP for the company, taking into account both their strengths and weaknesses.</p>"},{"location":"10-bussines-information-systems/01-intro/#cloud-computing","title":"Cloud computing","text":"<p>Most of these ERPs are adapting or already adapted to be able to function in what is known as cloud computing or more specifically as SAAAS (software as a service).</p> <p>The idea is to not have to make any software installation on the company's servers but to access the program online, usually with a web browser. This allows the installation and maintenance tasks to be externalized, as it is the supplier that will be in charge.</p> <p> ERP in Cloud</p> <p>This feature allows:</p> <ul> <li>Use the program without having to install any software as this software is installed on the seller's servers.</li> <li>That is not necessary for the company make any expenditure on hardware infrastructure (you do not need to buy a server, implement backup mechanisms ...) or in qualified computer staff. A computer and an internet connection are enough to work with the ERP.</li> </ul> <p>Generally the cost of this type of service is paid via subscription, which implies a much lower price than what is requested to buy the software package and the rent of the technicians responsible for the installation.</p> <p>It works in this way that the software is always updated as the developer company is in charge of it on its own servers. You do not need to take risks or have extra expenses doing updates on its servers.</p> <p>But it must always be taken into account that working in this way involves risks:</p> <ul> <li>It requires that there is a permanent connection on the Internet and therefore the company of the telephone company makes more dependent.</li> <li>A failure on the servers of the hostel company can completely stop the operation of the company as the program that manages everything cannot be accessed.</li> <li>Because the data is stored in a remote place, in case of problems it is not possible to recover them.</li> </ul> <p>In addition, the use of cloud services can lead to legal problems as the data ceases to be stored in the company to become on the supplier's servers, and sometimes these suppliers are not in The same country in which the company works.</p> <p>Therefore, the Personal Data Protection Law (LOPD) can be violated due to the limitations imposed on the storage location, since among the data with which the company works on it is usually personal.</p> <p>Data protection matters</p> <p>The LOPD defines among other things in which cases you can afford a third party accessing an organization's data or what conditions must be fulfilled to move data from one country to another.</p> <p>This requires, before contracting a cloud service, to ensure that the service provider company guarantees that the data that will be stored on its servers will be saved without violating the law.</p>"},{"location":"10-bussines-information-systems/01-intro/#implantation-of-an-erp","title":"Implantation of an ERP","text":"<p>ERPs are complex programs of implantation, and it is not uncommon for implantation to a company to become a failure. </p> <p>Reasons why ERP implantations can fail:</p> <ul> <li>Takes longer or costs more than expected to implement a solution.</li> <li>Solution doesn't work as it should.</li> <li>Solution is too complicated or there is no confidence in the data obtained.</li> <li>Change resistance. People tend, naturally, to resist change, especially when    it comes to changing established processes, routines, and ways of working. </li> </ul> <p>Something we have to bear in mind when choosing and implementing an ERP:</p> <ul> <li>Before choosing an ERP, identify the company's specific needs.</li> <li>Proper choice of ERP is a determining factor for success.</li> <li>ERPs require time for parameterization and modification before use.</li> <li>It is rare that nothing needs to be modified in an ERP.</li> <li>Involving all areas of the business and addressing user resistance are key factors for success.</li> <li>Adaptation time varies depending on the chosen ERP, modules to be implemented, and size of the company.</li> <li>Modular implementation is often more successful than sudden implementation.</li> <li>Transfer of data can be a complex task.</li> </ul> <p>Factors affecting the success of ERP implementation:</p> <ul> <li>Choice of a good integrative company with experience and ability to understand the company and adapt the tool</li> <li>Extending the implantation time can be a factor in failure.</li> </ul>"},{"location":"10-bussines-information-systems/01-intro/#glossary","title":"Glossary","text":"<p>Here is the glossary of basic terms related to company operations and invoicing:</p> <ul> <li> <p>Company: a person, organization, or institution dedicated to activities with the aim of making a profit to meet the needs of goods or services of society.</p> </li> <li> <p>Natural and legal persons:</p> <ul> <li>Natural person: an individual human being who has rights and can incur obligations. In case of debts, a natural person must respond with their assets. Self-employed individuals, although entrepreneurs, are considered natural persons.</li> <li>Legal person: an entity that can acquire rights and incur obligations. In case of debts, a legal person responds with the assets of the entity. Legal persons include corporations, partnerships, foundations, etc.</li> </ul> </li> <li> <p>Customers and suppliers:</p> <ul> <li>Customer: a natural or legal person who acquires a good or service in exchange for money or other goods and services.</li> <li>Supplier: a person or company that supplies goods and/or services to other people and/or companies.</li> </ul> </li> <li> <p>Employees: a person who provides services to an employer in exchange for a salary. The details of this relationship are defined through a contract.</p> </li> <li> <p>Taxes and duties: a payment obligation made to the State without a direct counterpart of goods or services.         VAT: in Spain, Value Added Tax. This tax may vary depending on the type of goods and services or Autonomous Community.</p> </li> <li> <p>Invoices: a commercial document that reflects all the information of a purchase/sale: customer, supplier, delivery date of the product/service, product/service details (including unit prices and total price), moment of accrual (moment in which the tax obligation arises), taxes (such as VAT), etc.</p> </li> <li> <p>Production/manufacturing, production line, and production order:</p> <ul> <li>Production/manufacturing: the process by which a product is made. This process usually consists of different phases (each with different locations) and some associated elements such as raw materials, energy, and labour.</li> <li>Production line: definition of the set of sequential operations and necessary resources to organize the production of a product.</li> <li>Production order: the realization of the production of a product, indicating the quantity of the product, production date, and production line used.</li> </ul> </li> <li> <p>Logistics, storage, stock/inventory, and distribution:</p> <ul> <li>Logistics: the coordination, management, and transport processes of commercial goods from the distribution point to the end customer.</li> <li>Storage: a process in which the materials necessary for the production process are stored, as well as the stock of items for sale and distribution.</li> <li>Stock/Inventory: the set of stocks of items that the company has to trade with and to produce goods and services.</li> <li>Distribution: the process by which the company delivers goods and services from the storage location to the end consumer.</li> </ul> </li> </ul>"},{"location":"10-bussines-information-systems/01-intro/#credits-and-bibliography","title":"Credits and bibliography","text":"<ul> <li>SALA, Xavier i MART\u00cd, Carles Llenguatges de marques i sistemes de gesti\u00f3 d\u2019informaci\u00f3. Departament d\u2019Ensenyament, 2012</li> <li>DAVISON, Russ ERP Market Share, Size, and Trends Report for 2022. Software Connect https://softwareconnect.com/erp/erp-market/</li> </ul>"},{"location":"10-bussines-information-systems/02-ERP-installation-management/","title":"Installation of an ERP: Odoo","text":""},{"location":"10-bussines-information-systems/02-ERP-installation-management/#odoo","title":"Odoo","text":"<p>Odoo is a set of business management software tools that include, for example, CRM, eCommerce, invoicing, accounting, manufacture, warehouse, project management and inventory management. The community version is a free software, with GNU LGPLV3 licence. The enterprise version has additional owners' functions and services. The source code for the framework and The basic ERP modules are organized by Odoo S.A., based in Belgium.</p> <p>Oddo is installed as a web service and is written in Python, JavaScript and XML.</p>"},{"location":"10-bussines-information-systems/02-ERP-installation-management/#installation","title":"Installation","text":"<p>The following file defines the services needed to launch Oddo 16 in docker containers. You can see this video to see how docker works: What is Docker?</p> <p><pre><code>version: '3.1'\nservices:\nweb:\nimage: odoo:16.0\ndepends_on:\n- mydb\nports:\n- \"8069:8069\"\nenvironment:\n- HOST=mydb\n- USER=odoo\n- PASSWORD=myodoo\nmydb:\nimage: postgres:15\nenvironment:\n- POSTGRES_DB=postgres\n- POSTGRES_PASSWORD=myodoo\n- POSTGRES_USER=odoo\n</code></pre> Copy the previous code into a file called <code>docker-compose.yaml</code> and executes the following command to start the services:</p> <pre><code>docker-compose up -d\n</code></pre> <p>You can add your user to <code>docker</code> group in order to avoid to execute docker commands as sudo.</p> <pre><code>sudo usermod -a -G docker [your_username]\n</code></pre>"},{"location":"10-bussines-information-systems/02.%20Installaci%C3%B3%20i%20us%20d%27un%20ERP/","title":"Instal\u00b7laci\u00f3 d'un ERP: ODOO","text":""},{"location":"10-bussines-information-systems/02.%20Installaci%C3%B3%20i%20us%20d%27un%20ERP/#odoo","title":"ODOO","text":"<p>Odoo \u00e9s un conjunt d'eines de programari de gesti\u00f3 empresarial que inclouen,  per exemple, CRM, comer\u00e7 electr\u00f2nic, facturaci\u00f3, comptabilitat, fabricaci\u00f3,  magatzem, gesti\u00f3 de projectes i gesti\u00f3 d'inventaris. La versi\u00f3 de la comunitat  \u00e9s un programari lliure, amb llic\u00e8ncia GNU LGPLv3. La versi\u00f3 Enterprise  t\u00e9 funcions i serveis addicionals propietaris. El codi font per al marc i  els m\u00f2duls ERP b\u00e0sics est\u00e0 organitzat per Odoo S.A., amb seu a B\u00e8lgica.</p> <p>Oddo s'instal\u00b7la com un servei web i est\u00e0 escrit en Python, Javascript i XML.</p>"},{"location":"10-bussines-information-systems/02.%20Installaci%C3%B3%20i%20us%20d%27un%20ERP/#installacio","title":"Instal\u00b7laci\u00f3","text":"<p>El seg\u00fcent fitxer defineix els serveis necessaris per posar en marxa Oddo 12 en un contenidor Docker.</p> <pre><code>version: '2'\nservices:\n  web:\n    image: odoo:12.0\n    depends_on:\n      - db\n    ports:\n      - \"8069:8069\"\n    volumes:\n      - odoo-web-data:/var/lib/odoo\n      - ./config:/etc/odoo\n      - ./addons:/mnt/extra-addons\n    environment:\n        LANG: 'ca_ES.UTF-8'\n  db:\n    image: postgres:10\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_PASSWORD=odoo\n      - POSTGRES_USER=odoo\n      - PGDATA=/var/lib/postgresql/data/pgdata\n    volumes:\n      - odoo-db-data:/var/lib/postgresql/data/pgdata\nvolumes:\n  odoo-web-data:\n  odoo-db-data:\n</code></pre>"},{"location":"10-bussines-information-systems/02.%20Installaci%C3%B3%20i%20us%20d%27un%20ERP/#activitats","title":"Activitats","text":""},{"location":"10-bussines-information-systems/02.%20Installaci%C3%B3%20i%20us%20d%27un%20ERP/#1-configuracio-duna-empresa","title":"1. Configuraci\u00f3 d\u2019una empresa","text":"<p>L\u2019empresa de la qual volem fer la configuraci\u00f3 \u00e9s:</p> <p>Germans Soler, SL C/ Duanes, 17 03780 Pego (Alacant)</p> <p>Creeu l\u2019empresa i configureu-la fins que estiga preparada per entrar-hi les dades. Afegiu un logotip personalitzat per a l'empresa.</p>"},{"location":"10-bussines-information-systems/02.%20Installaci%C3%B3%20i%20us%20d%27un%20ERP/#2-treballadors-a-lempresa","title":"2. Treballadors a l'empresa","text":"<p>L\u2019empresa t\u00e9 quatre treballadors que han de poder accedir l'aplicaci\u00f3:</p> <ul> <li>Manel Soler (administrador)</li> <li>Pere Soler (vendes)</li> <li>Miquel Puig (vendes)</li> <li>Maria Ferrer (compres)</li> </ul> <p>Creeu-los els usuaris assignant-los els permisos adequats. </p>"},{"location":"10-bussines-information-systems/02.%20Installaci%C3%B3%20i%20us%20d%27un%20ERP/#3-articles","title":"3. Articles","text":"<p>Germans Soler, SL, nom\u00e9s es dedica a la venda de pilotes i daus de colors. El seu cat\u00e0leg \u00e9s el seg\u00fcent:</p> Article Categoria Preu Estoc actual Pilota vermella Pilotes 1,00 \u20ac 100 Pilota blava Pilotes 1,50 \u20ac 56 Pilota verda Pilotes 1,25 \u20ac 12 Pilota groga Pilotes 1,50 \u20ac 68 Pilota blanca Pilotes 0,50 \u20ac 1.030 Dau blanc Daus 0,25 \u20ac 540 Dau vermell Daus 0,50 \u20ac 400 Dau blau Daus 0,50 \u20ac 350 <p>Prepareu el sistema perqu\u00e8 els articles tinguen estoc i es puguen vendre. </p>"},{"location":"10-bussines-information-systems/02.%20Installaci%C3%B3%20i%20us%20d%27un%20ERP/#4-clients","title":"4. Clients","text":"<p>Afegiu al sistema els clients seg\u00fcents (podeu inventar-vos aquelles dades que no queden especificades).</p> Nom Descompte rebut Termini de Pagament Pilotes, SL 5% 2 dies Daus INC 0% 2 dies"},{"location":"10-bussines-information-systems/02.%20Installaci%C3%B3%20i%20us%20d%27un%20ERP/#5-facturacio","title":"5. Facturaci\u00f3","text":"<p>Creeu unes quantes vendes (les que vulgueu) i genereu alguna factura. </p>"},{"location":"10-bussines-information-systems/02.%20Installaci%C3%B3%20i%20us%20d%27un%20ERP/#entregable","title":"Entregable","text":"<p>Caldr\u00e0 entregar la seg\u00fcent informaci\u00f3:</p> <ol> <li>Captura de la fitxa amb els permisos dels 4 treballadors.</li> <li>Captura dels productes on es vegen els que heu creat amb l'estoc.</li> <li>3 Factures en format PDF d'almenys els dos clients creats.</li> </ol>"},{"location":"10-bussines-information-systems/99-tasks/","title":"Tasks","text":""},{"location":"10-bussines-information-systems/99-tasks/#introduction","title":"Introduction","text":"<ol> <li> <p>Vertical ERP </p> <p>The purpose of this activity is to see that vertical ERPs are very present in the market.</p> <p>Find Vertical ERP for three or four productive sectors and define its characteristics.</p> </li> </ol>"},{"location":"10-bussines-information-systems/99-tasks/#erp-odoo","title":"ERP: ODOO","text":"<p>Configure the following requirements in Odoo</p> <ol> <li> <p>Setup of a company</p> <p>The company we want to do the configuration is:</p> <pre><code>#####, SL\nC/ Duanes, 17\n03780 Pego (Alacant)\n</code></pre> <p>Set up the company, the name must include your last name, and set it up until it is ready to enter the data.</p> <p>Add a personalized logo for your company.</p> </li> <li> <p>Workers </p> <p>The company has four employees who must be able to access the application:</p> <ul> <li>Manel Soler (Administrator)</li> <li>Pere Soler (sales)</li> <li>Miquel Puig (sales)</li> <li>Maria Ferrer (purchases)</li> </ul> <p>Create users by assigning the right permits.</p> </li> <li> <p>Items</p> <p>Your company is only for the sale of coloured balls and dice. Your catalogue is as follows:</p> </li> </ol> Item Category Price Current stock Red ball Balls \u20ac 1.00 100 Blue ball Balls \u20ac 1.50 56 Green ball Balls \u20ac 1.25 12 Yellow ball Balls \u20ac 1.50 68 White ball Balls \u20ac 0.50 1,030 White dice Dice \u20ac 0.25 540 Red dice Dice \u20ac 0.50 400 Blue dice Dice \u20ac 0.50 350 <pre><code>  Prepare the system so that the items have stock and can be sold.\n</code></pre> <ol> <li> <p>Customers</p> <p>Add the following customers to the system (you can invent those data that are not specified).</p> </li> </ol> Name Discount received Payment deadline Balls, SL 5% 2 days Dices INC 0% 2 days <ol> <li> <p>Invoicing</p> <p>Create a few sales (the ones you want) and generate some bill.</p> <p>The following information will need to be delivered:</p> <ul> <li>Screenshot of the page with the permission of the 4 workers.</li> <li>Screenshot of the items you have created with the stock.</li> <li>3 invoices in pdf format of at least the two clients created.</li> </ul> </li> </ol>"},{"location":"assets/04/04-html/","title":"04 html","text":""},{"location":"assets/04/04-html/#html","title":"HTML","text":""},{"location":"assets/04/04-html/#hypertext-markup-language","title":"HyperText Markup Language","text":""},{"location":"assets/04/04-html/#learning-outcomes","title":"Learning outcomes","text":"<ul> <li>Classify the markup languages \u200b\u200bof the web environment.</li> <li>Know the different sections that make up HTML documents.</li> <li>Create well-formed XHTML documents.</li> <li>Identify the differences between XHTML and HMTL.</li> <li>Recognize the use of XHTML in information management systems.</li> <li>Use tools to develop XHTML documents.</li> </ul>"},{"location":"assets/04/04-html/#contents","title":"Contents","text":"<ol> <li>HTML: structure of a web page.</li> <li>Identification of HTML tags and attributes.</li> <li>XHTML: syntactic and structural differences with HTML.</li> <li>Advantages of XHTML over HTML.</li> <li>HTML and XHTML versions.</li> <li>HTML to XHTML conversion.</li> <li>Web design tools.</li> <li>Transmission of information through markup languages.</li> </ol>"},{"location":"assets/04/04-html/#assessment-criteria","title":"Assessment criteria","text":"<ul> <li>Markup languages \u200b\u200brelated to the web and their versions  have been identified and classified.</li> <li>The structure of an HTML document has been analyzed and the sections that make it up have been identified.</li> <li>The functionality of the main tags and attributes of the HTML language have been recognized.</li> <li>The similarities and differences between HTML and XHTML languages \u200b\u200bhave been established.</li> <li>The use of XHTML in information management systems is recognized.</li> <li>Tools are used in the creation of web documents.</li> </ul>"},{"location":"assets/04/04-html/#introduction","title":"Introduction","text":""},{"location":"assets/04/04-html/#hypertext-markup-language_1","title":"HyperText Markup Language","text":"p {   font-size: 45px; }"},{"location":"assets/04/04-html/#hypertext-markup-language_2","title":"HyperText Markup Language","text":"<p>The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript. </p>"},{"location":"assets/04/04-html/#a-little-history","title":"A little history","text":"<ul> <li>In 1980, Tim Berners-Lee, a physicist at CERN, proposed and prototyped ENQUIRE, a system for CERN researchers to use and share documents. </li> <li>In 1989, Berners-Lee wrote a memo proposing an Internet-based hypertext system. </li> <li>Berners-Lee specified HTML and wrote the browser and server software in late 1990. </li> <li>The first publicly available description of HTML was a document called \"HTML Tags\", first mentioned on the Internet by Tim Berners-Lee in late 1991.</li> </ul>"},{"location":"assets/04/04-html/#a-little-history_1","title":"A little history","text":"<ul> <li>Berners-Lee considered HTML to be an application of SGML. </li> <li>It was formally defined as such by the Internet Engineering Task Force (IETF) with the mid-1993 publication of the first proposal for an HTML specification, the \"Hypertext Markup Language (HTML)\" Internet Draft by Berners-Lee and Dan Connolly, which included an SGML Document type definition to define the grammar.</li> </ul>"},{"location":"assets/04/04-html/#a-little-history_2","title":"A little history","text":"<ul> <li>The draft expired after six months, but was notable for its acknowledgment of the NCSA Mosaic browser's custom tag for embedding in-line images, reflecting the IETF's philosophy of basing standards on successful prototypes.</li> <li>Similarly, Dave Raggett's competing Internet-Draft, \"HTML+ (Hypertext Markup Format)\", from late 1993, suggested standardizing already-implemented features like tables and fill-out forms.</li> </ul>"},{"location":"assets/04/04-html/#a-little-history_3","title":"A little history","text":"<ul> <li>After the HTML and HTML+ drafts expired in early 1994, the IETF created an HTML Working Group, which in 1995 completed \"HTML 2.0\", the first HTML specification intended to be treated as a standard against which future implementations should be based.</li> <li>Further development under the auspices of the IETF was stalled by competing interests. Since 1996, the HTML specifications have been maintained, with input from commercial software vendors, by the World Wide Web Consortium (W3C).</li> </ul>"},{"location":"assets/04/04-html/#a-little-history_4","title":"A little history","text":"<ul> <li>However, in 2000, HTML also became an international standard (ISO/IEC 15445:2000). </li> <li>HTML 4.01 was published in late 1999, with further errata published through 2001. </li> <li>In 2004, development began on HTML5 in the Web Hypertext Application Technology Working Group (WHATWG), which became a joint deliverable with the W3C in 2008, and completed and standardized on 28 October 2014.</li> </ul>"},{"location":"assets/04/04-html/#a-little-history_5","title":"A little history","text":"<ul> <li>However, in 2000, HTML also became an international standard (ISO/IEC 15445:2000). </li> <li>HTML 4.01 was published in late 1999, with further errata published through 2001. </li> <li>In 2004, development began on HTML5 in the Web Hypertext Application Technology Working Group (WHATWG), which became a joint deliverable with the W3C in 2008, and completed and standardized on 28 October 2014.</li> </ul>"},{"location":"assets/04/04-html/#a-little-history_6","title":"A little history","text":""},{"location":"assets/04/04-html/#in-july-2012-whatwg-and-w3c-decided-on-a-degree-of-separation-w3c-will-continue-the-html5-specification-work-focusing-on-a-single-definitive-standard-which-is-considered-as-a-snapshot-by-whatwg-the-whatwg-organization-will-continue-its-work-with-html5-as-a-living-standard-the-concept-of-a-living-standard-is-that-it-is-never-complete-and-is-always-being-updated-and-improved-new-features-can-be-added-but-functionality-will-not-be-removed","title":"* In July 2012, WHATWG and W3C decided on a degree of separation. W3C will continue the HTML5 specification work, focusing on a single definitive standard, which is considered as a \"snapshot\" by WHATWG. The WHATWG organization will continue its work with HTML5 as a \"Living Standard\". The concept of a living standard is that it is never complete and is always being updated and improved. New features can be added but functionality will not be removed.","text":""},{"location":"assets/04/04-html/#a-little-history_7","title":"A little history","text":"<ul> <li>On 28 May 2019, the W3C announced that WHATWG would be the sole publisher of the HTML and DOM standards.The W3C and WHATWG had been publishing competing standards since 2012. While the W3C standard was identical to the WHATWG in 2007 the standards have since progressively diverged due to different design decisions. The WHATWG \"Living Standard\" had been the de facto web standard for some time.</li> </ul>"},{"location":"assets/04/04-html/#html-5","title":"HTML 5","text":"<ul> <li>2011 HTML5 \u2013 Last Call</li> <li>2012 HTML5 \u2013 Candidate Recommendation</li> <li>2014 HTML5 \u2013 Proposed Recommendation and Recommendation</li> <li>2016 HTML 5.1 - Published as a W3C Recommendation.</li> <li>2017 HTML 5.2 - Published as a W3C Recommendation.</li> <li>Currently the standard is maintained by WHATWG and it is known as a \"living standard\"</li> </ul>"},{"location":"assets/04/04-html/#html-401-vs-xhtml-11","title":"HTML 4.01 vs XHTML 1.1","text":""},{"location":"assets/04/04-html/#html-5-vs-xhtml5","title":"HTML 5 vs (X)HTML5","text":""},{"location":"assets/04/04-html/#what-is-the-web-and-how-does-it-work","title":"\ud83d\udcf9 What is \"The Web\" and how does it work?","text":"<p>https://www.youtube.com/watch?v=O_GWbkXIqEY&amp;list=PLo3w8EB99pqLEopnunz-dOOBJ8t-Wgt2g&amp;index=1</p>"},{"location":"assets/04/04-html/#whats-html-and-how-does-it-work","title":"\ud83d\udcf9 What's HTML and how does it work?","text":"<ul> <li> <p>https://www.youtube.com/watch?v=PORRrz3Y8Vc&amp;list=PLo3w8EB99pqLEopnunz-dOOBJ8t-Wgt2g&amp;index=2</p> </li> <li> <p>Vocabulary:</p> </li> <li>quirky: peculiar</li> <li>fully-fledge: completament desenvolupat</li> <li>fiddle with something: jugar amb ...</li> <li>fancy: sofisticat</li> <li>dull: avorrit</li> </ul>"},{"location":"assets/04/04-html/#tasks","title":"Tasks","text":"<ol> <li>Getting started with the web</li> <li>Introduction to HTML</li> <li>Images in HTML</li> <li>HTML Tables</li> <li>Web forms \u2014 Working with user data REVIEW!</li> </ol>"},{"location":"assets/04/04-html/#credits-bibliography-and-webography","title":"Credits, bibliography and webography","text":"<ul> <li> <p>Wikipedia contributors. (2021, October 22). HTML. In Wikipedia, The Free Encyclopedia. Retrieved 17:43, October 22, 2021, from https://en.wikipedia.org/w/index.php?title=HTML&amp;oldid=1051291322 </p> </li> <li> <p>Karl Dubost (2008, January 15). HTML 5, one vocabulary, two serializations. Retrieved 16:00 October 22, 2021 https://www.w3.org/blog/2008/01/html5-is-html-and-xml/</p> </li> </ul>"}]}